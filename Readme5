export interface INSMultiSelectDropdownSelectedCallback {
    (item: any,index: number): boolean;
}

export interface INSMultiSelectDropdownDisabledCallback {
    (item: any,index: number): boolean;
}

export interface INSMultiSelectDropdownLabelRenderer {
    (arrSelectedItem: any[],arrSelectedIndexes: number[],arrTexts: string[],labelField:string): string;
}

export interface INSMultiSelectDropdownFilterSetting {
    caseSensitive?: boolean,
    multiline?: boolean,
    matchType?: string;
}


export interface INSMultiSelectDropdownSetting {
    context?: any,
    dataSource?:any[],
    labelField?: string,
    enableVirtualScroll?: boolean,
    itemHeight?: number,
    labelType?: string,
    itemAllowedToBeSelected?: number,
    countAfterShowText?: number,
    truncateText?: boolean,
    listWidth?: string,
    listHeight?: string,
    filterSetting?: INSMultiSelectDropdownFilterSetting,
    noDataMessage?: string,                              
    placeHolder?: string,
    searchPlaceHolder?: string,
    selectedCallback?: INSMultiSelectDropdownSelectedCallback,
    disabledCallback?: INSMultiSelectDropdownDisabledCallback,
    textSelectAll?: string,
    textAllSelected?: string,
    textSelectedCount?: string,
    setTitle?: boolean,
    displayDelimiter?: string,
    enableDefaultOpen?: boolean,
    labelRenderer?: INSMultiSelectDropdownLabelRenderer,
    position?: string,
    showDropDownIcon?: boolean,
    searchInterval?: number,
    [propName: string]: any;
}



import * as React from 'react';

import 'nsmultiselectdropdown/nsMultiSelectDropdown.min.css';

import { INSMultiSelectDropdownSetting } from "./interfaces";
import { NSUtil } from 'nscomputil';
import { NSMultiSelectDropdown } from 'nsmultiselectdropdown';

export interface INSMultiSelectDropdownReactSetting extends INSMultiSelectDropdownSetting {
    setting?: INSMultiSelectDropdownSetting;
}

export class NSMultiselectDropdownReact extends React.Component<INSMultiSelectDropdownReactSetting, any> 
{
    public static readonly LABEL_TYPE_OF_TEXT = NSMultiSelectDropdown.LABEL_TYPE_OF_TEXT;
    public static readonly LABEL_TYPE_HORIZONTAL_LIST = NSMultiSelectDropdown.LABEL_TYPE_HORIZONTAL_LIST;
    public static readonly LABEL_TYPE_VERTICAL_LIST = NSMultiSelectDropdown.LABEL_TYPE_VERTICAL_LIST;
    
    private __objNSMultiSelectDropdown: any;
    private __container: any;
    private __nsUtil : any;
    private __arrEvents: string[] = [];
    private __setting:INSMultiSelectDropdownReactSetting;
    private __source: any[];
    private __arrItems: any[];
    private __hasInitialized: boolean = false;
    private __hasDestroyed: boolean = false;

    constructor(public props: INSMultiSelectDropdownReactSetting, public state: any) 
    {
        super(props, state);
    }
    
    public componentDidMount() 
    {
        if(!this.__objNSMultiSelectDropdown)
        {
            this.__nsUtil = new NSUtil();
            this.__arrEvents = [ NSMultiSelectDropdown.DROPDOWN_OPEN,
                                 NSMultiSelectDropdown.DROPDOWN_Close,
                                 NSMultiSelectDropdown.DROPDOWN_ITEM_CLICK,
                               ];            
            const setting:INSMultiSelectDropdownReactSetting =  this.__nsUtil.cloneObject(this.props.setting,true);
            this.__setting = setting;
            this.create();
            this.__addEvents();
        }
        this.__hasInitialized = true;
    }
    
    public shouldComponentUpdate(nextProps: any, nextState: any) 
    {
        return false;
    }
    
    public componentWillReceiveProps(nextProps: any) 
    {
        
    }
    
    public componentWillUnmount() 
    {
        if(this.__hasInitialized)
        {
            this.__hasDestroyed = true;
        }
    }
    
    public render() 
    {
        return React.createElement<any>("div",{
            style: this.__getStyleForContainer(),
            ref: (e: HTMLElement) => {
                this.__container = e;
            }
        });
    }
    
    public getElement(): any
    {
        return this.__container;
    };
    
    public create(): void
    {
        if(!this.__objNSMultiSelectDropdown && this.__setting)
        {
            if(this.__source && this.__source.length > 0)
            {
                this.__setting["dataSource"] = this.__source; 
            }
            this.__objNSMultiSelectDropdown = new NSMultiSelectDropdown(this.__container,this.__setting);
            if(this.__arrItems != null && this.__arrItems.length > 0)
            {
                for (let item of this.__arrItems) 
                {
                    this.setSelectUnselectItems(item.items,item.isSelected);
                }
                this.__arrItems = null;
            }
        }
    };
    
    dataSource(source: any[]): void
    {
        this.__source = source;
        this.create();
        if(this.__objNSMultiSelectDropdown)
        {
            this.__objNSMultiSelectDropdown.dataSource(source);
        }
    };
    
    getSelectedIndexes(): number[]
    {
        return this.__objNSMultiSelectDropdown.getSelectedIndexes();
    };
    
    getSelectedItems(): any[]
    {
        return this.__objNSMultiSelectDropdown.getSelectedItems();
    };
    
    setSelectUnselectItems(arrItems: any,isSelected: boolean): void
    {
        if(this.__objNSMultiSelectDropdown)
        {
            this.__objNSMultiSelectDropdown.setSelectUnselectItems(arrItems,isSelected);
        }
        else
        {
            if(!this.__arrItems)
            {
                this.__arrItems = [];
            }
            this.__arrItems.push({items:arrItems,isSelected:isSelected});
        }
    };
    
    setStyle(styleProp: string,value: any): void
    {
        this.__objNSMultiSelectDropdown.setStyle(styleProp,value);
    };
    
    setFocus(isFocus: boolean): void
    {
        this.__objNSMultiSelectDropdown.setFocus(isFocus);
    };
    
    hasFocus(): boolean
    {
        return this.__objNSMultiSelectDropdown.hasFocus();
    };
    
    setTheme(theme: string): void
    {
        this.__objNSMultiSelectDropdown.setTheme(theme);
    };
    
    changeProperty(propertyName: string,value: any): void
    {
        this.__objNSMultiSelectDropdown.changeProperty(propertyName,value);
    };
    
    private __getStyleForContainer() 
    {
        const style: any = { height: "100%" };
        const containerStyle = this.props.containerStyle;
        if (containerStyle) {
            Object.keys(containerStyle).forEach(key => {
                style[key] = containerStyle[key];
            });
        }
        return style;
    }
    
    private __addEvents()
    {
        const self = this;
        for (const eventName of this.__arrEvents)
        {
            this.__nsUtil.addEvent(this.__container,eventName,(function(eventNameParam: string){
              return function(event: any) {
                console.log(event);
                event.stopPropagation();
                event.stopImmediatePropagation();
                self.__eventListener.bind(self)(event,eventNameParam);
              }
            })(eventName));
        }
    }
    
    private __eventListener(event: any,eventName: string)
    {
        const eventListenerName: string = 'on' + eventName[0].toUpperCase() + eventName.substring(1);
        if(this.props[eventListenerName])
        {
            this.props[eventListenerName](event);
        }
    }
    
}
