if(typeof exports === 'object' && typeof module === 'object' && !module["notValid"] && !exports["notValid"])
		{
			moduleRef = moduleRef ? moduleRef : module;
			exportsRef = exportsRef ? exportsRef : exports;
			moduleRef.exports[name] = prototype;
		}
		else if (typeof define === "function" && define.amd)
		{
			define(name,[], function () {return prototype;});
		}
		else if(typeof exportsRef === 'object'  && !exports["notValid"])
		{
			exportsRef = exportsRef ? exportsRef : exports;
			exportsRef[name] = prototype;
		}
		else
		{
			root[name] = prototype;
		}
    
    if(typeof exports !== 'object')
		{
			root["exports"] = {notValid:true};
		}
		if(typeof module !== 'object')
		{
			root["module"] = {notValid:true};
		}
    
    NSUtil.prototype.getDomVariables = function()
	{
		var retValue = {doc: null,window: null};
		if(typeof document === 'undefined')
		{
			retValue.doc = {
					body: {},
				    addEventListener: function addEventListener() {},
				    removeEventListener: function removeEventListener() {},
				    activeElement: {
				      blur: function blur() {},
				      nodeName: '',
				    },
				    querySelector: function querySelector() {
				      return null;
				    },
				    querySelectorAll: function querySelectorAll() {
				      return [];
				    },
				    getElementById: function getElementById() {
				      return null;
				    },
				    createEvent: function createEvent() {
				      return {
				        initEvent: function initEvent() {},
				      };
				    },
				    createElement: function createElement() {
				      return {
				        children: [],
				        childNodes: [],
				        style: {},
				        setAttribute: function setAttribute() {},
				        getElementsByTagName: function getElementsByTagName() {
				          return [];
				        },
				      };
				    },
				    location: { hash: '' },
			};
		}
		else
		{
			retValue.doc = document;
		}
		if(typeof window === 'undefined')
		{
			retValue.win = 
			{
					document: retValue.doc,
				    navigator: {
				      userAgent: '',
				    },
				    location: {},
				    history: {},
				    CustomEvent: function CustomEvent() {
				      return this;
				    },
				    addEventListener: function addEventListener() {},
				    removeEventListener: function removeEventListener() {},
				    getComputedStyle: function getComputedStyle() {
				      return {
				        getPropertyValue: function getPropertyValue() {
				          return '';
				        },
				      };
				    },
				    Image: function Image() {},
				    Date: function Date() {},
				    screen: {},
				    setTimeout: function setTimeout() {},
				    clearTimeout: function clearTimeout() {},
			};
		}
		else
		{
			retValue.win = window;
		}
		return retValue;
	};
	
	NSUtil.prototype.getSupportedEvents = function ()
	{
		var obj = this.getDomVariables();
		var win = obj.win;
		var doc = obj.doc;
		var retValue = {};
		retValue.touch = (win.Modernizr && win.Modernizr.touch === true) || (!!((win.navigator.maxTouchPoints > 0) || ('ontouchstart' in win) || (win.DocumentTouch && doc instanceof win.DocumentTouch)));
		retValue.pointerEvents = !!win.PointerEvent && ('maxTouchPoints' in win.navigator) && win.navigator.maxTouchPoints > 0;
		retValue.passiveListener = (function checkPassiveListener() {
		        var supportsPassive = false;
		        try {
		          var opts = Object.defineProperty({}, 'passive', {
		            // eslint-disable-next-line
		            get: function get() {
		              supportsPassive = true;
		            },
		          });
		          win.addEventListener('testPassiveListener', null, opts);
		        } catch (e) {
		          // No support
		        }
		        return supportsPassive;
	      }());
		retValue.gestures = 'ongesturestart' in win;
		
		return retValue;
	};
  
  NSUtil.prototype.addEvent = (document.addEventListener) ? 
	function(element, eventType, listener)
	{
		if(element)
		{
			arrEventType = eventType.split(" ");
			for(var count = 0;count < arrEventType.length;count++)
			{
				element.addEventListener(arrEventType[count], listener);
			}
		}
	} :
	function(element, eventType, listener)
	{
		if(element)
		{
			arrEventType = eventType.split(" ");
			for(var count = 0;count < arrEventType.length;count++)
			{
				element.attachEvent("on" + arrEventType[count], listener);
			}
		}
	};
	
	NSUtil.prototype.removeEvent = (document.removeEventListener) ? 
	function(element, eventType, listener)
	{
		if(element)
		{
			arrEventType = eventType.split(" ");
			for(var count = 0;count < arrEventType.length;count++)
			{
				element.removeEventListener(arrEventType[count], listener);
			}
		}
	} :
	function(element, eventType, listener)
	{
		if(element)
		{
			arrEventType = eventType.split(" ");
			for(var count = 0;count < arrEventType.length;count++)
			{
				element.detachEvent("on" + arrEventType[count], listener);
			}
		}
	}; 
