.nsEditor .nsEditorFooterContainer .nsEditorWordsContainer,
.nsEditor .nsEditorFooterContainer .nsEditorCharsContainer
{
	padding: 10px;
	color: #999999;
	font-size: 14px;
    font-family: sans-serif;
}
.nsEditor .nsEditorFooterContainer .nsEditorElementPathContainer
{
	margin-left: 5px;
	color: #999999;
	font-size: 12px;
    font-family: sans-serif;
    white-space: nowrap;
}
.nsEditor .nsEditorFooterContainer .nsEditorElementPathContainer .nsEditorElementPath
{
	position: relative;
    margin: 0;
    padding: 0;
    list-style: none;
    display: -ms-flexbox;
    display: flex;
    align-items: center;
    justify-content: flex-start;
}
.nsEditor .nsEditorFooterContainer .nsEditorElementPathContainer .nsEditorElementPath .nsEditorElementPathItem
{
/* 	margin-right: 5px; */
}
.nsEditor .nsEditorFooterContainer .nsEditorElementPathContainer .nsEditorElementPath .nsEditorElementPathItem a
{
	text-decoration: none;
    cursor: default;
    border-radius: 3px;
    user-select: none;
    display: inline-block;
    vertical-align: baseline;
    text-align: left;
    white-space: nowrap;
    padding: 2px 3px;
    line-height: 10px;
    outline: 0;
    border: 0;
    color: #222;
}
.nsEditor .nsEditorFooterContainer .nsEditorElementPathContainer .nsEditorElementPath .nsEditorElementPathItem a:hover
{
	background-color: hsla(0,0%,88.2%,.99);
    text-decoration: none;
    color: #222;
}


var NSFooterComp = (function()
{
	var NSFooterComp = function(nsEditor)
	{
		this.__nsEditor = nsEditor;
		this.util = nsEditor.util;
		
		this.__compElementPathContainerContainer = null;
		this.__compElementPath = null;
		this.__compWords = null;
		this.__compChars = null;
		
		this.setSettings = function()
		{
			this.__nsEditor.__config["enableElementPath"] = this.util.isUndefinedOrNull(this.__nsEditor.__setting["enableElementPath"]) ? true : Boolean.parse(this.__nsEditor.__setting["enableElementPath"]);
			this.__nsEditor.__config["enableWordsCount"] = this.util.isUndefinedOrNull(this.__nsEditor.__setting["enableWordsCount"]) ? true : Boolean.parse(this.__nsEditor.__setting["enableWordsCount"]);
			this.__nsEditor.__config["enableCharsCount"] = this.util.isUndefinedOrNull(this.__nsEditor.__setting["enableCharsCount"]) ? true : Boolean.parse(this.__nsEditor.__setting["enableCharsCount"]);
		};
		
		this.initialize = function()
		{
		};
		
		this.componentsInitialized = function()
		{
			if(this.__nsEditor.__config["enableElementPath"])
			{
				this.__compElementPathContainer = this.util.createElement("div",null,"nsEditorElementPathContainer");
				this.__nsEditor.__divFooterLeftContainer.appendChild(this.__compElementPathContainer);
				this.__compElementPath = this.util.createElement("ul",null,"nsEditorElementPath");
				this.__compElementPathContainer.appendChild(this.__compElementPath);
			}
			if(this.__nsEditor.__config["enableWordsCount"])
			{
				this.__compWords = this.util.createElement("span",null,"nsEditorWordsContainer");
				this.__nsEditor.__divFooterRightContainer.appendChild(this.__compWords);
			}
			if(this.__nsEditor.__config["enableCharsCount"])
			{
				this.__compChars = this.util.createElement("span",null,"nsEditorCharsContainer");
				this.__nsEditor.__divFooterRightContainer.appendChild(this.__compChars);
			}
			this.__nsEditor.__listenInternalEvent("change keyup",this.__keyEventHandler.bind(this));
			this.__nsEditor.__listenInternalEvent("change keyup click selectionchange selectionstart",this.__pathChangeHandler.bind(this));
			this.__refreshFooterComp();
			this.__setElementPath();
		};
		
		this.resized = function(event)
		{
			
		};
		
		this.destroy = function()
		{
		};
		
		this.__keyEventHandler = function(event,eventDetail)
		{
			//var orignalEvent = eventDetail.orignalEvent;
			this.__refreshFooterComp();
		};
		
		this.__pathChangeHandler = function(event,eventDetail)
		{
			//var orignalEvent = eventDetail.orignalEvent;
			this.__setElementPath();
		};
		
		this.__refreshFooterComp = function()
		{
			if(this.__compWords)
			{
				this.__compWords.innerHTML = "Words: " + this.__getWordCount();
			}
			if(this.__compChars)
			{
				this.__compChars.innerHTML = "Chars: " + this.__getCharCount();
			}
		};
		
		this.__setElementPath = function()
		{
			if(this.__compElementPath)
			{
				var element = this.__nsEditor.__findCurrentElement();
				this.__compElementPath.innerHTML = "";
				//var html = "";
				if(element)
				{
					var textArea = this.__nsEditor.__getTextArea();
					var self = this;
					var scanParent = function(paramElement)
					{
						 if(paramElement && textArea !== paramElement && !self.util.isTextNode(paramElement)) 
						 {
							 var name = paramElement.nodeName.toLowerCase();
							 var path = self.__getXPathByElement(paramElement,textArea).replace(/^\//, "");
							 var li = self.__getLI(paramElement,path,name,"Select " + name);
							 if(self.__compElementPath.firstChild)
							 {
								 self.__compElementPath.insertBefore(self.__getSeparatorLI(),self.__compElementPath.firstChild);
							 }
							 self.__compElementPath.insertBefore(li,self.__compElementPath.firstChild);
							 //html = name + (html ? " > " : "") + html;
							 //console.log(html);
						 }
					};
					this.__nsEditor.__loopParents(element,scanParent,textArea);
				}
				//this.__compElementPathContainer.innerHTML = html ? ("Path: " + html) : "";
			}
		};
		
		this.__getSeparatorLI = function() 
		{
			var html = "<li> > </li>";
			var li = this.util.getElementFromHtml(html);
            var a = li.firstChild;
            return li;
		};
		
		this.__getLI = function(bindElement, path, name, title) 
		{
			var html = "<li class=\"nsEditorElementPathItem\"><a role=\"button\" data-nseditor-path=\"" + path + "\" href=\"javascript:void(0)\" title=\"" + title + "\" tabindex=\"-1\"'>" + name + "</a></li>";
            var li = this.util.getElementFromHtml(html);
            var a = li.firstChild;
            this.util.addEvent(a,"click",this.__selectPathHandler.bind(this,bindElement,path,name));
            //this.util.addEvent(a,"contextmenu",this.__contextMenuHandler.bind(this,bindElement));
            return li;
        };
        
        this.__getXPathByElement = function(element, textArea)
        {
        	if (!element || element.nodeType !== 1) 
        	{
                return "";
            }
            if (!element.parentNode || textArea === element) 
            {
                return "";
            }
            if (element.id) 
            {
                return "//*[@id='" + element.id + "']";
            }
            var arrSameElement = [].filter.call(element.parentNode.childNodes, function (node) { return node.nodeName === element.nodeName; });
            var parentPath = this.__getXPathByElement(element.parentNode, textArea);
            var indexString = arrSameElement.length > 1 ? "[" + (Array.from(arrSameElement).indexOf(element) + 1) + "]": "";
            var retString = parentPath + "/" +  element.nodeName.toLowerCase() + indexString;
            return retString;
        };
        
        this.__selectPathHandler = function(element,path,name,event)
        {
        	try 
        	{
        		var doc = this.__nsEditor.__getDocument();
        		var textArea = this.__nsEditor.__getTextArea();
                var pathElements = doc.evaluate(path,textArea, null, XPathResult.ANY_TYPE, null);
                var selectedElement = pathElements.iterateNext();
                if (selectedElement) 
                {
                	this.__nsEditor.__selectElement(selectedElement);
                    return;
                }
            }
            catch (error) 
            { 
            }
            this.__nsEditor.__selectElement(element);
            return;
        };
		
		this.__getWordCount = function()
		{
			var wordcount = 0;
			var html = this.__nsEditor.__getHtmlFromTextArea() || "";
			if(html.replace(/\s*<[^>]*?>\s*/g, '') !== '') 
			{
	            if (html.trim() !== "") 
	            {
	            	//remove inline tags without adding spaces
	            	html = html.replace(/<\/?(b|i|em|strong|span|u|strikethrough|a|img|small|sub|sup|label)( [^>*?])?>/gi, '');
	            	//replace adjacent tags with possible space between with a space
	            	html = html.replace(/(<[^>]*?>\s*<[^>]*?>)/ig, ' ');
	            	//remove any singular tags
	                html = html.replace(/(<[^>]*?>)/ig, '');
	                //condense spacing
	                html = html.replace(/\s+/ig, ' ');
	                //count remaining non-space strings
	                wordcount = html.match(/\S+/g).length; 
	            }
	        }
			return wordcount;
		};
		
		this.__getCharCount = function()
		{
			var text = this.__nsEditor.__getTextFromTextArea() || "";
			var charcount = text.replace(/(\r\n|\n|\r)/gm,"").replace(/^\s+/g,' ').replace(/\s+$/g, ' ').length;
			return charcount;
		};
		
		NSEditor.prototype.getWordCount = function()
		{
			var objFooterComp = this.__pluginsInstances["footercomp"].instance;
			return objFooterComp.__getWordCount();
		};
		
		NSEditor.prototype.getCharCount = function()
		{
			var objFooterComp = this.__pluginsInstances["footercomp"].instance;
			return objFooterComp.__getCharCount();
		};
		
	};
	
	NSEditor.prototype.registerPlugin("footercomp",NSFooterComp);
	
	return NSFooterComp;
})();
nsModuleExport(this,"NSFooterComp",NSFooterComp,module,exports);
