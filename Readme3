import {
    Injectable,
    Injector,
    ComponentFactoryResolver,
    EmbeddedViewRef,
    ApplicationRef,
    ViewContainerRef,
    ComponentRef
} from '@angular/core';

@Injectable()
export class DynamicComponentService 
{

    constructor(private componentFactoryResolver: ComponentFactoryResolver,
                private applicationRef: ApplicationRef,
                //private viewContainerRef: ViewContainerRef,
                private injector: Injector) 
    { 
    
    }

    createComponentRef(componentClass: any): ComponentRef<any> 
    {
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
        const componentRef = factory.create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        return componentRef;
    }
    
    getInstanceFromComponentRef(componentRef: ComponentRef<any>): any
    {
        return componentRef.instance;
    }

    getDomElementFromComponentRef(componentRef: ComponentRef<any>): HTMLElement 
    {
        return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;
    }

    destroyRef(componentRef: ComponentRef<any>, delay: number) 
    {
        setTimeout(() => {
            this.applicationRef.detachView(componentRef.hostView);
            componentRef.destroy();
        }, delay);
    }
    
}
