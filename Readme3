package com.org;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.org.util.FileMerger;


public class JSComplierDemo 
{
	//private final String basePath = "F:\\New Workspace\\JSLib\\src\\main\\webapp\\";
	private final String basePath = "C:\\Temp\\Anurag\\Workspace\\JSLib\\src\\main\\webapp\\";
	private final String baseJSURL = basePath + "lib\\com\\org\\";
	private final String baseCSSURL = basePath + "lib\\css\\com\\org\\";
	//private final String outputURL = basePath + "generated\\";
	//private final String outputJSURL = outputURL + "js\\";
	private final String outputURL = basePath + "package\\";
	private final String outputJSURL = outputURL + "##moduleName##\\";
	//private final String outputCSSURL = outputURL + "css\\";
	private final String outputCSSURL = outputURL + "##moduleName##\\";
	
	private FileMerger fileMerger = null;
	
	private String utilRef = "var nsutilRef = require('nscomputil');\r\n" + 
			"	var nsModuleExport = nsutilRef.nsModuleExport;\r\n" + 
			"	var NSUtil = nsutilRef.NSUtil;\r\n";
	
	private String svgRef = "var svgRef = require('NSSvg');\r\n" + 
			"var NSSvg = svgRef.NSSvg;\r\n" + 
			"var NSSvgShapes = svgRef.NSSvgShapes;\r\n";
	
	private String plugginsRef = "var plugginsRef = require('nspluggins');\r\n" + 
			"var nsTextEditor = plugginsRef.nsTextEditor;\r\n" + 
			"var nsTextAreaEditor = plugginsRef.nsTextAreaEditor;\r\n" + 
			"var NSCellSelection = plugginsRef.NSCellSelection;\r\n" + 
			"var NSTableCellNavigator = plugginsRef.NSTableCellNavigator;\r\n";
	
	private String pintipRef = "var pintipRef = require('nspintip');\r\n" + 
			"var NSPinTip = pintipRef.NSPinTip;\r\n";
	
	private String containerBaseRef = "var nscontainerbaseRef = require('nscontainerbase');\r\n" + 
			"	var nsExtendPrototype = nscontainerbaseRef.nsExtendPrototype;\r\n" + 
			"	var NSContainerBase = nscontainerbaseRef.NSContainerBase;\r\n";
	
	private String consoleRef = "var nsconsoleRef = require('nsconsole');\r\n" + 
			"var NSConsole = nsconsoleRef.NSConsole;\r\n";
	
	private String dateutilRef = "var dateutilRef = require('nsdateutil');\r\n" + 
					"var NSDateUtil = dateutilRef.NSDateUtil;\r\n";
	
			
	
	private void loadBaseJSFile() throws Exception
	{
		Map<String,String> mapJSFiles = new HashMap<String,String>();
		mapJSFiles.put("nsUtil", baseJSURL + "util\\nsUtil.js");
		mapJSFiles.put("nsSVG", baseJSURL + "util\\nsSVG.js");
		mapJSFiles.put("nsPluggins", baseJSURL + "util\\nsPluggins.js");
		mapJSFiles.put("nsPinTip", baseJSURL + "util\\nsPinTip.js");
		mapJSFiles.put("nsContainerBase", baseJSURL + "prototype\\base\\nsContainerBase.js");
		mapJSFiles.put("nsConsole", baseJSURL + "util\\nsConsole.js");
		mapJSFiles.put("nsDateUtil", baseJSURL + "util\\nsDateUtil.js");
		
		Map<String,String> mapJSStartText = new HashMap<String,String>();
		mapJSStartText.put("nsSVG", utilRef);
		mapJSStartText.put("nsPluggins", utilRef);
		mapJSStartText.put("nsPinTip", utilRef);
		mapJSStartText.put("nsContainerBase", utilRef);
		mapJSStartText.put("nsConsole", utilRef);
		mapJSStartText.put("nsDateUtil", utilRef);
		
		for(String key:mapJSFiles.keySet())
		{
			String inputFile = mapJSFiles.get(key);
			String[] arrOutput = inputFile.split("\\\\");
			String outputFileName = arrOutput[arrOutput.length - 1].replace(".js",".min.js");
			loadFile(new String[]{inputFile},null,outputJSURL.replaceAll("##moduleName##", key) + outputFileName,mapJSStartText.get(key));
		}
	}
	
	private void loadJSFile(String component) throws Exception
	{
		Map<String,String> mapJSFiles = new HashMap<String,String>();
		mapJSFiles.put("nsDividerBox", baseJSURL + "prototype\\nsDividerBox.js");
		mapJSFiles.put("nsBanner", baseJSURL + "containers\\nsBanner.js");
		mapJSFiles.put("nsProgressBar", baseJSURL + "containers\\nsProgressBar.js");
		mapJSFiles.put("nsGrid", baseJSURL + "prototype\\nsGrid.js");
		mapJSFiles.put("nsList", baseJSURL + "prototype\\nsList.js");
		mapJSFiles.put("nsTextBox", baseJSURL + "prototype\\nsTextBox.js");
		mapJSFiles.put("nsMenu", baseJSURL + "util\\nsMenu.js");
		mapJSFiles.put("nsPagination", baseJSURL + "util\\nsPagination.js");
		mapJSFiles.put("nsPanel", baseJSURL + "prototype\\nsPanel.js");
		mapJSFiles.put("nsDragDrop", baseJSURL + "util\\nsDragDrop.js");
		mapJSFiles.put("nsChart", baseJSURL + "prototype\\nsChart.js");
		mapJSFiles.put("nsModal", baseJSURL + "containers\\nsModal.js");
		mapJSFiles.put("nsExport", baseJSURL + "util\\nsExport.js");
		mapJSFiles.put("nsFilter", baseJSURL + "util\\nsFilter.js");
		mapJSFiles.put("nsFlatGrid", baseJSURL + "util\\nsFlatGrid.js");
		mapJSFiles.put("nsHierarchicalGrid", baseJSURL + "util\\nsHierarchicalGrid.js");
		mapJSFiles.put("nsGroupingGrid", baseJSURL + "util\\nsGroupingGrid.js");
		mapJSFiles.put("nsGridPluggins", baseJSURL + "util\\nsGridPluggins.js");
		mapJSFiles.put("nsBarChart", baseJSURL + "util\\nsBarChart.js");
		mapJSFiles.put("nsPieChart", baseJSURL + "util\\nsPieChart.js");
		mapJSFiles.put("nsLineChart", baseJSURL + "util\\nsLineChart.js");
		mapJSFiles.put("nsDonutChart", baseJSURL + "util\\nsDonutChart.js");
		mapJSFiles.put("nsNavigation", baseJSURL + "prototype\\nsNavigation.js");
		mapJSFiles.put("nsRouter", baseJSURL + "util\\nsRouter.js");
		mapJSFiles.put("nsMessageBox", baseJSURL + "util\\nsMessageBox.js");
		mapJSFiles.put("nsCalendar", baseJSURL + "prototype\\nsCalendar.js");
		mapJSFiles.put("nsDatePicker", baseJSURL + "prototype\\nsDatePicker.js");
		mapJSFiles.put("nsXlsxExport", baseJSURL + "util\\nsXlsxExport.js");
		mapJSFiles.put("nsModalManager", baseJSURL + "util\\nsModalManager.js");
		mapJSFiles.put("nsMultiSelectDropdown", baseJSURL + "prototype\\nsMultiSelectDropdown.js");
		mapJSFiles.put("nsTableRowMover", baseJSURL + "util\\nsTableRowMover.js");
		mapJSFiles.put("nsNumericTextBox", baseJSURL + "util\\nsNumericTextBox.js");
		
		Map<String,String[]> mapJSDependency = new HashMap<String,String[]>();
		mapJSDependency.put("nsProgressBar",new String[]{"nsModal"});
		mapJSDependency.put("nsGrid",new String[]{"nsMenu","nsPagination","nsExport","nsFilter","nsFlatGrid","nsHierarchicalGrid","nsGroupingGrid","nsGridPluggins","nsList"});
		mapJSDependency.put("nsList",new String[]{"nsDragDrop","nsFilter","nsMenu"});
		mapJSDependency.put("nsTextBox",new String[]{"nsList"});
		mapJSDependency.put("nsChart",new String[]{"nsBarChart","nsPieChart","nsLineChart","nsDonutChart"});
		mapJSDependency.put("nsMessageBox",new String[]{"nsPanel"});
		mapJSDependency.put("nsDatePicker",new String[]{"nsCalendar"});
		mapJSDependency.put("nsModalManager",new String[]{"nsMessageBox,nsPanel"});
		mapJSDependency.put("nsDatePicker",new String[]{"nsCalendar"});
		
		String startText = utilRef + containerBaseRef;
		String dependenciesText = startText + svgRef + plugginsRef + dateutilRef;
		String gridRef = "var gridRef = require('nsgrid');\r\n" + 
				"var NSGrid = gridRef.NSGrid;\r\n";
		Map<String,String> mapJSStartText = new HashMap<String,String>();
		mapJSStartText.put("nsDividerBox", startText);
		//mapJSStartText.put("nsBanner", baseJSURL + "containers\\nsBanner.js");
		//mapJSStartText.put("nsProgressBar", baseJSURL + "containers\\nsProgressBar.js");
		mapJSStartText.put("nsGrid", dependenciesText);
		mapJSStartText.put("nsList", dependenciesText);
		mapJSStartText.put("nsTextBox", dependenciesText + gridRef);
		mapJSStartText.put("nsMenu", dependenciesText);
		mapJSStartText.put("nsPagination", dependenciesText);
		mapJSStartText.put("nsPanel", dependenciesText);
		mapJSStartText.put("nsDragDrop", dependenciesText);
		//mapJSStartText.put("nsChart", baseJSURL + "prototype\\nsChart.js");
		mapJSStartText.put("nsModal", dependenciesText);
		mapJSStartText.put("nsExport", dependenciesText);
		mapJSStartText.put("nsFilter", utilRef);
		/*mapJSStartText.put("nsBarChart", baseJSURL + "util\\nsBarChart.js");
		mapJSStartText.put("nsPieChart", baseJSURL + "util\\nsPieChart.js");
		mapJSStartText.put("nsLineChart", baseJSURL + "util\\nsLineChart.js");
		mapJSStartText.put("nsDonutChart", baseJSURL + "util\\nsDonutChart.js");*/
		mapJSStartText.put("nsNavigation", dependenciesText);
		mapJSStartText.put("nsRouter", dependenciesText);
		mapJSStartText.put("nsMessageBox", dependenciesText);
		mapJSStartText.put("nsCalendar", dependenciesText);
		mapJSStartText.put("nsDatePicker", dependenciesText);
		mapJSStartText.put("nsXlsxExport", dependenciesText);
		mapJSStartText.put("nsModalManager", dependenciesText);
		mapJSStartText.put("nsMultiSelectDropdown", dependenciesText);
		mapJSStartText.put("nsTableRowMover", dependenciesText);
		mapJSStartText.put("nsNumericTextBox", dependenciesText);
		
		List<String> lstInput = new ArrayList<String>();
		if(mapJSDependency.containsKey(component))
		{
			String[] arrFile = mapJSDependency.get(component);
			if(arrFile != null && arrFile.length > 0)
			{
				for(String file:arrFile)
				{
					lstInput.add(mapJSFiles.get(file));
				}
			}
		}
		lstInput.add(mapJSFiles.get(component));
		loadFile(lstInput.toArray(new String[0]),null,outputJSURL.replaceAll("##moduleName##", component) + component + ".min.js",mapJSStartText.get(component));
	}
	
	private void loadBaseCSSFile() throws Exception
	{
		Map<String,String> mapCSSFiles = new HashMap<String,String>();
		mapCSSFiles.put("component", baseCSSURL + "nsComponent.css");
		mapCSSFiles.put("nsPinTip", baseCSSURL + "nsPinTip.css");
		
		for(String key:mapCSSFiles.keySet())
		{
			String inputFile = mapCSSFiles.get(key);
			String[] arrOutput = inputFile.split("\\\\");
			String outputFileName = arrOutput[arrOutput.length - 1].replace(".css",".min.css");
			loadFile(new String[]{inputFile},null,outputCSSURL.replaceAll("##moduleName##", key) + outputFileName,null);
		}
	}
	
	private void loadCSSFile(String component) throws Exception
	{
		Map<String,String> mapCSSFiles = new HashMap<String,String>();
		mapCSSFiles.put("nsMenu", baseCSSURL + "nsMenu.css");
		mapCSSFiles.put("nsPagination", baseCSSURL + "nsPagination.css");
		mapCSSFiles.put("nsModal", baseCSSURL + "nsModal.css");
		mapCSSFiles.put("nsProgressBar", baseCSSURL + "nsProgressBar.css");
		mapCSSFiles.put("nsProgressBar", baseCSSURL + "nsProgressBar.css");
		mapCSSFiles.put("nsGrid", baseCSSURL + "nsGrid.css");
		mapCSSFiles.put("nsList", baseCSSURL + "nsList.css");
		mapCSSFiles.put("nsTextBox", baseCSSURL + "nsTextBox.css");
		mapCSSFiles.put("nsPanel", baseCSSURL + "nsPanel.css");
		mapCSSFiles.put("nsNavigation", baseCSSURL + "nsNavigation.css");
		mapCSSFiles.put("nsMessageBox", baseCSSURL + "nsMessageBox.css");
		mapCSSFiles.put("nsCalendar", baseCSSURL + "nsCalendar.css");
		mapCSSFiles.put("nsDatePicker", baseCSSURL + "nsDatePicker.css");
		mapCSSFiles.put("nsMultiSelectDropdown", baseCSSURL + "nsMultiSelectDropdown.css");
		mapCSSFiles.put("nsNumericTextBox", baseCSSURL + "nsNumericTextBox.css");
		
		Map<String,String[]> mapDependency = new HashMap<String,String[]>();
		mapDependency.put("nsProgressBar",new String[]{"nsModal","nsProgressBar"});
		mapDependency.put("nsGrid",new String[]{"nsGrid","nsMenu","nsPagination","nsList"});
		mapDependency.put("nsList",new String[]{"nsList","nsMenu"});
		mapDependency.put("nsTextBox",new String[]{"nsList","nsTextBox"});
		mapDependency.put("nsMenu",new String[]{"nsMenu"});
		mapDependency.put("nsPanel",new String[]{"nsPanel"});
		mapDependency.put("nsNavigation",new String[]{"nsNavigation"});
		mapDependency.put("nsPagination",new String[]{"nsPagination"});
		mapDependency.put("nsMessageBox",new String[]{"nsPanel","nsMessageBox"});
		mapDependency.put("nsCalendar",new String[]{"nsCalendar"});
		mapDependency.put("nsDatePicker",new String[]{"nsCalendar","nsDatePicker"});
		mapDependency.put("nsMultiSelectDropdown",new String[]{"nsMultiSelectDropdown"});
		mapDependency.put("nsNumericTextBox",new String[]{"nsNumericTextBox"});
		
		List<String> lstInput = new ArrayList<String>();
		if(mapDependency.containsKey(component))
		{
			String[] arrFile = mapDependency.get(component);
			if(arrFile != null && arrFile.length > 0)
			{
				for(String file:arrFile)
				{
					lstInput.add(mapCSSFiles.get(file));
				}
			}
		}
		loadFile(lstInput.toArray(new String[0]),null,outputCSSURL.replaceAll("##moduleName##", component) + component + ".min.css",null);
	}
	
	private void loadFile(String[] arrInputFile,String[] arrExternalFile,String outputFile,String startText) throws Exception
	{
		if(fileMerger == null)
		{
			fileMerger = new FileMerger();
		}
		fileMerger.compressFiles(arrInputFile, outputFile, startText);
	}
	
	public static void main(String[] args) throws Exception
	{
		JSComplierDemo objCompiler = new JSComplierDemo();
		String[] arrComponent = {"nsProgressBar","nsGrid","nsList","nsDividerBox","nsNavigation","nsPagination","nsExport","nsRouter","nsMessageBox","nsDatePicker","nsTextBox","nsXlsxExport","nsMultiSelectDropdown","nsTableRowMover","nsNumericTextBox"};
		objCompiler.loadBaseJSFile();
		objCompiler.loadBaseCSSFile();
		for(String component:arrComponent)
		{
			objCompiler.loadJSFile(component);
			objCompiler.loadCSSFile(component);
		}
	}
}
