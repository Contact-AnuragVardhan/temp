var NSImageProcessor = (function()
{
	function NSImageProcessor(setting)
	{
		var self = this;
		var util = null;
		var config = {};
		
		//adding below variables to control the functionality for later use 
		var enableUpload = false;
		var enableResize = false;
		var resizeInitialized = false;
		var enableMove = false;
		var moveInitialized = false;
		var enableCrop = false;
		var cropInitialized = false;
		
		var container = null;
		var resizeContainer = null;
		var menuContainer = null;
		var objState = {};
		var objResizer = {nw:null,ne:null,sw:null,se:null};
		var resizeCanvas = null;
		var resizeClonedImage = null;
		var resizeTarget = null;
		var moveContainer = null;
		var menuDefault = {
				move:{action:"move",title:"Move",html:"<i class='fa fa-arrows'></i>",callback:function(event){
					hideResizer();
					initializeMove();
					showMove();
				}},
				crop:{action:"crop",title:"Crop",html:"<i class='fa fa-crop'></i>",callback:function(event){
					hideMove();
					hideResizer();
					initailizeCrop();
				}},
				resize:{action:"resize",title:"Resize",html:"<i class='fa fa-resize'></i>",callback:function(event){
					hideMove();
					initializeResize();
					showResizer();
				}},
				zoomin:{action:"zoomin",title:"Zoom In",html:"<i class='fa fa-search-plus'></i>",callback:function(event){
					hideMove();
					hideResizer();
					zoomIn();
				}},
				zoomout:{action:"zoomout",title:"Zoom Out",html:"<i class='fa fa-search-minus'></i>",callback:function(event){
					hideMove();
					hideResizer();
					zoomOut();
				}},
				rotateleft:{action:"rotateleft",title:"Rotate Left",html:"<i class='fa fa-rotate-left'></i>",callback:function(event){
					
				}},
				rotateright:{action:"rotateright",title:"Rotate Right",html:"<i class='fa fa-rotate-right'></i>",callback:function(event){
					
				}},
				fliphorizontal:{action:"fliphorizontal",title:"Flip Horizontal",html:"<i class='fa fa-arrows-h'></i>",callback:function(event){
					
				}},
				flipvertical:{action:"flipvertical",title:"Flip Vertical",html:"<i class='fa fa-arrows-v'></i>",callback:function(event){
					
				}}
		};
		
		var documentMouseMoveRef = null;
		var documentMouseUpRef = null;
		var documentTouchMoveRef = null;
		var documentTouchEndRef = null;
		var documentClickRef = null;
		
		var initialize = function()
		{
			util = new NSUtil();
			if(!setting)
			{
				setting = {};
			}
			config = {
				element : setting["element"],
				image: setting["image"] || setting["element"],
				uploadUrl: setting["uploadUrl"],
				uploadUrlCallback: setting["uploadUrlCallback"],
				uploadName: setting["uploadName"],
				//should use this function if src is getting changed dynamically
				validateUploadNameCallback: setting["validateUploadNameCallback"],
				uploadSuccessCallback: setting["uploadSuccessCallback"],
				uploadFailureCallback: setting["uploadFailureCallback"],
				uploadProgressCallback: setting["uploadProgressCallback"],
				resizeShowOnClick: Boolean.parse(setting["resizeShowOnClick"]),
				resizeEnableConstrain: Boolean.parse(setting["resizeEnableConstrain"]),
				resizeShowResizers: setting["resizeShowResizers"],
				resizeMinWidth: setting["resizeMinWidth"] || 100,
				resizeMaxWidth: setting["resizeMaxWidth"] || 800,
				resizeMinHeight: setting["resizeMinHeight"] || 100,
				resizeMaxHeight: setting["resizeMaxHeight"] || 800,
				//if this flag is true then when the image resizes, image width changes else image base64 changes
				resizeMeasurement: Boolean.parse(setting["resizeMeasurement"]),
				showMenu: (util.isUndefinedOrNull(setting["showMenu"]) ? true : Boolean.parse(setting["showMenu"])),
				menus: setting["menus"],// can be object of items with action as key to override default HTML or title or array of string to take default html and title
				zoomMaxWidth: setting["zoomMaxWidth"] || 2000,
				zoomMinWidth: setting["zoomMinWidth"] || 100,
				zoomBy: setting["zoomBy"] || 100,
			};
			container = util.createDiv(null,"nsImageContainer");
			resizeCanvas = util.createElement("canvas");
			createMenu();
			var resizeImage = config.image;
			documentClickRef = function(event){
				if(enableResize && config.resizeShowOnClick)
				{
					hideResizer();
				}
				if(config.showMenu)
	        	{
					hideMenu(event);
					hideResizer();
	        	}
			};
			util.addEvent(resizeImage,"click",function(event){
				event = util.getEvent(event);
				if(config.showMenu)
	        	{
					showMenu(event);
					event.stopPropagation();
	        	}
				else if(enableResize && config.resizeShowOnClick)
				{
					showResizer();
					event.stopPropagation();
				}
			});
    		util.addEvent(document,"click",documentClickRef);
		};
		
		var uploadImage = function()
		{
			enableUpload = true;
			if(enableUpload)
			{
				if(config.element)
				{
					var uploadImageToServer = function(strBase64)
	            	{
	        			strBase64 = strBase64.replace(/^data:image\/(png|jpg|jpeg);base64,/, "");
	                    var param = {imageData:encodeURIComponent(strBase64),fileName:encodeURIComponent(fileName)};
	                    var header = {"Content-Type": "application/x-www-form-urlencoded"};
	                    var setting = {method:"POST",url:url,param:param,header:header,successHandler:function(response){
	                    	config.uploadSuccessCallback && config.uploadSuccessCallback(response,self);
	                    },errorHandler:function(response){
	                    	config.uploadFailureCallback && config.uploadFailureCallback(response,self);
	                    },progressHandler:function(loaded,total){
	                    	config.uploadProgressCallback && config.uploadProgressCallback(loaded,total,self);
	                    }};
	                    var ajax = new util.ajax(setting);
	            	};
					
					var element = config.element;
					if(element["nodeName"] && element["nodeName"].toLowerCase() === "img")
	            	{
						var src = element.getAttribute("src");
						if(src)
						{
							if(src.startsWith("data"))
							{
								uploadImageToServer(src);
								return;
							}
						}
	            	}
					var url = config.uploadUrl;
					var fileName = getFileName();
					if(!url && config.uploadUrlCallback)
					{
						var fileType = getFileType();
						url = config.uploadUrlCallback(fileName,fileType,self);
					}
					getBase64(uploadImageToServer);
				}
			}
		};
		
		var getBase64 = function(callback)
        {
			var element = config.element;
        	if(element)
        	{
        		var callCallback = function(strBase64)
        		{
        			if(callback)
        			{
        				callback(strBase64,self);
        			}
        		};
        		var getImageBase64 = function()
        		{
        			var fileType = getFileType();
        			var path = element.src;
        			var image = document.createElement('img');
                    document.body.appendChild(image);
                    image.setAttribute("style","display:none");
                    image.setAttribute("src", path);
                    var imgCanvas = document.createElement("canvas");
                    var imgContext = imgCanvas.getContext("2d");
                    imgCanvas.width = image.width;
                    imgCanvas.height = image.height;
                    imgContext.drawImage(image, 0, 0, image.width, image.height);
                    var base64String = imgCanvas.toDataURL(fileType);
                    document.body.removeChild(image);
                    callCallback(base64String);
        		};
        		var getFileBase64 = function()
        		{
        			var reader = new FileReader();
            		reader.readAsDataURL(element);
            		if(reader.result)
            		{
            			callCallback(reader.result);
            		}
            		else
            		{
            			reader.onload = function () 
            			{
            				callCallback(reader.result);
                 		};
                 		reader.onerror = function (error) 
                 		{
                 			if(config.uploadFailureCallback)
                 			{
                 				config.uploadFailureCallback(error,self);
                 			}
               		     	//console.log('Error: ', error);
               		    };
            		}
        		};
        		if(element["nodeName"] && element["nodeName"].toLowerCase() === "img")
            	{
        			getImageBase64();
            	}
        		else if(element instanceof File)
            	{
        			getFileBase64();
            	}
        	}
        };
        
        var getThumbnail = function(strBase64, height, width, callback) 
        {
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            var image = new Image();
            image.src = strBase64;
            image.onload = function() 
            {
                ctx.drawImage(image, 0, 0, width, height);
                callback && callback(canvas.toDataURL(),self);
            };
        };
        
        var initailizeCrop = function()
		{
			enableCrop = true;
			if(enableCrop && !cropInitialized)
			{
				cropInitialized = true;
			}
		};
        
        var initializeResize = function()
        {
        	enableResize = true;
        	if(enableResize && !resizeInitialized)
        	{
        		if(!config.resizeShowResizers || config.resizeShowResizers.length === 0)
        		{
        			config.resizeShowResizers = ["NW","NE","SW","SE"];
        		}
        		var resizeImage = config.image;
            	if(resizeImage && resizeImage["nodeName"] && resizeImage["nodeName"].toLowerCase() === "img")
            	{
            		var createResizer = function(postion,classEnd)
            		{
            			objResizer[postion] = util.createElement("span",null,"nsImageResizeHandle nsImageResizeHandle" + classEnd + " nsImageHidden");
            			resizeContainer.appendChild(objResizer[postion]);
                    	util.addEvent(objResizer[postion],"mousedown",startResize);
                    	util.addEvent(objResizer[postion],"touchstart",startResize);
                    	util.addEvent(objResizer[postion],"click",function(event){
                    		event = util.getEvent(event);
                    		event.stopPropagation();
                    	});
            		};
            		var position = util.getStyleValue(resizeImage,"position",true);
            		if (position === "static") 
            		{
            			resizeImage.style.position = "relative";
            		}
            		resizeContainer = util.createDiv(null,"nsImageResizeContainer");
            		container.appendChild(resizeContainer);
            		for(var count = 0;count < config.resizeShowResizers.length;count++)
            		{
            			createResizer(config.resizeShowResizers[count].toLowerCase(),config.resizeShowResizers[count].toUpperCase());
            		}
            		if(!config.resizeShowOnClick && !config.showMenu)
            		{
            			showResizer();
            		}
            	}
            	resizeInitialized = true;
        	}
        };
        
        var initializeMove = function()
        {
        	enableMove = true;
        	if(enableMove && !moveInitialized)
        	{
        		var moveImage = config.image;
            	if(moveImage && moveImage["nodeName"] && moveImage["nodeName"].toLowerCase() === "img")
            	{
            		if(!config.showMenu)
            		{
            			showMove();
            		}
            	}
            	moveInitialized = true;
        	}
        };
        
        var zoomIn = function()
        {
        	var image = config.image;
        	var imageWidth = image.clientWidth;
        	if (imageWidth < config.zoomMaxWidth)
        	{
        		imageWidth += config.zoomBy;
        		setImageMeasurement(imageWidth,image.clientHeight,image);
        	}
        };
        
        var zoomOut = function()
        {
        	var image = config.image;
        	var imageWidth = image.clientWidth;
        	if (imageWidth > config.zoomMinWidth)
        	{
        		imageWidth -= config.zoomBy;
        		setImageMeasurement(imageWidth,image.clientHeight,image);
        	}
        };
        
        var destroy = function()
        {
        	hideResizer();
        	if(documentClickRef)
        	{
        		util.removeEvent(document,"click",documentClickRef);
            	documentClickRef = null;
        	}
        };
        
        var createMenu = function()
        {
        	if(config.showMenu)
        	{
        		menuContainer = util.createDiv(null,"nsImageToolbar nsImageHidden");
        		var createComponent = function(item)
        		{
        			if(item)
        			{
        				var button = util.createElement("button",null,"nsImageToolbarButton");
        				button.setAttribute("data-nsAction",item.action);
        				button.setAttribute("title",item.title);
        				button.innerHTML = item.html;
        				util.addEvent(button,"click",function(event){
        					menuClickHandler(item,event);
        				});
        				menuContainer.appendChild(button);
        			}
        		};
        		var menus = config.menus;
        		if(!menus || (util.isArray(menus) && menus.length > 0))
        		{
        			menus = menuDefault;
        		}
        		if(util.isArray(config.menus))
        		{
        			for(var count = 0;count < config.menus.length; count++)
        			{
        				var item = menuDefault[config.menus[count].toLowerCase()];
        				createComponent(item);
        			}
        		}
        		else
        		{
        			for(var menuKey in menus)
        			{
        				var item = menuDefault[menuKey.toLowerCase()];
        				if(item)
        				{
        					if(menus[menuKey].hasOwnProperty("title"))
        					{
        						item.title = menus[menuKey].title;
        					}
        					if(menus[menuKey].hasOwnProperty("html"))
        					{
        						item.html = menus[menuKey].html;
        					}
        					createComponent(item);
        				}
        			}
        		}
        		document.body.appendChild(menuContainer);
        	}
        };
        
        var menuClickHandler = function(item,event)
        {
        	event = util.getEvent(event);
        	event.stopPropagation();
        	if(item && item["callback"])
        	{
        		item["callback"](event);
        	}
        };
        
        var showResizer = function()
        {
        	if(enableResize)
        	{
	        	util.addStyleClass(container,"nsImageResizeEnabled");
	    		var resizeImage = config.image;
	    		addImageToContainer();
	    		for(var pos in objResizer)
	    		{
	    			if(objResizer[pos])
	    			{
	    				util.removeStyleClass(objResizer[pos],"nsImageHidden");
	    			}
	    		}
        	}
        };
        
        var hideResizer = function()
        {
        	if(enableResize)
        	{
	        	util.removeStyleClass(container,"nsImageResizeEnabled");
	        	removeImageFromContainer();
	        	for(var pos in objResizer)
	    		{
	    			if(objResizer[pos])
	    			{
	    				util.addStyleClass(objResizer[pos],"nsImageHidden");
	    			}
	    		}
        	}
        };
        
        var showMove = function()
        {
        	if(enableMove)
        	{
        		var moveImage = config.image;
	        	if(container && container.parentNode)
	    		{
	        		moveContainer = container;
	    		}
	        	else
	        	{
	        		moveContainer = moveImage;
	        	}
	        	util.addStyleClass(moveContainer,"nsImageMoveContainer");
	        	util.addEvent(moveImage,"mousedown",startMoving);
	    		util.addEvent(moveImage,"touchstart",startMoving);
        	}
        };
        
        var hideMove = function()
        {
        	if(enableMove)
        	{
        		if(moveContainer)
            	{
            		var moveImage = config.image;
                	util.removeStyleClass(moveContainer,"nsImageMoveContainer");
                	util.removeEvent(moveImage,"mousedown",startMoving);
            		util.removeEvent(moveImage,"touchstart",startMoving);
            		moveContainer = null;
            	}
        	}
        };
        
        var showMenu = function(event)
        {
        	if(config.showMenu)
        	{
        		util.removeStyleClass(menuContainer,"nsImageHidden");
            	var moveImage = config.image;
            	var rect = moveImage.getBoundingClientRect();
            	var menuRect = menuContainer.getBoundingClientRect();
            	var position = util.getEventPosition(event);
            	var top = rect.top + rect.height;
            	var left = rect.left + (rect.width / 2) - (menuRect.width / 2);
            	menuContainer.style.left = left + "px";
            	menuContainer.style.top = top + "px";
        	}
        };
        
        var hideMenu = function(event)
        {
        	if(config.showMenu)
        	{
        		util.addStyleClass(menuContainer,"nsImageHidden");
        	}
        };
        
        var addImageToContainer = function()
        {
        	var resizeImage = config.image;
        	var imageParentContainer = resizeContainer;
        	if(!imageParentContainer)
        	{
        		imageParentContainer = container;
        	}
        	if(!util.isChildInParent(container,resizeImage))
        	{
        		resizeClonedImage = new Image();
            	resizeClonedImage.src = resizeImage.src;
            	resizeImage.parentNode.insertBefore(container,resizeImage);
            	resizeImage.parentNode.removeChild(resizeImage);
            	imageParentContainer.appendChild(resizeImage);
            	container.style.left = resizeImage.style.left;
            	container.style.top = resizeImage.style.top;
            	resizeImage.style.left = null;
            	resizeImage.style.top = null;
        	}
        };
        
        var removeImageFromContainer = function()
        {
        	var resizeImage = config.image;
        	var imageParentContainer = resizeContainer;
        	if(!imageParentContainer)
        	{
        		imageParentContainer = container;
        	}
        	if(container && container.parentNode && util.isChildInParent(container,resizeImage))
        	{
        		var resizeImage = config.image;
            	container.parentNode.insertBefore(resizeImage,container);
            	container.parentNode.removeChild(container);
            	resizeImage.style.left = container.style.left;
            	resizeImage.style.top = container.style.top;
        	}
        };
        
        var startMoving = function(event)
        {
        	event = util.getEvent(event);
        	resizeTarget = util.getTarget(event);
        	event.preventDefault();
        	event.stopPropagation();
        	hideMenu(event);
		    saveState(event,moveContainer);
		    addDocumentHandler(moving,endMoving);
		};
		
		var endMoving = function(event)
		{
			resizeTarget = null;
			objState = {};
			showMenu(event);
			event.preventDefault();
			removeDocumentHandler();
		};
		
		var moving = function(event)
		{
			var mousePos = {};
			event.preventDefault();
			event.stopPropagation();
			var touches = event.touches;
			var windowTop  = window.pageYOffset || document.documentElement.scrollTop;
		    var windowLeft = window.pageXOffset || document.documentElement.scrollLeft; 
		    mousePos.x = (event.clientX || event.pageX || touches[0].clientX) + windowLeft; 
		    mousePos.y = (event.clientY || event.pageY || touches[0].clientY) + windowTop;
		    var offset = {
		    	'left': mousePos.x - (objState.mouse_x - objState.container_left),
			    'top': mousePos.y - (objState.mouse_y - objState.container_top) 
		    };
		    util.setOffSet(moveContainer,offset);
		    //handling pinch zoom gesture while moving
		    if(objState.touches && objState.touches.length > 1 && touches.length > 1)
		    {
		    	 var width = objState.container_width;
		    	 var height = objState.container_height;
			     var clientX = objState.touches[0].clientX - objState.touches[1].clientX;
			     clientX = clientX * clientX; 
			     var clientY = objState.touches[0].clientY - objState.touches[1].clientY;
			     clientY = clientY * clientY; 
			     var dist1 = Math.sqrt(clientX + clientY);
			      
			     clientX = event.touches[0].clientX - touches[1].clientX;
			     clientX = clientX * clientX; 
			     clientY = event.touches[0].clientY - touches[1].clientY;
			     clientY = clientY * clientY;
			     var dist2 = Math.sqrt(clientX + clientY);

			     var ratio = dist2 /dist1;

			     width = width * ratio;
			     height = height * ratio;
			     // To improve performance you might limit how often setImageMeasurement() is called
			     setImageMeasurement(width, height,resizeClonedImage);
		    }
		};
        
        var startResize = function(event)
        {
        	event = util.getEvent(event);
        	resizeTarget = util.getTarget(event);
        	event.preventDefault();
        	event.stopPropagation();
        	hideMenu(event);
        	saveState(event,container);
        	addDocumentHandler(resizing,endResize);
		};
		
		var endResize = function(event)
		{
			resizeTarget = null;
			objState = {};
			showMenu(event);
			event.preventDefault();
			removeDocumentHandler();
		};
		
		var resizing = function(event)
		{
			if(resizeTarget)
			{
				var mousePos = {};
				var width,height,left,top;
				var windowTop  = window.pageYOffset || document.documentElement.scrollTop;
			    var windowLeft = window.pageXOffset || document.documentElement.scrollLeft; 
			    mousePos.x = (event.clientX || event.pageX || event.touches[0].clientX) + windowLeft; 
			    mousePos.y = (event.clientY || event.pageY || event.touches[0].clientY) + windowTop;
			    if(resizeTarget == objResizer.se)
			    {
			    	width = mousePos.x - objState.container_left;
				    height = mousePos.y  - objState.container_top;
				    left = objState.container_left;
				    top = objState.container_top;
			    }
			    else if(resizeTarget == objResizer.sw)
			    {
			    	width = objState.container_width - (mousePos.x - objState.container_left);
				    height = mousePos.y - objState.container_top;
				    left = mousePos.x;
				    top = objState.container_top;
			    }
			    else if(resizeTarget == objResizer.nw)
			    {
			    	width = objState.container_width - (mousePos.x - objState.container_left);
				    height = objState.container_height - (mousePos.y - objState.container_top);
				    left = mousePos.x;
				    top = mousePos.y;
				    if(config.resizeEnableConstrain || event.shiftKey)
				    {
				        top = mousePos.y - ((width / resizeClonedImage.width * resizeClonedImage.height) - height);
				    }
			    }
			    else if(resizeTarget == objResizer.ne)
			    {
			    	width = mousePos.x - objState.container_left;
				    height = objState.container_height - (mousePos.y - objState.container_top);
				    left = objState.container_left;
				    top = mousePos.y;
				    if(config.resizeEnableConstrain || event.shiftKey)
				    {
				        top = mousePos.y - ((width / resizeClonedImage.width * resizeClonedImage.height) - height);
				    }
			    }
			    // Optionally maintain aspect ratio
			    if(config.resizeEnableConstrain || event.shiftKey)
			    {
			    	height = width / resizeClonedImage.width * resizeClonedImage.height;
			    }
			    if(width > config.resizeMinWidth && height > config.resizeMinHeight && width < config.resizeMaxWidth && height < config.resizeMaxHeight)
			    {
			    	setImageMeasurement(width, height,resizeClonedImage); 
			    	util.setOffSet(container,{left:left,top:top});
			    }
			}
		};
		
		var setImageMeasurement = function(width, height,clonedImage)
		{
			var resizeImage = config.image;
			if(config.resizeMeasurement)
			{
				resizeImage.style.width = width + "px";
			}
			else
			{
				var fileTye = getFileType();
				resizeCanvas.width = width;
				resizeCanvas.height = height;
				resizeCanvas.getContext("2d").drawImage(clonedImage, 0, 0, width, height);   
				resizeImage.setAttribute("src",resizeCanvas.toDataURL(fileTye));
			}
		};
		
		var saveState = function(event,tempContainer)
		{
			var objContainer = tempContainer.getBoundingClientRect();
			objState.container_width = objContainer.width;
		    objState.container_height = objContainer.height;
		    objState.container_left = objContainer.left; 
		    objState.container_top = objContainer.top;
		    var windowTop  = window.pageYOffset || document.documentElement.scrollTop;
		    var windowLeft = window.pageXOffset || document.documentElement.scrollLeft; 
		    objState.mouse_x = (event.clientX || event.pageX || event.touches[0].clientX) + windowLeft; 
		    objState.mouse_y = (event.clientY || event.pageY || event.touches[0].clientY) + windowTop;
			
			// This is a fix for mobile safari
			// For some reason it does not allow a direct copy of the touches property
			if(typeof event.touches !== 'undefined')
			{
				objState.touches = [];
				for(var count = 0;count < event.touches;count++)
				{
					var touch = event.touches[count];
					objState.touches[count] = {};
					objState.touches[count].clientX = 0 + touch.clientX;
					objState.touches[count].clientY = 0 + touch.clientY;
				}
			}
		    objState.evnt = event;
		};
		
		var addDocumentHandler = function(moveHandler,endHandler)
		{
			if(!documentMouseMoveRef)
			{
				documentMouseMoveRef = moveHandler;
				util.addEvent(document.documentElement,"mousemove",documentMouseMoveRef);
				
			}
			if(!documentMouseUpRef)
			{
				documentMouseUpRef = endHandler;
				util.addEvent(document.documentElement,"mouseup",documentMouseUpRef);
			}
			if(!documentTouchMoveRef)
			{
				documentTouchMoveRef = moveHandler;
				util.addEvent(document.documentElement,"touchmove",documentTouchMoveRef);
				
			}
			if(!documentTouchEndRef)
			{
				documentTouchEndRef = endHandler;
				util.addEvent(document.documentElement,"touchend",documentTouchEndRef);
				
			}
		};
		
		var removeDocumentHandler = function()
		{
			if(documentMouseMoveRef)
			{
				util.removeEvent(document.documentElement,"mousemove",documentMouseMoveRef);
				documentMouseMoveRef = null;
			}
			if(documentMouseUpRef)
			{
				util.removeEvent(document.documentElement,"mouseup",documentMouseUpRef);
				documentMouseUpRef = null;
			}
			if(documentTouchMoveRef)
			{
				util.removeEvent(document.documentElement,"touchmove",documentTouchMoveRef);
				documentTouchMoveRef = null;
			}
			if(documentTouchEndRef)
			{
				util.removeEvent(document.documentElement,"touchend",documentTouchEndRef);
				documentTouchEndRef = null;
			}
		};
        
        var getFileName = function()
        {
        	var element = config.element;
			var fileName = config.uploadName;
			if(!fileName)
			{
				if(element["nodeName"] && element["nodeName"].toLowerCase() === "img")
	        	{
					var src = element.getAttribute("src");
					if(src)
					{
						var arrFile = src.split("/");
						fileName = arrFile[arrFile.length - 1];
					}
	        	}
				else if(element instanceof File)
	        	{
					fileName = element.name;
					fileType = element.type;
	        	}
				if(config.validateUploadNameCallback)
				{
					fileName = config.validateUploadNameCallback(fileName,self);
				}
			}
			if(!fileName)
			{
				util.throwNSError("NSImageProcessor","Image Name is not accessible.Set the property uploadName in setting.");
			}
			config.uploadName = fileName;
			return fileName;
        };
        
        var getFileType = function()
        {
        	var element = config.element;
        	var fileType = null;
			if(element["nodeName"] && element["nodeName"].toLowerCase() === "img")
        	{
				var src = element.getAttribute("src");
				if(src)
				{
					var fileName = getFileName();
					var arrName = fileName.split(".");
					fileType = "image/" + arrName[1];
				}
        	}
			else if(element instanceof File)
        	{
				fileType = element.type;
        	}
			return fileType;
        };
        
        self.uploadImage = uploadImage;
        self.getBase64 = getBase64;
        self.getThumbnail = getThumbnail;
        self.initializeResize = initializeResize;
        self.initializeMove = initializeMove;
        self.destroy = destroy;
		
		initialize();
	};
	return NSImageProcessor;
})();
(function(root,name,prototype)
{
    if (typeof define === "function" && define.amd)
    {
    	define(name, function () {return prototype;});
    }
    else if (typeof module !== 'undefined' && module.exports)
    {
    	module.exports = prototype;
    }
    else
    {
    	root[name] = prototype;
    }
})(this,"NSImageProcessor",NSImageProcessor);
