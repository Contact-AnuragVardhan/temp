import * as React from "react";
import { HashRouter } from 'react-router-dom';
import { Route } from 'react-router'
import {useGlobalContext} from '../GlobalContext'

import {  withRouter} from 'react-router-dom';

import { ManageReports } from "../../modules/reportMain/ManageReports";
import { ManageGroups } from "../../modules/reportMain/ManageGroups";
import { ManageDatasources } from "../../modules/reportMain/ManageDatasources";
import { ManageDataConnections } from "../../modules/reportMain/ManageDataConnections";



import { Redirect } from "react-router-dom";


import { NSNavigationReact, INSNavigationReactSettings } from '../../lib/nsNavigation/nsNavigationReact';

import { NSGridReact, INSGridReactSettings } from '../../lib/nsGrid/nsGridReact';

export class Authenticate extends React.Component<any, any>
{
    static contextType = useGlobalContext();
    private nsNavigationReact: NSNavigationReact;
    selectedMenu:boolean=false ; 
    
    constructor(public props: any, public state: any) 
    {
        super(props,state);
        let routes = [];
      
        
        const navSetting: INSNavigationReactSettings = {header:"NAVIGATION",showCollapseIcon:false,iconCollapse:"<i class='fa fa-bars pull-right'></i>",                   titleField:"menuName",childField:"childMenus",iconPosition:"right",iconMenuExpanded:"<i class='fa fa-angle-left'></i>",                   iconMenuCollapsed:"<i class='fa fa-angle-left'></i>",collapseTopOffset:-40};
        
        var dataSource = [];
      
        
        console.log(this.context.userObj.userRole + "before access" + (this.context.userObj.userRole=='Employee')) ;
     
        if(this.context.userObj.userRole=='Support')
            {
            dataSource = [{menuName:"Report Menus",link:"#",iconBeforeHtml:"<i class='fa fa-file-o'></i>",iconAfterHtml:null,click:"scrollToSection(this)",expanded:true,              childMenus:[{menuName:"Manage Reports",link:"#ManageReports",iconBeforeHtml:"<i class='fa fa-list-alt'></i>",iconAfterHtml:null,click:"scrollToSection(this)", selected:true},        
                                                                                                                                                                                                   {menuName:"Manage Groups",link:"#ManageGroups",iconBeforeHtml:"<i class='fa fa-users'></i>",iconAfterHtml:null,click:"scrollToSection(this)"},                          
                                                                                                                                                                                                   {menuName:"Manage Datasources",link:"#ManageDatasources",iconBeforeHtml:"<i class='fa fa-random'></i>",iconAfterHtml:null,click:"scrollToSection(this)"}
        ,        {menuName:"Manage Data Connections",link:"#ManageDataConnections",iconBeforeHtml:"<i class='fa fa-table'></i>",iconAfterHtml:null,click:"scrollToSection(this)"}                                                                        ]}];
            
            routes = [{ path: '/ManageReports',component: ManageReports},
                      { path: '/ManageGroups',component: ManageGroups},
                      { path: '/ManageDatasources',component: ManageDatasources},     
                      { path: '/ManageDataConnections',component: ManageDataConnections}];
            this.selectedMenu = dataSource[0].childMenus[0] ; 
           
        
            } 
        else  if(this.context.userObj.userRole && this.context.userObj.userRole!='Employee')
            {
            dataSource  = [{menuName:"Report Menus",link:"#",iconBeforeHtml:"<i class='fa fa-file-o'></i>",iconAfterHtml:null,click:"scrollToSection(this)",expanded:true,              childMenus:[{menuName:"Manage Reports",link:"#ManageReports",iconBeforeHtml:"<i class='fa fa-list-alt'></i>",iconAfterHtml:null,click:"scrollToSection(this)"} ]}];
           
            routes = [{ path: '/ManageReports',component: ManageReports}];
            this.selectedMenu = dataSource[0].childMenus[0] ; 
            }
        
        navSetting.dataSource = dataSource ;
        this.state =   {routes: routes, navSetting:navSetting } ; 
        
        //this.props.history.push('/ManageReports');
      
      
    }
    
    componentDidMount() 
    {
    }
    
    render() 
    {
  
        const routes = this.state.routes;
        const navSetting =  this.state.navSetting;
        const routeComponents = routes.map(({path, component}, key) => <Route exact path={path} component={component} key={key} />);
        console.log("route details ") ;
        console.log(routeComponents) ; 
     
            return (
                     
                <React.Fragment>
                    <div style={{width:"100%", height:"100%"}}>
                    
                   <div style={{width:"264px"}}>
                    <NSNavigationReact setting={navSetting} ref={(ref) => this.nsNavigationReact = ref}>
                    </NSNavigationReact>
                    </div> 
                    <div style={{marginLeft:"264px"}}>
                    <HashRouter  >
                       {routeComponents}
                       <Redirect push to="/ManageReports" />
                   </HashRouter>
                       </div>
                      
                       </div>
                     
                       from: string
                </React.Fragment>
            )
        
       
    }
    

   
   
}
export default withRouter(Authenticate);

