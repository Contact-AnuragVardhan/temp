var NSCalendar = (function()
{
	function NSCalendar(component,setting) 
	{
		this.__setting = setting;
		
		this.__context = window;
		this.__inputFormat = "mm/dd/yyyy";
		this.__minDate = null;
		this.__maxDate = null;
		this.__selectedDate = null;
		this.__buttonSetting = {prev:{html:null,cssClass:null},next:{html:null,cssClass:null}};
		this.__customClass = {container:null,headerContainer:null,prevButton:null,nextButton:null,monthDropdown:null,yearDropdown:null,weekContainer:null,week:null,dayContainer:null,day:null,footerContainer:null};
		this.__monthValueName = null;
		this.__monthTextName = null;
		this.__weekName = null;
		this.__markDayDisabled = null;
		
		this.__divContainer = null;
		this.__divHeaderContainer = null;
		this.__cmbMonth = null;
		this.__cmbYear = null;
		this.__divWeekContainer = null;
		this.__divDayContainer = null;
		this.__divDayBody = null;
		this.__divFooterContainer = null;
		this.__arrYear = [];
		this.__lastSelectedCell = null;
		this.__arrDayCells = []; 
		
		this.__dayClickHandlerRef = null;
		
		this.base.__setBaseComponent.call(this,component);
	};
	nsExtendPrototype(NSContainerBase,NSCalendar);
	NSCalendar.prototype.constructor = NSCalendar;
	
	NSCalendar.prototype.initializeComponent = function() 
	{
		this.base.initializeComponent.call(this);
		this.__setSetting();
		this.__initDefault();
		this.__createComponent();
	};
	
	NSCalendar.prototype.setComponentProperties = function() 
	{
		this.base.setComponentProperties.call(this);
	};
	
	NSCalendar.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
	{
		var attributeName = attrName.toLowerCase();
		this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
	};
	
	NSCalendar.prototype.removeComponent = function() 
	{
		this.base.removeComponent.call(this);
	};
	
	NSCalendar.prototype.componentResized = function(event) 
	{
		this.base.componentResized.call(this,event);
	};
	
	NSCalendar.prototype.getSelectedDate = function() 
	{
		return this.__selectedDate;
	};
	
	NSCalendar.prototype.getSelectedDateAsString = function(format) 
	{
		if(this.__selectedDate)
		{
			var nsDateUtil = new NSDateUtil();
			return nsDateUtil.format(this.__selectedDate,format);
		}
		return null;
	};
	
	NSCalendar.prototype.setSelectedDate = function(date,format) 
	{
		this.__selectedDate = this.__formatInputDate(date,format);
		this.__updateDays(this.__selectedDate);
	};
	
	NSCalendar.prototype.setYear = function(year) 
	{
		this.__cmbYear.selectedIndex = this.__cmbYear.querySelector('option[value="'+ year +'"]').index;
		this.__dropDownChangeHandler();
		this.__cmbMonth.selectedIndex = monthDate.getMonth();
	};
	
	NSCalendar.prototype.setMonth = function(month) 
	{
		this.__cmbMonth.selectedIndex = month;
		this.__dropDownChangeHandler();
	};
	
	NSCalendar.prototype.__initDefault = function()
	{
		if(!this.__minDate)
		{
			this.__minDate = new Date();
			this.__minDate = this.__getDateObject(this.__minDate.getFullYear() - 15,0,1);
		}
		if(!this.__maxDate)
		{
			this.__maxDate = new Date();
			this.__maxDate = this.__getDateObject(this.__maxDate.getFullYear() + 15,0,1);
		}
		if(!this.__monthValueName || this.__monthValueName.length === 0)
		{
			this.__monthValueName = ["January","Febuary","March","April","May","June","July","August","September","October","November","December"];
		}
		if(!this.__monthTextName || this.__monthTextName.length === 0)
		{
			this.__monthTextName = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
		}
		if(!this.__weekName || this.__weekName.length === 0)
		{
			this.__weekName = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
		}
	};
	
	NSCalendar.prototype.__setSetting = function()
	{
		if(!this.__setting)
		{
			this.__setting = {};
		}
		var setting = this.__setting;
		if(setting)
		{
			if(setting.hasOwnProperty("context"))
			{
				this.__context = setting["context"];
			}
			if(setting.hasOwnProperty("inputFormat"))
			{
				this.__inputFormat = setting["inputFormat"];
			}
			if(setting.hasOwnProperty("minDate"))
			{
				this.__minDate = this.__formatInputDate(setting["minDate"]);
			}
			if(setting.hasOwnProperty("maxDate"))
			{
				this.__maxDate = this.__formatInputDate(setting["maxDate"]);
			}
			if(setting.hasOwnProperty("selectedDate"))
			{
				this.__selectedDate = this.__formatInputDate(setting["selectedDate"]);
			}
			if(setting.hasOwnProperty("monthValueName"))
			{
				this.__monthValueName = setting["monthValueName"];
			}
			if(setting.hasOwnProperty("monthTextName"))
			{
				this.__monthTextName = setting["monthTextName"];
			}
			if(setting.hasOwnProperty("weekName"))
			{
				this.__weekName = setting["weekName"];
			}
			if(setting.hasOwnProperty("markDayDisabled"))
			{
				this.__markDayDisabled =  setting["markDayDisabled"];
				this.__markDayDisabled = this.util.getFunction(this.__markDayDisabled,this.__context);
			}
			if(setting.hasOwnProperty("theme"))
			{
				this.__theme = setting["theme"];
			}
			var buttonSetting = {};
			if(setting.hasOwnProperty("buttonSetting"))
			{
				buttonSetting = setting["buttonSetting"];
			}
			if(!buttonSetting)
			{
				buttonSetting = {};
			}
			if(!buttonSetting.prev)
			{
				buttonSetting.prev = {html:null,cssClass:null};
			}
			if(!buttonSetting.prev.html)
			{
				buttonSetting.prev.html = "<svg height=\"24\" version=\"1.1\" viewbox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\" class=\"nsCalendarHeaderButtonSvg\">\r\n" + 
											"<path d=\"M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z\"></path>\r\n" + 
										  "</svg>";
			}
			if(!buttonSetting.next)
			{
				buttonSetting.next = {html:null,cssClass:null};
			}
			if(!buttonSetting.next.html)
			{
				buttonSetting.next.html = "<svg height=\"24\" version=\"1.1\" viewbox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\" class=\"nsCalendarHeaderButtonSvg\">\r\n" + 
											"<path d=\"M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z\"></path>\r\n" + 
										  "</svg>";
			}
			this.__buttonSetting = {prev:{html:buttonSetting.prev.html,cssClass:buttonSetting.prev.cssClass},
								  	next:{html:buttonSetting.next.html,cssClass:buttonSetting.next.cssClass}};
			
			var customClass = {};
			if(setting.hasOwnProperty("customClass"))
			{
				customClass = setting["customClass"];
			}
			if(!customClass)
			{
				customClass = {};
			}
			for(var prop in this.__customClass)
			{
				this.__customClass[prop] = (customClass[prop] || null);
			}
		}
	};
	
	NSCalendar.prototype.__createComponent = function()
	{
		this.util.addStyleClass(this.__baseComponent,"nsCalendar");
		this.__applyTheme(this.__baseComponent,"nsCalendar");
		this.__divContainer = this.util.createDiv(this.getID() + "container","nsCalendarContainer");
		this.__applyCustomClass(this.__divContainer,"container");
		
		this.__createHeader();
		this.__divContainer.appendChild(this.__divHeaderContainer);
		this.__createWeek();
		this.__divContainer.appendChild(this.__divWeekContainer);
		this.__createDays();
		this.__divContainer.appendChild(this.__divDayContainer);
		this.__baseComponent.appendChild(this.__divContainer);
		this.__updateDays(new Date());
	};
	
	NSCalendar.prototype.__createHeader = function()
	{
		if(!this.__divHeaderContainer)
		{
			var self = this;
			var initButton = function(strID,cssClass,buttonSettingKey,customClassKey,handler)
			{
				var btn = self.util.createElement("button",self.getID() + "btn" + strID,cssClass);
				btn.innerHTML = self.__buttonSetting[buttonSettingKey].html;
				self.util.addStyleClass(btn,self.__buttonSetting[buttonSettingKey].cssClass);
				self.__applyCustomClass(btn,customClassKey);
				self.util.addEvent(btn,"click",handler);
				self.__divHeaderContainer.appendChild(btn);
			};
			var createSelect = function(parent,id,cssClass,customClassKey,arrText,arrValue)
			{
				var select = self.util.createElement("select",self.getID() + "select" + id,cssClass);
				self.__applyCustomClass(select,customClassKey);
				self.util.addEvent(select,"change",self.__dropDownChangeHandler.bind(self));
				for (var count = 0; count < arrValue.length; count++) 
				{
				    var option = document.createElement("option");
				    option.text = arrText[count];
				    option.value = arrValue[count];
				    select.appendChild(option);
				}
				parent.appendChild(select);
				return select;
			};
			this.__divHeaderContainer = this.util.createDiv(this.getID() + "header","nsCalendarHeader");
			this.__applyCustomClass(this.__divHeaderContainer,"headerContainer");
			initButton("previous","nsCalendarButton","prev","prevButton",this.__prevClickHandler.bind(this));
			var divNavigation = this.util.createDiv(this.getID() + "headerNavigation","nsCalendarHeaderNav");
			if(this.__monthValueName.length !== this.__monthTextName.length)
			{
				this.__monthValueName = this.__monthTextName;
			}
			this.__cmbMonth = createSelect(divNavigation,"month","nsCalendarSelect","monthDropdown",this.__monthTextName,this.__monthValueName);
			var minYear = this.__minDate.getFullYear();
			var maxYear = this.__maxDate.getFullYear();
			this.__arrYear = [];
			for(var count = minYear;count <= maxYear;count++)
			{
				this.__arrYear.push(count);
			}
			this.__cmbYear = createSelect(divNavigation,"year","nsCalendarSelect","yearDropdown",this.__arrYear,this.__arrYear);
			this.__divHeaderContainer.appendChild(divNavigation);
			initButton("next","nsCalendarButton","next","nextButton",this.__nextClickHandler.bind(this));
		}
	};
	
	NSCalendar.prototype.__createWeek = function()
	{
		if(!this.__divWeekContainer)
		{
			this.__divWeekContainer = this.util.createDiv(this.getID() + "week","nsCalendarWeekContainer");
			this.__applyCustomClass(this.__divWeekContainer,"weekContainer");
			for(var count = 0;count < this.__weekName.length;count++)
			{
				var divWeek = this.util.createDiv(null,"nsCalendarWeek");
				this.__applyCustomClass(divWeek,"week");
				divWeek.appendChild(document.createTextNode(this.__weekName[count]));
				this.__divWeekContainer.appendChild(divWeek);
			}
		}
	};
	
	NSCalendar.prototype.__createDays = function()
	{
		if(!this.__divDayContainer)
		{
			this.__divDayContainer = this.util.createDiv(this.getID() + "day","nsCalendarDayContainer");
			this.__applyCustomClass(this.__divDayContainer,"dayContainer");
			this.__divDayBody = this.util.createDiv(this.getID() + "dayBody","nsCalendarDayContainerBody");
			var handler = this.__dayClickHandler.bind(this);
			for (var rowCount = 0;rowCount < 6;rowCount++) 
			{ 
			    var row = this.__createDayRow(this.__divDayBody);
			    for (var count = 0;count < 7;count++) 
			    { 
			    	var cell = this.__createDayCell(row,handler);
			    	var item = {row:row,cell:cell};
			    	this.__arrDayCells.push(item);
			    }			    
			}
			this.__divDayContainer.appendChild(this.__divDayBody);
		}
	};
	
	NSCalendar.prototype.__createDayRow = function(parent)
	{
		var divDayRow = this.util.createDiv(null,"nsCalendarDayContainerRow");
		parent.appendChild(divDayRow);
		return divDayRow;
	};
	
	NSCalendar.prototype.__createDayCell = function(parent,handler)
	{
		var divDay = this.util.createDiv(null,"nsCalendarDayContainerCell");
		this.util.addEvent(divDay,"click",handler);
		parent.appendChild(divDay);
		return divDay;
	};
	
	NSCalendar.prototype.__updateDays = function(monthDate)
	{
		if(this.__isDateValidForNavigation(monthDate))
		{
			this.__cmbYear.selectedIndex = this.__cmbYear.querySelector('option[value="'+ monthDate.getFullYear() +'"]').index;
			this.__cmbMonth.selectedIndex = monthDate.getMonth();
			var today = new Date();
			date = new Date(monthDate.getFullYear(),monthDate.getMonth(),1,0,0,0,0); // Starting at the 1st of the month
			var extras = (date.getDay() + 6) % 7; // How many days of the last month do we need to include?
			date.setDate(date.getDate() - extras);
			var item = null;
			for(var count = 0;count < this.__arrDayCells.length;count++)
			{
				item = this.__arrDayCells[count];
				this.__updateDayCell(item.cell,date,monthDate,today,count);
				item.date = this.__getDateObject(date.getFullYear(),date.getMonth(),date.getDate());
				item.index = count;
			    date.setDate(date.getDate() + 1); 
			}
		}
	};
	
	NSCalendar.prototype.__resetDayCell = function(cell)
	{
		if(cell)
		{
			cell.setAttribute("class","");
			this.util.addStyleClass(cell,"nsCalendarDayContainerCell");
			this.__applyCustomClass(cell,"day");
			cell.innerHTML = "";
		}
	};
	
	NSCalendar.prototype.__updateDayCell = function(cell,dateToSet,currentMonthDate,todayDate,index)
	{
		if(cell)
		{
			this.__resetDayCell(cell);
			cell.appendChild(document.createTextNode(dateToSet.getDate()));
			cell.setAttribute("data-ns-cal-index",index);
			if(this.__isDateSelectable(dateToSet))
			{
				if (dateToSet.getMonth() != currentMonthDate.getMonth()) 
			    {
			    	this.util.addStyleClass(cell,"nsCalendarOtherMonth");
			    }
				if (dateToSet.getDate() == todayDate.getDate() && dateToSet.getMonth() == todayDate.getMonth() && dateToSet.getFullYear() == todayDate.getFullYear()) 
			    {
			    	this.util.addStyleClass(cell,"nsCalendarToday");
			    }
				if (this.__selectedDate && dateToSet.getDate() == this.__selectedDate.getDate() && dateToSet.getMonth() == this.__selectedDate.getMonth() && dateToSet.getFullYear() == this.__selectedDate.getFullYear()) 
			    {
			    	this.util.addStyleClass(cell,"nsCalendarSelected");
			    }
			}
			else
			{
				this.util.addStyleClass(cell,"nsCalendarDayDisabled");
			}
		}
	};
	
	NSCalendar.prototype.__prevClickHandler = function(event)
	{
		var month = this.__cmbMonth.selectedIndex; 
		var year = this.__cmbYear.options[this.__cmbYear.selectedIndex].value;
		var date = this.__getDateObject(year,month,1);
		date.setMonth(date.getMonth() - 1);
		console.log(date);
		this.__updateDays(date);
	};
	
	NSCalendar.prototype.__nextClickHandler = function(event)
	{
		var month = this.__cmbMonth.selectedIndex; 
		var year = this.__cmbYear.options[this.__cmbYear.selectedIndex].value;
		var date = this.__getDateObject(year,month,1);
		date.setMonth(date.getMonth() + 1);
		console.log(date);
		this.__updateDays(date);
	};
	
	NSCalendar.prototype.__dayClickHandler = function(event)
	{
		var target = this.util.getTarget(event);
		if(!this.util.hasStyleClass(target,"nsCalendarDayContainerCell"))
		{
			target = this.util.findParentBySelector(target,".nsCalendarDayContainerCell");
		}
		if(target)
		{
			if(this.__lastSelectedCell)
			{
				this.util.removeStyleClass(this.__lastSelectedCell,"nsCalendarSelected");
			}
			var index = parseInt(target.getAttribute("data-ns-cal-index"));
			if(this.util.hasStyleClass(target,"nsCalendarOtherMonth"))
			{
				this.__lastSelectedCell = null;
				var item = this.__getItemByIndex(index);
				if(item && this.__isDateSelectable(item.date))
				{
					this.__selectedDate = item.date;
					this.__updateDays(this.__selectedDate);
					this.util.dispatchEvent(this.__baseComponent,NSCalendar.DATE_SELECTED,this.__selectedDate,{date:this.__selectedDate});
				}
			}
			else
			{
				this.__selectCellForIndex(index);
			}
		}
	};
	
	NSCalendar.prototype.__dropDownChangeHandler = function(event)
	{
		var month = this.__cmbMonth.selectedIndex; 
		var year = this.__cmbYear.options[this.__cmbYear.selectedIndex].value;
		var date = this.__getDateObject(year,month,1);
		this.__updateDays(date);
	};
	
	NSCalendar.prototype.__selectCellForIndex = function(index)
	{
		this.__selectedDate = null;
		var item = this.__getItemByIndex(index);
		if(item && this.__isDateSelectable(item.date))
		{
			this.__selectedDate = item.date;
			this.util.dispatchEvent(this.__baseComponent,NSCalendar.DATE_SELECTED,this.__selectedDate,{date:this.__selectedDate});
			this.util.addStyleClass(item.cell,"nsCalendarSelected");
			this.__lastSelectedCell = item.cell;
		}
	};
	
	NSCalendar.prototype.__getItemByIndex = function(index)
	{
		if(index > -1)
		{
			var item = {};
			for(var count = 0;count < this.__arrDayCells.length;count++)
			{
				item = this.__arrDayCells[count];
				if(item.index === index)
				{
					return item;
				}
			}
		}
		return null;
	};
	
	NSCalendar.prototype.__getDateObject = function(year,month,day)
	{
		var date = new Date(year,month,day);
		return date;
	};
	
	NSCalendar.prototype.__isDateSelectable = function(date)
	{
		if(date)
		{
			var tempDate = this.__dateWithoutTime(date);
			var tempMinDate = this.__dateWithoutTime(this.__minDate);
			var tempMaxDate = this.__dateWithoutTime(this.__maxDate);
			var isMinCond = tempDate >= tempMinDate;
			var isMaxCond = tempDate <= tempMaxDate;
			if(isMinCond && isMaxCond)
			{
				if(this.__markDayDisabled)
				{
					return this.__markDayDisabled(date);
				}
				else
				{
					return true;
				}
			}
		}
		return false;
	};
	
	NSCalendar.prototype.__dateWithoutTime = function(date)
	{
		var tempDate = new Date(date);
		tempDate.setHours(0, 0, 0, 0);
	    return tempDate;
	};
	
	NSCalendar.prototype.__isDateValidForNavigation = function(date)
	{
		if(date && date.getFullYear() >= this.__minDate.getFullYear() && date.getFullYear() <= this.__maxDate.getFullYear())
		{
			return true;
		}
		return false;
	};
	
	NSCalendar.prototype.__applyCustomClass = function(element,type)
	{
		if(element && type && this.__customClass[type])
		{
			this.util.addStyleClass(element,this.__customClass[type]);
		}
	};
	
	NSCalendar.prototype.__formatInputDate = function(inputValue,format)
	{
		format = format ? format : this.__inputFormat;
		if(inputValue)
		{
			if(Object.prototype.toString.call(inputValue) === '[object Date]')
			{
				return inputValue;
			}
			else
			{
				var nsDateUtil = new NSDateUtil();
				return nsDateUtil.parseString(inputValue,format);
			}
		}
		return null;
	};
	
	NSCalendar.DATE_SELECTED = "dateSelected";
	
	return NSCalendar;
})();
(function(root,name,prototype)
{
   if (typeof define === "function" && define.amd)
   {
   	define(name, function () {return prototype;});
   }
   else if (typeof module !== 'undefined' && module.exports)
   {
   	module.exports = prototype;
   }
   else
   {
   	root[name] = prototype;
   }
})(this,"NSCalendar",NSCalendar);
