this.__iframePrint = null;
,click: this.__printHandler.bind(this)

if(this.__iframePrint)
		{
			document.removeChild(this.__iframePrint);
		}
      
      NSEditor.prototype.__printHandler = function(item,event)
	{
		if(this.__isModeTextArea())
		{
			if(!this.__iframePrint)
			{
				this.__iframePrint = this.util.createElement("iframe",this.getID() + "EditorPrintFrame","nsEditorPrint");
				this.__iframePrint.name = this.getID() + "EditorPrintFrame";
				document.body.appendChild(this.__iframePrint);
			}
			var content =  this.__getHtmlFromTextArea();
			var html = "<!DOCTYPE html><html><head><title>" + document.title + "</title>";
			var arrStyle = document.querySelectorAll("style");
			if(arrStyle && arrStyle.length > 0)
			{
				for(var count= 0;count < arrStyle.length; count++)
				{
					var style = arrStyle[count].cloneNode(true);
					html += style.outerHTML;
				}
			}
			var arrLink = document.querySelectorAll("link[rel=stylesheet]");
			if(arrLink && arrLink.length > 0)
			{
				for(var count= 0;count < arrLink.length; count++)
				{
					var link = document.createElement("link");
					link.rel = arrLink[count].rel;
					link.href = arrLink[count].href;
					link.media = "print";
					link.type = "text/css";
					link.media = "all";
					html += link.outerHTML;
				}
			}
			html +="</head><body class=\"nsEditorBody\" dir=\"auto\"><div>" + content + "</div></body></html>";
			var self = this;
			this.__iframePrint.onload = function() 
			{
                setTimeout(function() 
                {
                	var frame = window.frames[self.getID() + "EditorPrintFrame"];
                	frame.focus();
                	frame.print();
                	window.focus();
                }, 0);
            };
            var contentWindow = this.__iframePrint.contentWindow;
            contentWindow.document.open();
            contentWindow.document.write(html);
            contentWindow.document.close();
		}
		else
		{
			this.__executeCommand("print",item);
		}
	};
   var text = this.__getTextFromTextArea();
   
   (function(doc, proto) {
	  try { // check if browser supports :scope natively
	    doc.querySelector(':scope body');
	  } catch (err) { // polyfill native methods if it doesn't
	    ['querySelector', 'querySelectorAll'].forEach(function(method) {
	      var nativ = proto[method];
	      proto[method] = function(selectors) {
	        if (/(^|,)\s*:scope/.test(selectors)) { // only if selectors contains :scope
	          var id = this.id; // remember current element id
	          this.id = 'ID_' + Date.now(); // assign new unique id
	          selectors = selectors.replace(/((^|,)\s*):scope/g, '$1#' + this.id); // replace :scope with #ID
	          var result = doc[method](selectors);
	          this.id = id; // restore previous id
	          return result;
	        } else {
	          return nativ.call(this, selectors); // use native code for other selectors
	        }
	      }
	    });
	  }
	})(window.document, Element.prototype);
   
   .nsEditorPrint
{
	position:fixed;
	left: -9999px;
    top:0px;
    height: 100%;
    width: 0px;
    overflow: hidden;
    z-index:100000000;
    tabIndex: -1;
}

this.__pastedEvent = null;
		this.__imageDetails = null;
      
      this.__pastedEvent = event;
      
      node.firstElementChild && (node.firstElementChild.tagName == "I" ? this.__replaceNode(node.firstElementChild, "em") : 
				node.firstElementChild.tagName == "B" && this.__replaceNode(node.firstElementChild, "strong"));
			if(arrScript.indexOf(tagName) != -1)
			{
				this.__removeNode(node);
				return false;
			}
         
         this.__formatImageAndShape = function(node,rtfCode)
		{
			if(node.tagName == "IMG") 
			{
				var applyStyle = function(element,styleName)
				{
					if(element && element.hasAttribute(styleName))
					{
						element.style[styleName] = element.getAttribute(styleName) + "px";
						delete element.removeAttribute(styleName);
					}
				};
				var src = node.getAttribute("src");
				var alt = node.getAttribute("alt");
				if (src && src.match(/^file:\/\//) && alt && (alt.match(/^https?:\/\//) || alt.match(/^http?:\/\//)))
				{
					node.setAttribute("src",node.getAttribute("alt"));
					node.setAttribute("data-nseditor-src",node.getAttribute("src"));
					applyStyle(node,"width");
					applyStyle(node,"height");
					return;
				}
			}
			var spId = null;
			if(rtfCode)
			{
				if ("IMG" == node.tagName) 
				{
					 var src = node.getAttribute("src");
					 if (!src || src.indexOf("file://") === -1)
					 {
						 return;
					 }
					 spId = this.__shape[node.getAttribute("v:shapes")];
					 if(!spId)
					 {
						 spId = node.getAttribute("v:shapes");
					 }
				}
			}
			else
			{
				spId = node.parentNode.getAttribute("o:spid");
			}
			node.removeAttribute("height");
			if(spId)
			{
				 
				 if(!this.__imageDetails)
				 {
					 this.__getImageDetails(rtfCode);
				 }
	             var imageDetails = this.__imageDetails[spId.substring(7)];
	             if(imageDetails) 
	             {
	                 var base64 = this.__getBase64FromHex(imageDetails.hex);
	                 var src = "data:" + imageDetails.type + ";base64," + base64;
	                 if(node.tagName == "IMG")
	                 {
	                	 node.src = src;
	                 }
	                 else
	                 {
	                	 var img = this.util.createElement("img",null,node.parentNode.getAttribute("style"));
	                	 img.src = src;
	                	 node.parentNode.parentNode.insertBefore(img, node.parentNode);
	                	 node.parentNode.parentNode.removeChild(node.parentNode);
	                 }
	             }
			}
		};
      
      this.__getImageDetails = function(rtfCode)
		{
			this.__imageDetails = {};
			this.__populateImageDetails(rtfCode,"i","\\shppict");
			this.__populateImageDetails(rtfCode,"s","\\shp{");
		};
		
		this.__populateImageDetails = function(rtfCode,tagInit,splitTag)
		{
			var arrCode = rtfCode.split(splitTag);
			for(var count = 1;count < arrCode.length;count++)
			{
				 var code = arrCode[count];
				 code = code.split("shplid");
				 if(code.length > 1)
				 {
					 code = code[1];
					 var tagID = "";
					 for (var codeLength = 0; codeLength < code.length;codeLength++)
					 {
						 if(code[codeLength] != "\\" && code[codeLength] != "{" && code[codeLength] != " "  && code[codeLength] != "\r" &&  code[codeLength] != "\n")
					     {
							 tagID += code[codeLength];
					     }
						 else
						 {
							 break;
						 }
					 }
					 var blipTag = code.split("bliptag");
					 if (blipTag && blipTag.length < 2)
					 {
						 continue;
					 }
					 var imageType = null;
					 if(blipTag[0].indexOf("pngblip") > -1)
					 {
						 imageType = "image/png";
					 }
					 else if(blipTag[0].indexOf("jpegblip") > -1)
				     {
						 imageType = "image/jpeg";
				     }
					 if(!imageType)
					 {
						 continue;
					 }
					 var blipTagSplit = blipTag[1].split("}");
	                 if (blipTagSplit && blipTagSplit.length < 2)
	                 {
	                	 continue;
	                 }
	                 var arrHexCode = [];
	                 if (blipTagSplit.length > 2 && blipTagSplit[0].indexOf("blipuid") != -1)
	                 {
	                	 arrHexCode = blipTagSplit[1].split(" ");
	                 }
                     else 
                     {
                    	arrHexCode = blipTagSplit[0].split(" ");
                        if (arrHexCode && arrHexCode.length < 2)
                        {
                        	continue;
                        }
                        arrHexCode.shift();
                     }
	                 this.__imageDetails[tagInit + tagID] = {type: imageType,hex: arrHexCode.join("")};
				 }
			}
		};
		
		this.__getBase64FromHex = function(hexCode)
		{
			var arrChars = hexCode.match(/[0-9a-f]{2}/gi);
			var arrBase64 = [];
			for(var count = 0;count < arrChars.length;count++)
			{
				arrBase64.push(String.fromCharCode(parseInt(arrChars[count], 16)));
			}
			return btoa(arrBase64.join(""));
		};
