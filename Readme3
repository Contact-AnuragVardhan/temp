var NSEditor = (function()
{
	function NSEditor(component,setting) 
	{
		this.__orignalTextArea = component;
		this.__setting = setting;
		
		this.__context = window;
		
		this.__config = null;
		this.__divOuterContainer = null;
		this.__divToolBarContainer = null;
		this.__divTabContainer = null;
		this.__divBodyContainer = null;
		this.__divFooterContainer = null;
		this.__divLineNumberContainer = null;
		this.__divTextAreaContainer = null;
		this.__compTextArea = null;
		this.__divLineNumberWrapper = null;
		this.__frameContentWindow = null;
		this.__frameContentDoc = null;
		this.__frameBody = null;
		
		this.__textAreaScrollRef = null;
		this.__textAreaResizeRef = null;
		this.__textAreaKeyUpRef = null;
		this.__textAreaKeyDownRef = null;
		
		this.__textAreaObserver = null; 
		this.__timeOutInterval = null;
		this.__lastTextAreaHeight = 0; 
		this.__lastTextAreaWidth = 0;
		this.__paddingHorizontal = 0;
		this.__browserDetail = null;
		this.__toolBarButton = null;
		this.__isDisabled = false;
		this.__isFrameDesignModeEnabled = false;
		
		this.__windowClickRef = null;
		
		this.__init();
		
		
		
		this.base.__setBaseComponent.call(this,this.__divOuterContainer);
	};
	nsExtendPrototype(NSContainerBase,NSEditor);
	NSEditor.prototype.constructor = NSEditor;
	
	NSEditor.prototype.initializeComponent = function() 
	{
		this.base.initializeComponent.call(this);
		this.__browserDetail = this.util.getBrowser();
		this.__toolBarButton = {"fullScreen":{html:"<i class='fa fa-expand' aria-hidden='true'></i>",tooltip:"Full Screen",click:fullScreenHandler.bind(this)},
				   "bold":{html:"<i class='fa fa-bold' aria-hidden='true'></i>",tooltip:"Bold",tags: ["b", "strong"],css: {fontWeight: "bold"},tooltip: "Bold",hotkey: {"ctrl": 1, "key": 66},command:"bold"},
				   "italic":{html:"<i class='fa fa-italic' aria-hidden='true'></i>",tooltip:"Italic",tags: ["i", "em"],css: {fontStyle: "italic"},tooltip: "Bold",hotkey: {"ctrl": 1, "key": 66},command:"italic"},
				   "underline":{html:"<i class='fa fa-underline' aria-hidden='true'></i>",tooltip:"Underline",tags: ["u"],css: {textDecoration: "underline"},hotkey: {"ctrl": 1, "key": 73},command:"underline"},
				   "strikeThrough":{html:"<i class='fa fa-strikethrough' aria-hidden='true'></i>",tooltip:"Strikethrough",tags: ["s", "strike"],css: {textDecoration: "line-through"},command:"strikeThrough"},
				   "justifyCenter":{html:"<i class='fa fa-align-center' aria-hidden='true'></i>",tooltip:"Justify Center",css: {textAlign: "center"},command:"justifyCenter"},
				   "justifyLeft":{html:"<i class='fa fa-align-left' aria-hidden='true'></i>",tooltip:"Justify Left",css: {textAlign: "left"},command:"justifyLeft"},
				   "justifyRight":{html:"<i class='fa fa-align-right' aria-hidden='true'></i>",tooltip:"Justify Right",css: {textAlign: "right"},command:"justifyRight"},
				   "justifyFull":{html:"<i class='fa fa-align-justify' aria-hidden='true'></i>",tooltip:"Justify Full",tags: ["s", "strike"],css: {textAlign: "justify"},command:"justifyFull"},
				   "subscript":{html:"<i class='fa fa-subscript' aria-hidden='true'></i>",tooltip:"Subscript",tags: ["sub"],command:"subscript"},
				   "superscript":{html:"<i class='fa fa-superscript' aria-hidden='true'></i>",tooltip:"Superscript",tags: ["sup"],command:"superscript"},
				  
				   "paragraph":{html:"<p>Normal</p>",tooltip:"Paragraph",command: "FormatBlock",
						   		    "arguments": (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "<p>" : "p",tags: ["p"]},
				   "header1":{html:"<h1>Heading 1</h1>",tooltip:"Header 1",
					   				 command: (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "FormatBlock" : "heading",
							   		 "arguments": (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "<h1>" : "h1",tags: ["h1"]},
			   	   "header2":{html:"<h2>Heading 2</h2>",tooltip:"Header 2",
		   				 		command: (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "FormatBlock" : "heading",
		   				 		"arguments": (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "<h2>" : "h2",tags: ["h2"]},
				   "header3":{html:"<h3>Heading 3</h3>",tooltip:"Header 3",
					   		  command: (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "FormatBlock" : "heading",
							  "arguments": (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "<h3>" : "h3",tags: ["h3"]},
				   "header4":{html:"<h4>Heading 4</h4>",tooltip:"Header 4",
			   		  		 command: (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "FormatBlock" : "heading",
			   		  		 "arguments": (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "<h4>" : "h4",tags: ["h4"]},
				   "orderedList":{html:"<i class='fa fa-list-ol' aria-hidden='true'></i>",tooltip:"Ordered List",click:orderedListHandler.bind(this)},
				   "unorderedList":{html:"<i class='fa fa-list-ul' aria-hidden='true'></i>",tooltip:"Unordered List",click:unorderedListHandler.bind(this)},
				   "undo":{html:"<i class='fa fa-rotate-left' aria-hidden='true'></i>",tooltip:"Undo",command:"undo"},
				   "redo":{html:"<i class='fa fa-rotate-right' aria-hidden='true'></i>",tooltip:"Redo",command:"redo"},
				   "fontFamily":{html:"<i class='fa fa-font' aria-hidden='true'></i>",tooltip:"Font Family",click:fontFamilyHandler.bind(this),
			   			isDropdown:true,
			   			dataSource:[{value:"Arial",html:"<span style=\"font-family: Arial,Helvetica,sans-serif\">Arial</span>",tooltip:"Arial",command:"Arial,Helvetica,sans-serif"},
			   			         {value:"Georgia",html:"<span style=\"font-family: Georgia,serif\">Georgia</span>",tooltip:"Georgia",command:"Georgia,serif"},
			   			         {value:"Impact",html:"<span style=\"font-family: Impact,Charcoal,sans-serif\">Impact</span>",tooltip:"Impact",command:"Impact,Charcoal,sans-serif"},
			   			         {value:"Tahoma",html:"<span style=\"font-family: Tahoma,Geneva,sans-serif\">Tahoma</span>",tooltip:"Tahoma",command:"Tahoma,Geneva,sans-serif"},
			   			         {value:"Times New Roman",html:"<span style=\"font-family: Times New Roman,Times,serif,-webkit-standard\">Times New Roman</span>",tooltip:"Times New Roman",command:"Times New Roman,Times,serif,-webkit-standard"},]},
				   "fontSize":{html:"<i class='fa fa-text-height' aria-hidden='true'></i>",tooltip:"Font Size",click:fontSizeHandler.bind(this),
					   		    isDropdown:true,dataSource:[]},
				   "paragraphFormat":{html:"<i class='fa fa-paragraph' aria-hidden='true'></i>",tooltip:"Paragraph Format",
					   			isDropdown:true,
					   			dataSource:[{value:"paragraph",htmlKey:"paragraph"},
					   			            {value:"header1",htmlKey:"header1"},
					   			            {value:"header2",htmlKey:"header2"},
					   			            {value:"header3",htmlKey:"header3"},
					   			            {value:"header4",htmlKey:"header4"}]},
 			       "align":{html:"<i class='fa fa-align-left' aria-hidden='true'></i>",tooltip:"Align",click:alignHandler.bind(this),
	 			    	  	isDropdown:true,
				   			dataSource:[{value:"justifyCenter",htmlKey:"justifyCenter"},
				   			            {value:"justifyLeft",htmlKey:"justifyLeft"},
				   			            {value:"justifyRight",htmlKey:"justifyRight"},
				   			            {value:"justifyFull",htmlKey:"justifyFull"}]},
				 };
		var arrFontSize = [8,9,10,12,14,18,24,30,36,48,60,72,96];
		var fontDataSource = [];
		for(var count = 0;count < arrFontSize.length;count++)
		{
			var font = arrFontSize[count];
			var fontPx = font + "px";
			fontDataSource.push({value:fontPx,html:"<span>" + font + "</span>",command:fontPx});
		}
		this.__toolBarButton["fontSize"].dataSource = fontDataSource;
		this.__setSetting();
		this.__initDefault();
		this.__createComponent();
	};
	
	NSEditor.prototype.setComponentProperties = function() 
	{
		this.base.setComponentProperties.call(this);
	};
	
	NSEditor.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
	{
		var attributeName = attrName.toLowerCase();
		this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
	};
	
	NSEditor.prototype.removeComponent = function() 
	{
		if(this.__textAreaScrollRef)
		{
			this.util.removeEvent(this.__compTextArea,"scroll",this.__textAreaScrollRef);
			this.__textAreaScrollRef = null;
		}
		if(this.__textAreaResizeRef)
		{
			this.util.removeEvent(this.__compTextArea,"resize",this.__textAreaResizeRef);
			this.__textAreaResizeRef = null;
		}
		if(this.__textAreaKeyUpRef)
		{
			this.util.removeEvent(this.__compTextArea,"keyup",this.__textAreaKeyUpRef);
			this.__textAreaKeyUpRef = null;
		}
		if(this.__textAreaKeyDownRef)
		{
			this.util.removeEvent(this.__compTextArea,"keydown",this.__textAreaKeyDownRef);
			this.__textAreaKeyDownRef = null;
		}
		if(this.__windowClickRef)
		{
			this.util.removeEvent(window,"click",this.__windowClickRef);
			this.__windowClickRef = null;
		}
		if(this.__textAreaObserver)
		{
			this.__textAreaObserver.disconnect();
			this.__textAreaObserver = null;
		}
		if(this.__divOuterContainer)
		{
			if(this.__divOuterContainer.parentNode)
			{
				this.__divOuterContainer.parentNode.removeChild(this.__divOuterContainer);
			}
			this.__divOuterContainer = null;
		}
		if(this.__orignalTextArea)
		{
			this.util.removeStyleClass(this.__orignalTextArea,"nsEditorTextAreaHidden");
		}
		this.base.removeComponent.call(this);
	};
	
	NSEditor.prototype.componentResized = function(event) 
	{
		this.base.componentResized.call(this,event);
	};
	
	//if setting["enableLineNumber"] is true then the components for line Number is created and then 
	// with toggleLineNumber function the Line Number visibility can be toggled
	NSEditor.prototype.toggleLineNumber = function() 
	{
		this.__config["enableLineNumber"] = !this.__config["enableLineNumber"];
		this.__setLineNumberVisibility(this.__config["enableLineNumber"]);
	};
	
	NSEditor.prototype.setDisabled = function(isDisabled) 
	{
		this.__isDisabled = isDisabled;
	};
	
	NSEditor.prototype.getDisabled = function() 
	{
		return this.__isDisabled;
	};
	
	NSEditor.prototype.getText = function() 
	{
		return this.__getTextForTextArea();
	};
	
	NSEditor.prototype.setFocus = function(isFocus) 
	{
		this.base.setFocus.call(this,isFocus);
		if(this.__isModeTextArea())
		{
			
		}
		else
		{
			isFocus ? (this.__frameContentWindow ? this.__frameContentWindow.focus() : null) : null;
		}
	};
	
	NSEditor.prototype.__initDefault = function()
	{
		//item in autoSuggestTriggers will be {keyCode: 32, ctrlKey: true,shiftKey: false, preventDefault: true}
		if(!this.__config["autoSuggestTriggers"])
		{
			this.__config["autoSuggestTriggers"] = [];
		}
		if(!this.__config["mode"])
		{
			this.__config["mode"] = NSEditor.MODE_TEXTAREA;
		}
	};
	
	NSEditor.prototype.__setSetting = function()
	{
		if(!this.__setting)
		{
			this.__setting = {};
		}
		if(!this.__config)
		{
			this.__config = {};
		}
		var setting = this.__setting;
		if(setting)
		{
			if(setting.hasOwnProperty("context"))
			{
				this.__context = setting["context"];
			}
			this.__config["enableToolBar"] = Boolean.parse(this.__setting["enableToolBar"]);
			this.__config["toolBarButton"] = this.__setting["toolBarButton"];
			this.__config["enableTabBar"] = Boolean.parse(this.__setting["enableTabBar"]);
			this.__config["enableLineNumber"] = Boolean.parse(this.__setting["enableLineNumber"]);
			this.__config["enableAutoSuggest"] = Boolean.parse(this.__setting["enableAutoSuggest"]);
			this.__config["autoSuggestTriggers"] = this.__setting["autoSuggestTriggers"];
			this.__config["enableFooter"] = Boolean.parse(this.__setting["enableFooter"]);
			this.__config["mode"] = this.__setting["mode"];
		}
	};
	
	NSEditor.prototype.__init = function()
	{
		this.__divOuterContainer = document.createElement("div");
		this.__divOuterContainer.setAttribute("class","nsEditor nsEditorOuterContainer");
		if(this.__orignalTextArea && this.__orignalTextArea.parentNode)
		{
			if(this.__orignalTextArea.nextSibling)
			{
				this.__orignalTextArea.parentNode.insertBefore(this.__divOuterContainer, this.__orignalTextArea.nextSibling);
			}
			else
			{
				this.__orignalTextArea.parentNode.appendChild(this.__divOuterContainer);
			}
		}
		else
		{
			document.body.appendChild(this.__divOuterContainer);
		}
	};
	
	NSEditor.prototype.__createComponent = function()
	{
		this.__createToolBar();
		this.__createTabBar();
		this.__createBody();
		this.__createFooter();
		if(!this.__windowClickRef)
		{
			this.__windowClickRef = this.__windowClickHandler.bind(this);
			this.util.addEvent(window,"click",this.__windowClickRef);
		}
	};
	
	NSEditor.prototype.__createToolBar = function()
	{
		this.__divToolBarContainer = this.util.createDiv(this.getID() + "toolbarcontainer","nsEditorToolBarContainer");
		this.__divOuterContainer.appendChild(this.__divToolBarContainer);
		if(this.__config["enableToolBar"])
		{
			this.__createToolBarComponents();
		}
		else
		{
			this.__handleVisibilityOfComponent(this.__divToolBarContainer,"enableToolBar");
		}
	};
	
	NSEditor.prototype.__createToolBarComponents = function()
	{
		this.util.removeAllChildren(this.__divToolBarContainer);
		if(this.__config["toolBarButton"] && this.__config["toolBarButton"].length > 0)
		{
			for(var count = 0;count < this.__config["toolBarButton"].length;count++)
			{
				if(this.__toolBarButton[this.__config["toolBarButton"][count]])
				{
					this.__createToolBarButton(this.__toolBarButton[this.__config["toolBarButton"][count]],this.__divToolBarContainer);
				}
			}
		}
	};
	
	NSEditor.prototype.__createToolBarButton = function(item,parent)
	{
		if(item)
		{
			var self = this;
			var btnItem =  this.util.createElement("button",null,"nsEditorToolBarButton");
			btnItem.innerHTML = item.html;
			if(item.tooltip && item.tooltip.length > 0)
			{
				this.util.addStyleClass(btnItem,"nsEditorTooltip");
				var span = this.util.createElement("span",null,"nsEditorTooltipText");
				span.appendChild(document.createTextNode(item.tooltip));
				btnItem.appendChild(span);
			}
			if(item.isDropdown)
			{
				this.util.addStyleClass(btnItem,"nsEditorToolBarButtonDropdown");
				var dropdown = this.__createToolBarDropdown(item,btnItem);
				this.util.addEvent(btnItem,"click",(function(dropdown,item){
					return function(event){
						self.__toolBarDropdownClickHandler.call(self,dropdown,item,event);
					};
				})(dropdown,item));
			}
			else
			{
				this.util.addEvent(btnItem,"click",(function(item){
					return function(event){
						self.__toolBarButtonClickHandler.call(self,item,event);
					};
				})(item));
			}
			if(parent)
			{
				parent.appendChild(btnItem);
			}
			return btnItem;
		}
		return null;
	};
	
	NSEditor.prototype.__createToolBarDropdown = function(parentItem,parent)
	{
		var arrItem = parentItem.dataSource;
		if(arrItem && arrItem.length > 0)
		{
			var self = this;
			var dropdown =  this.util.createElement("ul",null,"nsEditorToolBarDropdown");
			for(var count = 0;count < arrItem.length;count++)
			{
				var item = arrItem[count];
				var value = item.value;
				if(item.hasOwnProperty("htmlKey"))
				{
					item = this.__toolBarButton[item["htmlKey"]];
				}
				if(item)
				{
					var child = this.util.createElement("li",null,"nsEditorToolBarDropdownItem");
					child.innerHTML = item.html;
					child.setAttribute("data-nsEditor-value",value);
					this.util.addEvent(child,"click",(function(item){
						return function(event){
							self.__toolBarButtonClickHandler.call(self,item,event);
						};
					})(item));
					dropdown.appendChild(child);
				}
			}
			if(parent)
			{
				parent.appendChild(dropdown);
			}
			return dropdown;
		}
		return null;
	};
	
	NSEditor.prototype.__toolBarDropdownClickHandler = function(dropdown,item,event)
	{
		if(dropdown)
		{
			this.util.toggleStyleClass(dropdown,"nsEditorToolBarDropdownShow");
		}
	};
	
	NSEditor.prototype.__toolBarButtonClickHandler = function(item,event)
	{
		if(item)
		{
			if(!this.getDisabled())
			{
				this.__executeCommand(item.command,item);
				if(item.click)
				{
					item.click(item,event);
				}
			}
		}
	};
	
	NSEditor.prototype.__createTabBar = function()
	{
		this.__divTabContainer = this.util.createDiv(this.getID() + "tabcontainer","nsEditorTabContainer");
		this.__divOuterContainer.appendChild(this.__divTabContainer);
		if(this.__config["enableTabBar"])
		{
			//this.__createToolBarComponents();
		}
		else
		{
			this.__handleVisibilityOfComponent(this.__divTabContainer,"enableTabBar");
		}
	};
	
	NSEditor.prototype.__createBody = function()
	{
		this.__divBodyContainer = this.util.createDiv(this.getID() + "bodycontainer","nsEditorBodyContainer");
		this.__divLineNumberContainer = this.util.createDiv(this.getID() + "linenumbercontainer","nsEditorLineNumberContainer");
		this.__divTextAreaContainer = this.util.createDiv(this.getID() + "textareacontainer","nsEditorTextAreaContainer");
		this.__divBodyContainer.appendChild(this.__divLineNumberContainer);
		this.__divBodyContainer.appendChild(this.__divTextAreaContainer);
		this.__divOuterContainer.appendChild(this.__divBodyContainer);
		this.__compTextArea = this.__createTextArea();
		this.__divTextAreaContainer.appendChild(this.__compTextArea);
	};
	
	NSEditor.prototype.__createTextArea = function()
	{
		var divTextArea = null;
		if(this.__isModeTextArea())
		{
			//do not add class here as it will get overriden from if orignalTextArea has class
			divTextArea = this.util.createDiv(this.getID() + "textArea",null);
			divTextArea.setAttribute("contenteditable",true);
			divTextArea.setAttribute("spellcheck",true);
			if(this.__orignalTextArea)
			{
				if(this.__orignalTextArea.value.length > 0)
				{
					divTextArea.appendChild(document.createTextNode(this.__orignalTextArea.value));
				}
				var arrAttributes = ["placeholder","tabIndex","style","class"];
				var arrNewAttributes = ["data-placeholder","tabIndex","style","class"];
				for(var count = 0;count < arrAttributes.length;count++)
				{
					if(this.__orignalTextArea.getAttribute(arrAttributes[count]))
					{
						divTextArea.setAttribute(arrNewAttributes[count],this.__orignalTextArea.getAttribute(arrAttributes[count]));
					}
				}
			}
			else if(this.__config.defaultValue && this.__config.defaultValue.length > 0)
			{
				divTextArea.appendChild(document.createTextNode(this.__config.defaultValue));
			}
			this.util.addStyleClass(divTextArea,"nsEditorTextArea");
			this.__createLineNumberComponents();
		}
		else
		{
			divTextArea = this.util.createElement("iframe",this.getID() + "textArea","nsEditorTextAreaIFrame");
			if(window.location.protocol === "https:")
			{
				divTextArea.setAttribute("src","about:blank");
			}
			divTextArea.setAttribute("frameborder","0");
			divTextArea.setAttribute("allowtransparency","true");
			var content = "";
			if(this.__orignalTextArea)
			{
				if(this.__orignalTextArea.getAttribute("tabindex"))
				{
					divTextArea.setAttribute("tabindex",this.__orignalTextArea.getAttribute("tabindex"));
				}
				if(this.__orignalTextArea.value.length > 0)
				{
					content = this.__orignalTextArea.value;
				}
			}
			else if(this.__config.defaultValue && this.__config.defaultValue.length > 0)
			{
				content = this.__config.defaultValue;
			}
			//for Mozilla showing cursor
			if(!content)
			{
				content = "<br />";
			}
			var style = "html\r\n" + 
					"		{\r\n" + 
					"			margin:0px;\r\n" + 
					"			height:auto;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody\r\n" + 
					"		{\r\n" + 
					"			height:auto;\r\n" + 
					"			background:transparent;\r\n" + 
					"			color:#000000;\r\n" + 
					"			position:relative;\r\n" + 
					"			z-index: 2;\r\n" + 
					"			-webkit-user-select:auto;\r\n" + 
					"			margin:0px;\r\n" + 
					"			min-height:50px;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody:after\r\n" + 
					"		{\r\n" + 
					"			content:\'\';\r\n" + 
					"			display:block;\r\n" + 
					"			clear:both;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody::-moz-selection\r\n" + 
					"		{\r\n" + 
					"			background:#b5d6fd;\r\n" + 
					"			color:#000;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody::selection\r\n" + 
					"		{\r\n" + 
					"			background:#b5d6fd;\r\n" + 
					"			color:#000;\r\n" + 
					"		}";
					
			var html = "<html><head><style>" + style + "</style></head><body class=\"nsEditorBody\" contenteditable=\"true\" aria-disabled=\"false\" spellcheck=\"true\" dir=\"auto\">" + content + "</body></html>";
			this.__enableIFrameDesignMode(divTextArea,html);
		}
		if(this.__orignalTextArea)
		{
			var width = (this.__orignalTextArea.clientWidth || 0);
			var height = (this.__orignalTextArea.clientHeight || 0);
			var textWidth = this.util.getOuterWidth(this.__orignalTextArea);
			this.__divOuterContainer.style.width = textWidth + "px";
			var baseMeasurement = this.__orignalTextArea.getBoundingClientRect();
			divTextArea.style.width = (baseMeasurement.width) + "px";
			divTextArea.style.height = (baseMeasurement.height) + "px";
			divTextArea.style.minHeight = (baseMeasurement.height - 6) + "px";
			this.util.addStyleClass(this.__orignalTextArea,"nsEditorTextAreaHidden");
		}
		
		return divTextArea;
	};
	
	NSEditor.prototype.__enableIFrameDesignMode = function(iframe,html)
	{
		if(iframe && !this.__isFrameDesignModeEnabled)
		{
			this.__frameContentWindow = this.__getIFrameContentWindow(iframe);
			try 
			{
				this.__frameContentDoc = this.__frameContentWindow.document;
				this.__frameContentDoc.open();
				this.__frameContentDoc.write(html);
				this.__frameContentDoc.close();
            } 
			catch (error) 
			{
                //console.debug(error);
            }
            if (document.contentEditable) 
			{
            	this.__frameContentDoc.designMode = "On";
            	this.__isFrameDesignModeEnabled = true;
            } 
			else if (document.designMode !== null) 
			{
                try 
				{
                	this.__frameContentDoc.designMode = "on";
                	this.__isFrameDesignModeEnabled = true;
                } 
				catch (error) 
				{
                    //console.debug(error);
                }
            }
            if(this.__isFrameDesignModeEnabled)
            {
            	this.__createLineNumberComponents();
            	this.util.addEvent(this.__frameContentWindow,"click",this.__windowClickRef);
            }
            var self = this;
            this.__timeOutInterval = setTimeout(function () 
		    {
            	self.__timeOutInterval = null;
            	self.__enableIFrameDesignMode.call(self,iframe,html);
		    }, 500);
		}
		else
		{
			clearTimeout(this.__timeOutInterval);
			this.__timeOutInterval = null;
		}
	};
	
	NSEditor.prototype.__createLineNumberComponents = function()
	{
		var listenerComponent = this.__isModeTextArea() ? this.__compTextArea : this.__frameContentWindow;
		if(this.__setting["enableLineNumber"])
		{
			var textWidth = this.__divOuterContainer.offsetWidth;
			var baseMeasurement = this.__compTextArea.getBoundingClientRect();
			this.__divLineNumberContainer.style.height = (baseMeasurement.height) + "px";
			this.__divLineNumberWrapper = this.util.createDiv(this.getID() + "linenumberwrapper","nsEditorLineNumberWrapper");
			this.__divLineNumberContainer.appendChild(this.__divLineNumberWrapper);
			this.__drawLineNumbers(1);
			this.__paddingHorizontal = parseInt(this.util.getStyleValue(this.__divOuterContainer,"border-left-width",false)) +
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"border-right-width",false)) + 
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"padding-left",false)) + 
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"padding-right",false));
			this.__divOuterContainer.style.width = (textWidth - this.__paddingHorizontal) + "px";
			this.__compTextArea.style.width = (textWidth - this.__divLineNumberContainer.offsetWidth - this.__paddingHorizontal - 20) + "px";
			this.__lastTextAreaHeight = this.__compTextArea.offsetHeight; 
			this.__lastTextAreaWidth = this.__compTextArea.offsetWidth;
			if(!this.__textAreaScrollRef)
			{
				this.__textAreaScrollRef = this.__textAreaScrollHandler.bind(this);
				this.util.addEvent(listenerComponent,"scroll",this.__textAreaScrollRef);
			}
			if(!this.__textAreaResizeRef)
			{
				this.__textAreaResizeRef = this.__textAreaResizeHandler.bind(this);
				this.util.addEvent(listenerComponent,"resize",this.__textAreaResizeRef);
			}
		}
		else
		{
			this.__divOuterContainer.removeChild(this.__divLineNumberContainer);
		}
		if(this.__config["enableAutoSuggest"])
		{
			if(!this.__textAreaKeyUpRef)
			{
				this.__textAreaKeyUpRef = this.__textAreaKeyUpHandler.bind(this);
				this.util.addEvent(listenerComponent,"keyup",this.__textAreaKeyUpRef);
			}
			if(!this.__textAreaKeyDownRef)
			{
				this.__textAreaKeyDownRef = this.__textAreaKeyDownHandler.bind(this);
				this.util.addEvent(listenerComponent,"keydown",this.__textAreaKeyDownRef);
			}
		}
		//observer to watch if orignalTextArea has some style changed
		if(!this.__textAreaObserver && this.__orignalTextArea)
		{
			this.__textAreaObserver = new MutationObserver(this.__textAreaStyleChangeHandler.bind(this));
			this.__textAreaObserver.observe(this.__orignalTextArea, {attributes:true,attributeFilter:["style"]});
		}
		this.__setLineNumberVisibility(this.__config["enableLineNumber"]);
	};
	
	NSEditor.prototype.__createFooter = function()
	{
		this.__divFooterContainer = this.util.createDiv(this.getID() + "footercontainer","nsEditorFooterContainer");
		this.__divOuterContainer.appendChild(this.__divFooterContainer);
		if(this.__config["enableFooter"])
		{
			//this.__createToolBarComponents();
		}
		else
		{
			this.__handleVisibilityOfComponent(this.__divFooterContainer,"enableFooter");
		}
	};
	
	NSEditor.prototype.__windowClickHandler = function(event)
	{
		if(this.hasFocus())
		{
			if (!event.target.matches(".nsEditorToolBarButtonDropdown")) 
			{
				var dropdowns = document.getElementsByClassName("nsEditorToolBarDropdownShow");
			    for (var count = 0; count < dropdowns.length; count++) 
			    {
			      var openDropdown = dropdowns[count];
			      this.util.removeStyleClass(openDropdown,"nsEditorToolBarDropdownShow");
			    }
			}
		}
	};
	
	NSEditor.prototype.__textAreaScrollHandler = function(event)
	{
		if(!this.__timeOutInterval)
		{
			var lineNumberHeight = 15;
			var self = this;
			this.__timeOutInterval = setTimeout( function() 
			{
				var listenerComponent = self.__getScrollComponent();
				var scrollTop = listenerComponent.scrollTop;
				var firstLine = Math.floor((scrollTop / lineNumberHeight) + 1);
				var remainingScroll = (scrollTop / lineNumberHeight) % 1;

				self.__drawLineNumbers(firstLine);
				self.__divLineNumberWrapper.style.marginTop = (-1 * (remainingScroll * lineNumberHeight)) + "px";
				self.__timeOutInterval = null;
			}, 150);
		}
	};
	
	NSEditor.prototype.__textAreaResizeHandler = function(event)
	{
		var listenerComponent = this.__getScrollComponent();
		this.__divLineNumberContainer.style.height = (listenerComponent.clientHeight) + "px";
	};
	
	NSEditor.prototype.__textAreaStyleChangeHandler = function(arrMutation)
	{
		arrMutation.forEach(function(mutation) 
		{
	        if (mutation.type == "attributes") 
	        {
	        	
	        }
	    });
	};
	
	NSEditor.prototype.__textAreaKeyUpHandler = function(event)
	{
		 /*if (decls.isVisible())
         {
             decls.setFilter(getFilterText());
         }*/
	};
	
	NSEditor.prototype.__textAreaKeyDownHandler = function(event)
	{
		//console.log(this.__getPreviousWord());
		/*var triggered = false;

        function processTriggers(triggers, callback)
        {
            if (triggered) { return; }
            triggers.forEach(function (item)
            {
                if (triggered) { return; }

                var shiftKey = item.shiftKey || false;
                var ctrlKey = item.ctrlKey || false;
                var keyCode = item.keyCode || 0;
                var preventDefault = item.preventDefault || false;

                if (evt.keyCode === keyCode && evt.shiftKey === shiftKey && evt.ctrlKey === ctrlKey)
                {
                    startColumnIndex = getCaretOffset() + 1;
                    triggered = true;
                    callback(item,this.__getPreviousWord());
                    if (preventDefault)
                    {
                        evt.preventDefault();
                    }
                }
            });
        }

        processTriggers(declsTriggers, declarationsCallback);

        if (decls.isVisible())
        {
            if (evt.keyCode === 8)
            {
                decls.setFilter(getFilterText());
            }
            else
            {
                this.__handleKeySpecialKeys(event);
            }
        }*/
		
	};
	
	NSEditor.prototype.__drawLineNumbers = function(fromLine)
	{
		if(this.__divLineNumberWrapper)
		{
			this.util.removeAllChildren(this.__divLineNumberWrapper);
			this.arrLinesElement = [];
			var measurement = this.__divLineNumberContainer.getBoundingClientRect();
			var containerHeight = measurement.height;
			while((this.__divLineNumberWrapper.offsetHeight - containerHeight) <= 0)
			{
				var divLineNumber = this.util.createDiv(this.getID() + "linenumber","nsEditorLineNumber");
				divLineNumber.appendChild(document.createTextNode(fromLine));
				this.__divLineNumberWrapper.appendChild(divLineNumber);
				this.arrLinesElement.push(divLineNumber);
				fromLine++;
			}
		}
		return fromLine;
	};
	
	NSEditor.prototype.__setLineNumberVisibility = function(isVisible) 
	{
		if(this.__setting["enableLineNumber"])
		{
			this.__config["enableLineNumber"] = isVisible;
			this.__handleVisibilityOfComponent(this.__divLineNumberContainer,"enableLineNumber");
			this.__divToolBarContainer.style.paddingLeft = (this.__divLineNumberContainer.offsetWidth + 10) + "px";
		}
	};
	
	NSEditor.prototype.__handleVisibilityOfComponent = function(component,property) 
	{
		this.__setting[property] ? this.util.removeStyleClass(component,"nsEditorComponentHidden") : this.util.addStyleClass(component,"nsEditorComponentHidden");
	};
	
	NSEditor.prototype.__handleKeySpecialKeys = function(event) 
	{
		// escape, left, right
        if (event.keyCode === 27 || event.keyCode === 37 || event.keyCode === 39)
        {
            setVisible(false);
        }
        // up
        else if (event.keyCode === 38)
        {
            moveSelected(-1);
            event.preventDefault();
            event.stopPropagation();
        }
        // down
        else if (event.keyCode === 40)
        {
            moveSelected(1);
            event.preventDefault();
            event.stopPropagation();
        }
        // page up 
        else if (event.keyCode === 33)
        {
            moveSelected(-5);
            event.preventDefault();
        }
        // page down
        else if (event.keyCode === 34)
        {
            moveSelected(5);
            event.preventDefault();
        }
	};
	
	NSEditor.prototype.__getTextForTextArea = function() 
	{
		var text = null;
		if(this.__isModeTextArea())
		{
			text  = this.__compTextArea.textContent || this.__compTextArea.innerText;
		}
		else
		{
			text = this.__getIFrameContent();
		}
		return text;
	};
	
	//function to get last text for autocomplete .. especially for . intellisense
	NSEditor.prototype.__getCursorPosition = function() 
	{
		var cursorPosition = 0;
		this.__compTextArea.focus();
		if (window.getSelection)
		{
			var range = window.getSelection().getRangeAt(0);
	        var cloneRange = range.cloneRange();
	        cloneRange.selectNodeContents(this.__compTextArea);
	        cloneRange.setEnd(range.endContainer, range.endOffset);
	        cursorPosition = cloneRange.toString().length;
		}
		else if (document.selection && document.selection.type != "Control")
	    {
	        var textRange = document.selection.createRange();
	        var cloneRange = document.body.createTextRange();
	        cloneRange.moveToElementText(element);
	        cloneRange.setEndPoint("EndToEnd", textRange);
	        cursorPosition = cloneRange.text.length;
	    }
        return cursorPosition;
	};
	
	NSEditor.prototype.__getWordAtPosition = function(strData,position) 
	{
		var retData = strData.substring(0,position);
        if (retData.indexOf(" ") > 0 || retData.indexOf("\n") > 0) 
        {
            retData = retData.split(" ");
            retData = retData[retData.length - 1].split("\n");
            return retData[retData.length - 1];
        }
        return retData;
	};
	
	NSEditor.prototype.__getPreviousWord = function() 
	{
		var cursorPosition = this.__getCursorPosition();
		console.log(cursorPosition);
		var lastWord = this.__getWordAtPosition(this.__getTextForTextArea(),cursorPosition);
		return lastWord;
	};
	//end of function to get last text for autocomplete
	
	//functions related to IFrame
	NSEditor.prototype.__getIFrameContent = function() 
	{
		var iframeBody = this.__getIFrameBody();
	    return (iframeBody ? iframeBody.innerHTML : null);
	};
	
	NSEditor.prototype.__getIFrameContentWindow = function(iframe) 
	{
		var contentWindow = null;
		if (iframe.contentWindow)
		{
			contentWindow = iframe.contentWindow;
		}
		else
		{
	        if (iframe.contentDocument && iframe.contentDocument.document)
	        {
	        	contentWindow = iframe.contentDocument.document;
	        }
	        else
	        {
	        	contentWindow = iframe.contentDocument;
	        }
		}
		return contentWindow;
	};
	
	NSEditor.prototype.__getIFrameBody = function() 
	{
		if(!this.__frameBody)
		{
			this.__frameBody = this.__getIFrameDocument().getElementsByTagName("body")[0];
		}
	    return this.__frameBody;
	};
	
	NSEditor.prototype.__getIFrameDocument = function()  
	{
	    return (this.__compTextArea.contentDocument || this.__compTextArea.contentWindow.document);
	};
	
	NSEditor.prototype.__disableStyleWithCSS = function() 
	{
		if (this.__browserDetail.isFirefox) 
		{
			//disable style while inserting in firefox design Mode
			try 
			{
				this.__frameContentDoc.execCommand("styleWithCSS", false, false);
			} 
			catch (error) 
			{
				try 
				{
					this.__frameContentDoc.execCommand("useCSS", false, true);
				} 
				catch (error2) 
				{
				}
			}
		}
	};
	//end of functions related to IFrame
	
	NSEditor.prototype.__executeCommand = function(commandName,config) 
	{
		if(!config)
		{
			config = {};
		}
		var command = config.command || commandName;
		var arguments = config["arguments"];
		if(config.execCommand)
		{
			config.execCommand.apply(this);
		}
		else if(this.__isModeTextArea())
		{
			
		}
		else
		{
			this.setFocus(true);
			this.__disableStyleWithCSS();
			// in Firefox untrusted JavaScript is not allowed to access the clipboard
			try 
			{
				this.__frameContentDoc.execCommand(command, false, arguments);
			} 
			catch (error) 
			{
				console.error(error);
			}
		}
	};
	
	NSEditor.prototype.__getInternalRange = function() 
	{
		var selection = this.__getInternalSelection();
		if (selection) 
		{
			if (selection.rangeCount && selection.rangeCount > 0) 
			{
				return selection.getRangeAt(0);
			} 
			else if (selection.createRange) 
			{
				return selection.createRange();
			}
		}
		return null;
	};

	NSEditor.prototype.__getInternalSelection = function() 
	{
		if(this.__isModeTextArea())
		{
			
		}
		else
		{
			if (this.__compTextArea.contentWindow) 
			{
				if (this.__compTextArea.contentWindow.getSelection) 
				{
					return this.__compTextArea.contentWindow.getSelection();
				}
				if (this.__compTextArea.contentWindow.selection) 
				{
					return this.__compTextArea.contentWindow.selection;
				}
			}
			if (this.__frameContentDoc.getSelection) 
			{
				return this.__frameContentDoc.getSelection();
			}
			if (this.__frameContentDoc.selection) 
			{
				return this.__frameContentDoc.selection;
			}
		}
		return null;
	};

	NSEditor.prototype.__getRange = function() 
	{
		var selection = (window.getSelection) ? window.getSelection() : window.document.selection;
		if (selection) 
		{
			if (selection.rangeCount && selection.rangeCount > 0) 
			{ 
				selection.getRangeAt(0);
			} 
			else if (selection.createRange)
			{
				return selection.createRange();
			}
		}
		return null;
	};
	
	NSEditor.prototype.__getScrollComponent = function() 
	{
		var component = this.__isModeTextArea() ? this.__compTextArea : this.__getIFrameBody();
		return component;
	};

	NSEditor.prototype.__isModeTextArea = function() 
	{
		return (this.__config["mode"] !== NSEditor.MODE_IFRAME);
	};
	
	//section of functions for toolbar buttons
	var fullScreenHandler = function(item,event)
	{
		
	};
	
	var boldHandler = function(item,event)
	{
		
	};

	var italicHandler = function(item,event)
	{
		
	};

	var underlineHandler = function(item,event)
	{
		
	};
	
	var strikeThroughHandler = function(item,event)
	{
		
	};
	
	var subScriptHandler = function(item,event)
	{
		
	};
	
	var superScriptHandler = function(item,event)
	{
		
	};
	
	var fontFamilyHandler = function(item,event)
	{
		
	};
	
	var fontSizeHandler = function(item,event)
	{
		
	};
	
	var paragraphFormatHandler = function(item,event)
	{
		
	};
	
	var alignHandler = function(item,event)
	{
		
	};
	
	var orderedListHandler = function(item,event)
	{
		
	};
	
	var unorderedListHandler = function(item,event)
	{
		
	};
	
	var undoHandler = function(item,event)
	{
		
	};
	
	var redoHandler = function(item,event)
	{
		
	};

	//end of section of functions for toolbar buttons
	
	NSEditor.TOOLBAR_BUTTONS_FULLSCREEN = "fullScreen";
	NSEditor.TOOLBAR_BUTTONS_BOLD = "bold";
	NSEditor.TOOLBAR_BUTTONS_ITALIC = "italic";
	NSEditor.TOOLBAR_BUTTONS_UNDERLINE = "underline";
	NSEditor.TOOLBAR_BUTTONS_STRIKETHROUGH = "strikeThrough";
	NSEditor.TOOLBAR_BUTTONS_SUBSCRIPT = "subscript";
	NSEditor.TOOLBAR_BUTTONS_SUPERSCRIPT = "superscript";
	NSEditor.TOOLBAR_BUTTONS_FONTFAMILY = "fontFamily";
	NSEditor.TOOLBAR_BUTTONS_FONTSIZE = "fontSize";
	NSEditor.TOOLBAR_BUTTONS_PARAGRAPHFORMAT = "paragraphFormat";
	NSEditor.TOOLBAR_BUTTONS_ALIGN = "align";
	NSEditor.TOOLBAR_BUTTONS_ORDEREDLIST = "orderedList";
	NSEditor.TOOLBAR_BUTTONS_UNORDEREDLIST = "unorderedList";
	NSEditor.TOOLBAR_BUTTONS_UNDO = "undo";
	NSEditor.TOOLBAR_BUTTONS_REDO = "redo";
	NSEditor.MODE_TEXTAREA = "textArea";
	NSEditor.MODE_IFRAME = "iframe";
	
	
	return NSEditor;
})();
(function(root,name,prototype)
{
   if (typeof define === "function" && define.amd)
   {
   	define(name, function () {return prototype;});
   }
   else if (typeof module !== 'undefined' && module.exports)
   {
   	module.exports = prototype;
   }
   else
   {
   	root[name] = prototype;
   }
})(this,"NSEditor",NSEditor);
