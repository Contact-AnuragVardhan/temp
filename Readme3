import * as React from "react";
import { INSGridEditorCustomComponent, INSGridEditorCustomComponentSetting } from '../../lib/nsGrid/interfaces';
import {BaseComponent} from '../base/baseComponent';

export class ChineseWallEditor extends BaseComponent implements INSGridEditorCustomComponent
{
    private input: any;
    private setting: any = null;
    private orignalValue: any = null;
    private currentValue: any = null;
    private arrSource: any[] = null;

    constructor(public props: any, public state: any) 
    {
        super(props,state);
        this.setting = props;
        this.arrSource = [{ id: 'Private', value: 'Private' },{ id: 'Public', value: 'Public' }];
        this.state = {
                value: ''
        };
    }
    
    componentDidMount() 
    {
        let item = this.setting.item;
        this.orignalValue = item["CCSTATUS"];
        this.currentValue = this.orignalValue;
        this.setState({"value": this.currentValue});
    }
    
    init(setting: INSGridEditorCustomComponentSetting) : void
    { 
    };
    
    getElement(): any
    {
        return this.input;
    };
    
    elementAdded(): void
    {
        this.input.value = this.orignalValue;
        this.input.focus();
    };
    
    getValue(): any
    {
        return this.currentValue;
    };
  
    setFocus(): void
    {
        this.input.focus();
    };
    
    hasValueChanged(currValue: any): boolean
    {
        return (!(this.currentValue == null && this.currentValue == "" && currValue == null)) && (this.currentValue != currValue);
    };
    
    isPopUp(): boolean
    {
        return false;
    };
    
    cancel(): void
    {
        let item = this.setting.item;
        item["CCSTATUS"] = this.orignalValue;
        this.setting.api.updateItemInDataSource(item);
    };
    
   render() {
       const style = {width: "100%"}
       /*let options = this.arrSource.map((data,key) =>
       <option 
           key={key}
           value={data.value}>
           {data.id}
       </option>
       );*/
       const handleChange:any = this.handleChange.bind(this);
       return (
            <select ref={(ref) => this.input = ref} value={this.state.value} style={style} onChange={handleChange}>
               {this.arrSource.map((data,key) => {
                   return <option key={key} value={data.value}>{data.id}</option>;
               })}
           </select>  
       )
   }
   
   private handleChange(event: any): void
   {
       this.currentValue = event.target.value;
       this.setState({"value": this.currentValue});
       let item = this.setting.item;
       item["CCSTATUS"] = this.currentValue;
       this.setting.api.updateItemInDataSource(item);
   }
        
   
   


}
