this.__objBrowser = null;
this.__objBrowser = this.util.getBrowser();

		var divParentParentParent = this.util.createDiv(this.getID() + "ParentParentParent","nsTabNavigatorParentParentParent");
		var divParentParent = this.util.createDiv(this.getID() + "ParentParent","nsTabNavigatorParentParent");
		var divParent = this.util.createDiv(this.getID() + "Parent","nsTabNavigatorParent");
    
			var divLeftNavigator = this.util.createDiv(this.getID() + "Left","nsTabNavigatorLeft");
      
			var divRightNavigator = this.util.createDiv(this.getID() + "Right","nsTabNavigatorRight");


//IE Bug not taking the Height
		if(this.__objBrowser.isMSIE)
		{
			var height = this.__config.tabContainer.offsetHeight + "px";
			var parentID = this.getID() + "ParentParentParent";
			this.util.addCSSClassInDOM(["#" + parentID,"#" + parentID + " #" + this.getID() + "Left","#" + parentID + " #" + this.getID() + "Right"],["max-height:" + height + ";","max-height:" + height + ";","max-height:" + height + ";"]);
		}
    
    var itemDispatch = {tab:itemComp.tab,text:itemComp.tab.textContent,attributeValue:itemComp.contentSelector,content:itemComp.content};
					var cancelled = this.util.dispatchEvent(this.__baseComponent,NSTabNavigator.TAB_CHANGE_STARTING,itemDispatch,{selectedTab: itemDispatch},null,true);
					if(cancelled)
					{
						console.debug("NSTabNavigator: Tab Moved was cancelled");
					}
					else
					{
						this.__config.selectedItem = itemComp;
						itemComp.isActive = true;
						this.util.addStyleClass(itemComp.tabContainer,"nsTabContainerActive");
						this.__updateContent(itemComp);
						retValue = true;
						if(this.__config.enableHashChange) 
						{
		                    if(history.pushState) 
		                    {
		                        if (!this.__win.location.origin) 
		                        {
		                        	this.__win.location.origin = this.__win.location.protocol + "//" + this.__win.location.hostname + (this.__win.location.port ? ':' + this.__win.location.port: '');
		                        }
		                        history.pushState(null, null, this.__win.location.origin + this.__win.location.pathname + this.__win.location.search + itemComp.contentSelector);
		                    } 
		                    else 
		                    {
		                    	this.__win.location.hash = itemComp.contentSelector;
		                    }
		                }
						this.__moveIndicator(itemComp);
						this.util.dispatchEvent(this.__baseComponent,NSTabNavigator.TAB_CHANGED,itemDispatch,{selectedTab: itemDispatch});
					}
					this.util.dispatchEvent(this.__baseComponent,NSTabNavigator.TAB_CHANGE_END,itemDispatch,{selectedTab: itemDispatch});
          
          NSTabNavigator.TAB_CHANGE_STARTING = "tabChangeStarting";
	NSTabNavigator.TAB_CHANGED = "tabChanged";
	NSTabNavigator.TAB_CHANGE_END = "tabChangeEnd";
  
  
  util.dispatchEvent(element,"transitionend");
    				util.dispatchEvent(element,"webkitTransitionEnd");
            
            
            if(arrButtons)
			{
				for(var index = 0;index < arrButtons.length;index++)
				{
					item = arrButtons[index];
					var divButton = this.util.createDiv(null,"nsMessageBoxButtonContainer");
					var button = this.util.createElement("button");
					button.innerHTML = item["label"];
					if(item["cssClass"])
					{
						button.setAttribute("class",item["cssClass"]);
					}
					if(item["callback"])
					{
						this.util.addEvent(button,"click",item["callback"]);
					}
					divButton.appendChild(button);
					this.__divFooter.appendChild(divButton);
				}
			}
      
      ,arrIgnoreKeys
      
      var isClone = true;
			for (var count = 0; count < arrIgnoreKeys.length; count++) 
		    {
				if(arrIgnoreKeys[count] == key)
				{
					isClone = false;
					break;
				}
		    }
			if(isClone)
			{
				if(deepCopy)
				{
					clonedItem = this.cloneObject(objSource[key],deepCopy,arrIgnoreKeys);
				}
				else
				{
					clonedItem = objSource[key];
				}
				objClone[key] = clonedItem;
			}
      
      cursor: pointer;
