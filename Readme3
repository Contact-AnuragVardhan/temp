
package com.nomura.ccet.export;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.nomura.ccet.constants.CCETAppConstants;
import com.nomura.ccet.dto.AttendeesDTO;
import com.nomura.ccet.dto.CharitableEventDTO;
import com.nomura.ccet.dto.CommentDTO;
import com.nomura.ccet.dto.CorporateEventDTO;
import com.nomura.ccet.dto.EventBaseDTO;
import com.nomura.ccet.dto.KeyValueDTO;
import com.nomura.ccet.dto.RequestDTO;
import com.nomura.ccet.dto.UploadedFileDTO;
import com.nomura.ccet.dto.WorkflowActionDTO;
import com.nomura.ccet.util.CCETUtils;
import com.nomura.ccet.util.DateFormattingUtil;
import com.nomura.export.model.ExportDTO;
import com.nomura.export.model.LogoDetails;
import com.nomura.export.model.NomuraExportPageVO;

public class RequestDetailPDFGenerator
{
	protected final float SPACE_BEFORE_TABLE = 7.0f;
	protected final float PADDING_LEFT = 5.0f;
	protected final float PADDING_RIGHT = 5.0f;
	protected final float PADDING_TOP = 10.0f;
	protected final float PADDING_BOTTOM = 15.0f;
	protected final float HEADER_PADDING_LEFT = 30.0f;
	
	protected final int TITLE_FONT_SIZE = 20;
	
	protected PageEventHandlerForPDF pageEventHandler =null;
	
	protected BaseColor NOMURA_RED;
	protected BaseColor NOMURA_GREEN;
	protected BaseColor NOMURA_GREY;
	protected BaseColor NOMURA_ORANGE;
	protected BaseColor BLUE_COLOR;
	
	protected Font FONT_BOLD_24_BLACK;
	protected Font FONT_BOLD_12_BLACK;
	protected Font FONT_BOLD_10_BLACK;
	protected Font FONT_BOLD_9_BLACK;
	protected Font FONT_NORMAL_12_BLACK;
	protected Font FONT_NORMAL_10_BLACK;
	protected Font FONT_NORMAL_10_WHITE;
	protected Font FONT_NORMAL_9_BLACK;
	protected Font FONT_NORMAL_9_GREEN;
	protected Font FONT_NORMAL_9_RED;
	protected Font FONT_NORMAL_9_GREY;
	protected Font FONT_NORMAL_9_ORANGE;
	protected Font FONT_NORMAL_9_BLUE;
	protected Font FONT_NORMAL_8_GREY;
	
	private void configurePdfColorsAndFonts() throws DocumentException, IOException{
		NOMURA_RED = new BaseColor(202, 36, 32);
		NOMURA_GREEN = new BaseColor(0, 113, 59);
		NOMURA_GREY = new BaseColor(115, 115, 115);
		NOMURA_ORANGE = new BaseColor(204, 141, 25);
		BLUE_COLOR = new BaseColor(60, 141, 188);
		
		FONT_BOLD_24_BLACK = new Font(FontFamily.HELVETICA,24, Font.BOLD,BaseColor.BLACK);
		FONT_BOLD_12_BLACK = new Font(FontFamily.HELVETICA,12, Font.BOLD,BaseColor.BLACK);
		FONT_BOLD_10_BLACK = new Font(FontFamily.HELVETICA,10, Font.BOLD,BaseColor.BLACK);
		FONT_BOLD_9_BLACK = new Font(FontFamily.HELVETICA,9, Font.BOLD,BaseColor.BLACK);
		FONT_NORMAL_12_BLACK = new Font(FontFamily.HELVETICA,12, Font.NORMAL,BaseColor.BLACK);
		FONT_NORMAL_10_BLACK = new Font(FontFamily.HELVETICA,10, Font.NORMAL,BaseColor.BLACK);
		FONT_NORMAL_10_WHITE = new Font(FontFamily.HELVETICA,10, Font.NORMAL,BaseColor.WHITE);
		FONT_NORMAL_9_BLACK = new Font(FontFamily.HELVETICA,9, Font.NORMAL,BaseColor.BLACK);
		FONT_NORMAL_9_RED = new Font(FontFamily.HELVETICA,9, Font.NORMAL,NOMURA_RED);
		FONT_NORMAL_9_GREEN = new Font(FontFamily.HELVETICA,9, Font.NORMAL,NOMURA_GREEN);
		FONT_NORMAL_9_GREY = new Font(FontFamily.HELVETICA,9, Font.NORMAL,NOMURA_GREY);
		FONT_NORMAL_9_ORANGE = new Font(FontFamily.HELVETICA,9, Font.NORMAL,NOMURA_ORANGE);
		FONT_NORMAL_9_BLUE = new Font(FontFamily.HELVETICA,9, Font.NORMAL, BLUE_COLOR);
		FONT_NORMAL_8_GREY = new Font(FontFamily.HELVETICA,8, Font.NORMAL,NOMURA_GREY);
	}
	
	protected PdfPCell getCellInstance(float borderTop, float borderRight, float borderBottom, float borderLeft, BaseColor backGroundColor)
	{
    	PdfPCell cell = new PdfPCell();
    	cell.setBorderWidthTop(borderTop);
		cell.setBorderWidthRight(borderRight);
		cell.setBorderWidthBottom(borderBottom);
		cell.setBorderWidthLeft(borderLeft);
		//cell.setBackgroundColor(backGroundColor);
		cell.setPadding(0);
		cell.setPaddingLeft(5f);
		return cell;
	}
    
	protected Paragraph getCellParagraph(String label, Font labelFont, String value, Font valueFont, int alignment, int leftIndentation, int rightIndentation)
	{
		Paragraph paragraph = new Paragraph();
		paragraph.setTabSettings(new TabSettings(8f));
		Chunk chunk;
		if(null != label && label.length() > 0){
			chunk = new Chunk(label, labelFont);
		    paragraph.add(chunk);
		    paragraph.add(Chunk.TABBING);
		}
	    if(null != value && value.length() > 0){
		    chunk = new Chunk(value,valueFont);
		    paragraph.add(chunk);
	    }
	    paragraph.setAlignment(alignment);
	    paragraph.setIndentationLeft(leftIndentation);
	    paragraph.setIndentationRight(rightIndentation);
	    return paragraph;
	}
	
    protected void setDocumentPrinterConfigurations(Document document)
	{
		document.setPageSize(PageSize.A4);
	}
	
	protected void setWriterPrinterConfigurations(PdfWriter writer)
	{
		writer.setViewerPreferences(PdfWriter.ALLOW_PRINTING | PdfWriter.PageLayoutSinglePage);
	}
	
	protected void buildPdfMetadata(Document document) 
	{
		
	}
	
	public void renderDocument(List<RequestDTO> reqDetailsList, ExportDTO exportDetails, HttpServletResponse response) throws Exception
    {
		try
		{
			configurePdfColorsAndFonts();
			
	    	Document document = new Document();
	    	document.setMargins(PADDING_LEFT,PADDING_RIGHT,0,20);
	    	
	    	setDocumentPrinterConfigurations(document);
	    	
			PdfWriter writer = PdfWriter.getInstance(document, response.getOutputStream());
			
			pageEventHandler = new PageEventHandlerForPDF();
			pageEventHandler.generatedOn = exportDetails.getNomuraExportPage().getGeneratedOn();
		    writer.setPageEvent(pageEventHandler);
		    
			setWriterPrinterConfigurations(writer);
			
			buildPdfMetadata(document);
			document.open();
			buildPdfDocument(document, writer, exportDetails, reqDetailsList);
			document.close();
			response.flushBuffer();
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
			throw exception;
		}
    }
    
    protected void buildPdfDocument(Document document, PdfWriter writer, ExportDTO exportDetails, List<RequestDTO> reqDetailsList) throws Exception
    {
    	int count = 0;
    	for(RequestDTO reqDetails : reqDetailsList){
    		Paragraph paragraph = new Paragraph();
            paragraph.add(new Phrase(""));
    		Chapter chapter = new Chapter(paragraph,count++);
            chapter.setNumberDepth(0);
            chapter.setBookmarkTitle(reqDetails.getStrRequestID());
            createNomuraBanner(chapter,exportDetails.getExportPDFSetting().getLogoDetails(),exportDetails.getNomuraExportPage());
    		addRequesterAndOverallStatusTable(chapter, reqDetails);
        	addRequesterDetails(chapter,reqDetails);
        	addRequestDetails(chapter, reqDetails);
        	document.add(chapter);
        	document.newPage();
    	}
    	
		createLastPageText(document,exportDetails.getLastPageText());
    }
    
    protected void createNomuraBanner(Chapter chapter,LogoDetails logoDetails,NomuraExportPageVO exportPage) throws DocumentException,IOException
    {
		PdfPCell cell;
		Paragraph paragraph;
    	if(logoDetails != null && logoDetails.getPath()!=null && logoDetails.getPath().length() > 0)
		{
    		 Image logo = Image.getInstance(logoDetails.getPath());
    		 if(logoDetails.getScaleWidthBy() > 0.0f && logoDetails.getScaleHeightBy() > 0.0f)
    		 {
    			  logo.scalePercent(logoDetails.getScaleWidthBy(),logoDetails.getScaleHeightBy());
    		 }
    		 logo.setWidthPercentage(100);
    		 chapter.add(logo);
		}
    	PdfPTable appNameTable = new PdfPTable(1);
    	appNameTable.setWidthPercentage(100f);
		
		cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
		paragraph = getCellParagraph("Internal Communications and Events Request",FONT_BOLD_12_BLACK,null,null,Element.ALIGN_CENTER,0,0);
		cell.addElement(paragraph);
		appNameTable.addCell(cell);
		
		chapter.add(appNameTable);
    }
    
    protected void addRequesterAndOverallStatusTable(Chapter document, RequestDTO reqDetails) throws DocumentException{
		PdfPCell cell;
		Paragraph paragraph;
		
		paragraph = getCellParagraph(null,null,"Request : " + reqDetails.getStrRequestID(),FONT_NORMAL_10_BLACK,Element.ALIGN_CENTER,0,0);
		paragraph.setSpacingAfter(5f);
		document.add(paragraph);
		
		PdfPTable requesterAndOverallStatusTable = new PdfPTable(2);
		requesterAndOverallStatusTable.setWidthPercentage(100f);
		requesterAndOverallStatusTable.setWidths(new float[]{3f,3f});
		
		cell = getCellInstance(0,0,1,0,BaseColor.WHITE);
		paragraph = getCellParagraph("Requester :",FONT_BOLD_10_BLACK,reqDetails.getRequesterName(),FONT_NORMAL_10_BLACK,Element.ALIGN_LEFT,5,0);
		cell.addElement(paragraph);
		cell.setPaddingBottom(6f);
		requesterAndOverallStatusTable.addCell(cell);
		
		cell = getCellInstance(0,0,1,0,BaseColor.WHITE);
		paragraph = getCellParagraph("Overall Status :",FONT_BOLD_10_BLACK,reqDetails.getRequestStatusLabel(),FONT_NORMAL_10_BLACK,Element.ALIGN_RIGHT,0,5);
		cell.addElement(paragraph);
		cell.setPaddingBottom(6f);
		requesterAndOverallStatusTable.addCell(cell);
		
		document.add(requesterAndOverallStatusTable);
    }
    
    protected void addRequesterDetails(Chapter document, RequestDTO reqDetails) throws Exception{
    	PdfPCell cell;
		Paragraph paragraph;
		
		PdfPTable requesterAndStatusWrapperTable = new PdfPTable(2);
		requesterAndStatusWrapperTable.setWidthPercentage(100.0f);
		requesterAndStatusWrapperTable.setSpacingBefore(3);
		PdfPCell mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
		
    	PdfPTable tblLeft = new PdfPTable(2);
    	tblLeft.setWidthPercentage(100f);
    	tblLeft.setWidths(new float[]{2.5f,3f});
    	
    	addCell("Request ID :",reqDetails.getStrRequestID(),tblLeft);
    	addCell("Event Type :",reqDetails.getEventType(),tblLeft);
    	addCell("Supervisor :",reqDetails.getLstSupervisor().get(0).getEmployeeName(),tblLeft);
    	
		mainTableCell.addElement(tblLeft);
		requesterAndStatusWrapperTable.addCell(mainTableCell);
		
		mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable statusInfoTable = new PdfPTable(3);
    	statusInfoTable.setWidthPercentage(100f);
    	statusInfoTable.setWidths(new float[]{2f,1f,2.5f});
    	
    	if(null != reqDetails.getWorkflowStatuses() && reqDetails.getWorkflowStatuses().size() > 0)
    	{
    		for(WorkflowActionDTO workflowStatus : reqDetails.getWorkflowStatuses())
    		{
    			String status = workflowStatus.getStatusLabel();
    			addCell(workflowStatus.getTypeName() + " :",status,statusInfoTable);
    			
        		cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
        		String approvalDate = getApprovalDate(workflowStatus.getActionedDate());
        		paragraph = getCellParagraph(null,null,approvalDate,FONT_NORMAL_8_GREY,Element.ALIGN_LEFT,0,0);
        		cell.addElement(paragraph);
        		statusInfoTable.addCell(cell);
        	}
    	}
    	mainTableCell.addElement(statusInfoTable);
		requesterAndStatusWrapperTable.addCell(mainTableCell);
		
		document.add(requesterAndStatusWrapperTable);
    }
    
    protected void addRequestDetails(Chapter document, RequestDTO reqDetails) throws DocumentException
    {
    	Boolean isCorporateEvent = CCETAppConstants.EVENT_TYPE_CORPORATE.equalsIgnoreCase(reqDetails.getEventType());
    	EventBaseDTO baseDTO = isCorporateEvent ? reqDetails.getCorporate() : reqDetails.getCharitable();
    	CorporateEventDTO corporateEventDTO = reqDetails.getCorporate();
    	CharitableEventDTO charitableEventDTO = reqDetails.getCharitable();
    	
    	PdfPTable requestEventHeadingTable = new PdfPTable(1);
    	requestEventHeadingTable.setSpacingBefore(8);
    	requestEventHeadingTable.setWidthPercentage(100f);
    	PdfPCell cell = getCellInstance(0,0,1,0,BaseColor.WHITE);
    	Paragraph paragraph = getCellParagraph("Request Details :",FONT_BOLD_9_BLACK,null,null,Element.ALIGN_LEFT,5,0);
		cell.addElement(paragraph);
		cell.setPaddingBottom(5f);
		requestEventHeadingTable.addCell(cell);
		document.add(requestEventHeadingTable);
		
		PdfPTable mainTable = new PdfPTable(2);
		mainTable.setWidthPercentage(100.0f);
		mainTable.setSpacingBefore(3);
		
		PdfPCell mainLeftTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable tblLeft = new PdfPTable(2);
    	tblLeft.setWidthPercentage(100f);
    	tblLeft.setWidths(new float[]{2.5f,3f});
    	
    	addUpperLeftDetails(baseDTO,tblLeft);
    	if(isCorporateEvent)
		{
			addCorporateLeftDetails(corporateEventDTO,tblLeft);
		}
    	else
    	{
    		addCharitableLeftDetails(charitableEventDTO,tblLeft);
    	}
		
		mainLeftTableCell.addElement(tblLeft);
		mainTable.addCell(mainLeftTableCell);
		
		PdfPCell mainRightTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable tblRight = new PdfPTable(2);
    	tblLeft.setWidthPercentage(100f);
    	tblLeft.setWidths(new float[]{2.5f,3f});
    	
    	addUpperRightDetails(baseDTO,tblRight);
    	if(isCorporateEvent)
		{
			addCorporateRightDetails(corporateEventDTO,tblRight);
		}
    	else
    	{
    		addCharitableRightDetails(charitableEventDTO,tblRight);
    	}
    	
    	mainRightTableCell.addElement(tblRight);
		mainTable.addCell(mainRightTableCell);
		
		document.add(mainTable);
		
		if(isCorporateEvent)
		{
			addCorporateAdditionalDetails(document,corporateEventDTO);
			addCorporateEstimateNumberof(document,corporateEventDTO);
		}
		else
		{
			addCharitableDocumentation(document,charitableEventDTO);
			addCharitableAdditionalDetails(document,charitableEventDTO);
		}
		
		addAttendees(document,baseDTO);
		addComments(document, reqDetails);
    }
    
    private void addUpperLeftDetails(EventBaseDTO baseDTO,PdfPTable table)
    {
		addCell("Host :",baseDTO.getHostName(),table);
		addCell("Extension(Requestor) :",baseDTO.getRequestorExtension(),table);
		if(baseDTO.getLstDivision() != null)
		{
			int index = 0;
			for(KeyValueDTO division : baseDTO.getLstDivision())
			{
				if(index == 0)
				{
					addCell("Division(s) :",division.getDisplayValue(),table);
				}
				else
				{
					addCell("",division.getDisplayValue(),table);
				}
			}
		}
    }
    
    private void addUpperRightDetails(EventBaseDTO baseDTO,PdfPTable table)
    {
		addCell("Extension(Host) :",baseDTO.getHostExtension(),table);
		addCell("Nomura Legal Entity :",baseDTO.getHostLegalEntity(),table);
		if(baseDTO.getLstDivision() != null)
		{
			int index = 0;
			for(KeyValueDTO costCode : baseDTO.getLstCostCenter())
			{
				if(index == 0)
				{
					addCell("Cost Code(s) :",costCode.getDisplayValue(),table);
				}
				else
				{
					addCell("",costCode.getDisplayValue(),table);
				}
			}
		}
    }
    
    private void addCorporateLeftDetails(CorporateEventDTO eventDTO,PdfPTable table)
    {
		addCell("Request Date :",eventDTO.getRequestDate(),table);
		addCell("Project ID :",eventDTO.getProjectID(),table);
		addCell("Event Name :",eventDTO.getEventName(),table);
		addCell("Venue/Location :",eventDTO.getVenueLocation(),table);
		addCell("Event Description :",eventDTO.getEventDescription(),table);
		addCell("Budget :",eventDTO.getDisplayBudget(),table);
		addCell("Event Date From :",eventDTO.getDisplayEventDateFrom(),table);
		addCell("Invitation Required :",CCETUtils.showBooleanValue(eventDTO.getInvitationRequired()),table);
    }
    
    private void addCorporateRightDetails(CorporateEventDTO eventDTO,PdfPTable table)
    {
		addCell("Corporate Event Type :",eventDTO.getEventType(),table);
		//addCell("","",table);
		//addCell("","",table);
		//addCell("","",table);
		//addCell("","",table);
		addCell("Final Budget :",eventDTO.getDisplayFinalBudget(),table);
		addCell("Event Date To :",eventDTO.getDisplayEventDateTo(),table);
		addCell("Registration Page Required :",CCETUtils.showBooleanValue(eventDTO.getRegistrationPageRequired()),table);
    }
    
    private void addCorporateAdditionalDetails(Chapter document,CorporateEventDTO eventDTO) throws DocumentException
    {
    	addTitle(document,"Additional Details:");
    	
    	PdfPTable mainTable = new PdfPTable(1);
		mainTable.setWidthPercentage(100.0f);
		mainTable.setSpacingBefore(3);
    	
    	PdfPCell mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable table = new PdfPTable(2);
    	table.setWidthPercentage(100f);
    	table.setWidths(new float[]{2.5f,3f});
    	
    	addCell("Public Officials in Attendance ?",eventDTO.getIsPublicOfficialsPresent(),table);
    	addCell("Business Purpose :",eventDTO.getBusinessPurpose(),table);
    	if(eventDTO.getAttachments() != null && eventDTO.getAttachments().size() > 0)
		{
			int index = 0;
			for(UploadedFileDTO attachment : eventDTO.getAttachments())
			{
				String value = attachment.getName() + " : " + attachment.getDescription();
				if(index == 0)
				{
					addCell("Attachments :",value,table);
				}
				else
				{
					addCell("",value,table);
				}
			}
		}
    	else
    	{
    		addCell("Attachments :","",table);
    	}
    	mainTableCell.addElement(table);
		mainTable.addCell(mainTableCell);
		
		document.add(mainTable);
    }
    
    private void addCorporateEstimateNumberof(Chapter document,CorporateEventDTO eventDTO) throws DocumentException
    {
    	addTitle(document,"Estimate Number of:");
    	
    	PdfPTable mainTable = new PdfPTable(2);
		mainTable.setWidthPercentage(100.0f);
		mainTable.setSpacingBefore(3);
    	
    	PdfPCell mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable table = new PdfPTable(2);
    	table.setWidthPercentage(100f);
    	table.setWidths(new float[]{2.5f,3f});
    	
    	addCell("Client :",Integer.toString(eventDTO.getEstimatedClient()),table);
    	
    	mainTableCell.addElement(table);
		mainTable.addCell(mainTableCell);
		
		mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
		table = new PdfPTable(2);
    	table.setWidthPercentage(100f);
    	table.setWidths(new float[]{2.5f,3f});
    	
    	addCell("Nomura :",Integer.toString(eventDTO.getEstimatedNomura()),table);
    	
    	mainTableCell.addElement(table);
		mainTable.addCell(mainTableCell);
		
		document.add(mainTable);
    }
    
    private void addCharitableLeftDetails(CharitableEventDTO eventDTO,PdfPTable table)
    {
		addCell("Request Date :",eventDTO.getRequestDate(),table);
		addCell("Charity Name :",eventDTO.getCharityName(),table);
		addCell("Event Name :",eventDTO.getEventName(),table);
		addCell("Venue/Location :",eventDTO.getVenueLocation(),table);
		addCell("Event Description :",eventDTO.getEventDescription(),table);
		addCell("Event Date From :",eventDTO.getDisplayEventDateFrom(),table);
		addCell("Sponsorship Ad Required:",CCETUtils.showBooleanValue(eventDTO.getSponsorshipAdRequired()),table);
    }
    
    private void addCharitableRightDetails(CharitableEventDTO eventDTO,PdfPTable table)
    {
    	//addCell("","",table);
    	//addCell("","",table);
    	//addCell("","",table);
		addCell("Budget :",eventDTO.getDisplayBudget(),table);
		//addCell("","",table);
		addCell("Event Date To :",eventDTO.getDisplayEventDateTo(),table);
    }
    
    private void addCharitableDocumentation(Chapter document,CharitableEventDTO eventDTO) throws DocumentException
    {
    	addTitle(document,"Documentation:");
    	
    	List<UploadedFileDTO> lstAttachment = new ArrayList<UploadedFileDTO>();
    	Map<String,UploadedFileDTO> mapAttachment = new HashMap<String, UploadedFileDTO>();
    	if(eventDTO.getAttachments() != null && eventDTO.getAttachments().size() > 0)
		{
    		for(UploadedFileDTO attachment : eventDTO.getAttachments())
			{
    			if(attachment.getCategory() != null && attachment.getCategory().length() > 0)
                {
    				mapAttachment.put(attachment.getCategory(), attachment);
                }
    			else
    			{
    				lstAttachment.add(attachment);
    			}
			}
		}
    	
    	PdfPTable mainTable = new PdfPTable(2);
		mainTable.setWidthPercentage(100.0f);
		mainTable.setSpacingBefore(3);
		
		PdfPCell mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable tblLeft = new PdfPTable(2);
    	tblLeft.setWidthPercentage(100f);
    	tblLeft.setWidths(new float[]{2.5f,3f});
    	
    	addCell("501(c)(3) :",(mapAttachment.get("file501c3") != null ? mapAttachment.get("file501c3").getName() : ""),tblLeft);
    	addCell("Disbursement :",(mapAttachment.get("disbursementRequest") != null ? mapAttachment.get("disbursementRequest").getName() : ""),tblLeft);
    	addCell("Event Materials :",(mapAttachment.get("eventMaterials") != null ? mapAttachment.get("eventMaterials").getName() : ""),tblLeft);
    	
    	if(lstAttachment != null && lstAttachment.size() > 0)
		{
			int index = 0;
			for(UploadedFileDTO attachment : lstAttachment)
			{
				String value = attachment.getName() + " : " + attachment.getDescription();
				if(index == 0)
				{
					addCell("Other Attachments :",value,tblLeft);
				}
				else
				{
					addCell("",value,tblLeft);
				}
			}
		}
    	else
    	{
    		addCell("Other Attachments :","",tblLeft);
    	}
    	
    	mainTableCell.addElement(tblLeft);
		mainTable.addCell(mainTableCell);
		
		mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
		PdfPTable tblRight = new PdfPTable(2);
		tblRight.setWidthPercentage(100f);
    	tblRight.setWidths(new float[]{2.5f,3f});
    	
    	addCell("W-9 :",(mapAttachment.get("w9") != null ? mapAttachment.get("w9").getName() : ""),tblRight);
    	addCell("Board of Directors :",(mapAttachment.get("boardOfDirectors") != null ? mapAttachment.get("boardOfDirectors").getName() : ""),tblRight);
    	addCell("New Vendor Form :",(mapAttachment.get("newVendorForm") != null ? mapAttachment.get("newVendorForm").getName() : ""),tblRight);
    	
    	mainTableCell.addElement(tblRight);
		mainTable.addCell(mainTableCell);
		
		
		document.add(mainTable);
    }
    
    private void addCharitableAdditionalDetails(Chapter document,CharitableEventDTO eventDTO) throws DocumentException
    {
    	addTitle(document,"Additional Details:");
    	
    	PdfPTable mainTable = new PdfPTable(2);
		mainTable.setWidthPercentage(100.0f);
		mainTable.setSpacingBefore(3);
		
		PdfPCell mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	PdfPTable tblLeft = new PdfPTable(2);
    	tblLeft.setWidthPercentage(100f);
    	tblLeft.setWidths(new float[]{2.5f,3f});
    	
    	addCell("Is this request related to a business contact ?",eventDTO.getIsBusinessContact(),tblLeft);
    	addCell("Business Contact :",eventDTO.getBusinessContact(),tblLeft);
    	addCell("Year to Date Client Revenue :",eventDTO.getDisplayClientRevenueDate(),tblLeft);
    	addCell("Business Purpose :",eventDTO.getBusinessPurpose(),tblLeft);
    	addCell("Public Officials in Attendance ?",eventDTO.getIsPublicOfficialsPresent(),tblLeft);
    	
    	mainTableCell.addElement(tblLeft);
		mainTable.addCell(mainTableCell);
		
		mainTableCell = getCellInstance(0,0,0,0,BaseColor.WHITE);
		PdfPTable tblRight = new PdfPTable(2);
		tblRight.setWidthPercentage(100f);
    	tblRight.setWidths(new float[]{2.5f,3f});
    	
    	//addCell("","",tblRight);
    	addCell("Client RM #:",eventDTO.getClientRM(),tblRight);
    	addCell("Client Revenue Budget :",eventDTO.getDisplayClientRevenueBudget(),tblRight);
    	//addCell("","",tblRight);
    	//addCell("","",tblRight);
    	
    	mainTableCell.addElement(tblRight);
		mainTable.addCell(mainTableCell);
		
		document.add(mainTable);
    }
    
    private void addAttendees(Chapter document,EventBaseDTO baseDTO) throws DocumentException
    {
    	addTitle(document,"Attendees:");
    	
    	PdfPTable table = new PdfPTable(5);
    	table.setSpacingBefore(8);
    	table.setSpacingAfter(10.0f);
    	table.setWidthPercentage(100f);
    	table.getDefaultCell().setPadding(5);
    	table.getDefaultCell().setUseAscender(true);
        table.getDefaultCell().setUseDescender(true);
    	table.setWidths(new float[]{1f,2f,2f,2f,1.5f});
    	createTableHeaderCell(table,"Type");
    	createTableHeaderCell(table,"Name");
    	createTableHeaderCell(table,"Company");
    	createTableHeaderCell(table,"RM# / Employee ID");
    	createTableHeaderCell(table,"Cost Code");
    	
    	if(baseDTO.getAttendees() != null && baseDTO.getAttendees().size() > 0)
    	{
    		for(AttendeesDTO attendees: baseDTO.getAttendees())
    		{
    			createTableBodyCell(table,attendees.getType());
    			createTableBodyCell(table,attendees.getEmployeeName());
    			createTableBodyCell(table,attendees.getCompany());
    			createTableBodyCell(table,attendees.getEmployeeID());
    			createTableBodyCell(table,attendees.getCostCode());
    		}
    	}
		
		document.add(table);
    }
    
    protected void addComments(Chapter document, RequestDTO reqDetails) throws DocumentException{
    	PdfPCell cell;
		Paragraph paragraph;
		
    	PdfPTable commentsHeadingTable = new PdfPTable(1);
    	commentsHeadingTable.setSpacingBefore(8);
    	commentsHeadingTable.setWidthPercentage(100f);
    	cell = getCellInstance(0,0,1,0,BaseColor.WHITE);
		paragraph = getCellParagraph("History & Comments :",FONT_BOLD_9_BLACK,null,null,Element.ALIGN_LEFT,5,0);
		cell.addElement(paragraph);
		cell.setPaddingBottom(5f);
		commentsHeadingTable.addCell(cell);
		document.add(commentsHeadingTable);
		
		PdfPTable commentsDetailsTable = new PdfPTable(3);
		commentsDetailsTable.setSpacingBefore(3);
		commentsDetailsTable.setWidthPercentage(100f);
		commentsDetailsTable.setWidths(new float[]{1.5f,7f,1.5f});
		
		for(CommentDTO comment : reqDetails.getLstComments())
		{
			cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
			paragraph = getCellParagraph(comment.getActionTypeLabel() + " : ",FONT_NORMAL_9_BLACK,null,null,Element.ALIGN_LEFT,10,0);
			cell.addElement(paragraph);
			commentsDetailsTable.addCell(cell);
			cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
			paragraph = getCellParagraph(comment.getEmployeeName() + " (" + comment.getCommentedAs() + ")",FONT_NORMAL_9_BLUE,null,null,Element.ALIGN_LEFT,0,0);
			cell.addElement(paragraph);
			cell.addElement(new Phrase(comment.getComments(),FONT_NORMAL_9_BLACK));
			commentsDetailsTable.addCell(cell);
			cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
			paragraph = getCellParagraph(comment.getCommentDate(),FONT_NORMAL_8_GREY,null,null,Element.ALIGN_LEFT,0,0);
			cell.addElement(paragraph);
			commentsDetailsTable.addCell(cell);
		}
		
		document.add(commentsDetailsTable);
    }
    
    private void createTableHeaderCell(PdfPTable table,String title)
    {
    	Font font = new Font(FontFamily.HELVETICA,10, Font.NORMAL,BaseColor.WHITE);
		PdfPCell cell = new PdfPCell();
		cell.setBackgroundColor(new BaseColor(192, 0, 0));
		cell.setPhrase(new Phrase(title,font));
		table.addCell(cell);
    }
    
    private void createTableBodyCell(PdfPTable table,String text)
    {
    	Font font = new Font(FontFamily.UNDEFINED,8, Font.NORMAL,BaseColor.BLACK);
		PdfPCell cell = new PdfPCell();
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setPhrase(new Phrase(text,font));
		table.addCell(cell);
    }
    
    protected void createNomuraPage(Document document,NomuraExportPageVO exportPage) throws DocumentException
    {
    	if(exportPage != null)
    	{
			Paragraph paraHeader = new Paragraph(exportPage.getReportTitle(),FONT_BOLD_24_BLACK);
			paraHeader.setSpacingBefore(40);
			paraHeader.setIndentationLeft(HEADER_PADDING_LEFT);
			paraHeader.setAlignment(Element.ALIGN_LEFT);
			document.add(paraHeader);
			
			paraHeader = new Paragraph(exportPage.getCompanyTitle(),FONT_BOLD_12_BLACK);
			paraHeader.setSpacingBefore(20);
			paraHeader.setIndentationLeft(HEADER_PADDING_LEFT);
			paraHeader.setAlignment(Element.ALIGN_LEFT);
			document.add(paraHeader);
			
			if(exportPage.getSearchCriteria() != null)
			{
				for(int count = 0;count < exportPage.getSearchCriteria().length;count++)
				{
					String criteria = exportPage.getSearchCriteria()[count];
					paraHeader = new Paragraph(criteria , FONT_NORMAL_12_BLACK);
					if(count == 0)
					{
						paraHeader.setSpacingBefore(20);
					}
					paraHeader.setIndentationLeft(HEADER_PADDING_LEFT);
					paraHeader.setAlignment(Element.ALIGN_LEFT);
					document.add(paraHeader);
				}
			}
			
			PdfPTable footerTable = new PdfPTable(2);
			footerTable.setWidthPercentage(100f);
			float spacingBefore =  480;
			if(exportPage.getSearchCriteria() != null && exportPage.getSearchCriteria().length > 0)
			{
				spacingBefore = spacingBefore - (20 * exportPage.getSearchCriteria().length);
			}
			footerTable.setSpacingBefore(spacingBefore);
			footerTable.getDefaultCell().setBorder(0);
			
			
			paraHeader = new Paragraph(exportPage.getGeneratedOn() , FONT_NORMAL_12_BLACK);
			paraHeader.setIndentationLeft(HEADER_PADDING_LEFT - 2);
			paraHeader.setAlignment(Element.ALIGN_LEFT);
			
	        PdfPCell cell = new PdfPCell();
	        cell.addElement(paraHeader);
	        cell.setBorder(0);
	        footerTable.addCell(cell);
	        
	        paraHeader = new Paragraph("STRICTLY PRIVATE AND CONFIDENTIAL" , FONT_NORMAL_12_BLACK);
			paraHeader.setIndentationRight(HEADER_PADDING_LEFT);
			paraHeader.setAlignment(Element.ALIGN_RIGHT);
			
			
	        cell = new PdfPCell();
	        cell.addElement(paraHeader);
	        cell.setBorder(0);
	        footerTable.addCell(cell);
	        
			document.add(footerTable);
    	}
    }
    
    protected void createLastPageText(Document document,String[] lastPageText) throws DocumentException
	{
    	if(lastPageText != null && lastPageText.length > 0)
    	{
	    	Font font = FontFactory.getFont(FontFactory.TIMES_ROMAN);
			font.setColor(BaseColor.BLACK);
			font.setStyle(Font.BOLD);
			font.setSize(12);
			for(int count = 0;count < lastPageText.length;count++)
			{
				String text = lastPageText[count];
				Paragraph paraText = new Paragraph(text , font);
				paraText.setKeepTogether(true);
				/*if(count == 0)
				{
					paraText.setSpacingBefore(20);
				}*/
				paraText.setIndentationLeft(HEADER_PADDING_LEFT);
				paraText.setAlignment(Element.ALIGN_LEFT);
				document.add(paraText);
			}
    	}
	}
    
    private void addTitle(Chapter document,String title) throws DocumentException
    {
    	PdfPTable headingTable = new PdfPTable(1);
    	headingTable.setSpacingBefore(8);
    	headingTable.setWidthPercentage(100f);
    	PdfPCell cell = getCellInstance(0,0,1,0,BaseColor.WHITE);
    	Paragraph paragraph = getCellParagraph(title,FONT_BOLD_9_BLACK,null,null,Element.ALIGN_LEFT,5,0);
		cell.addElement(paragraph);
		cell.setPaddingBottom(5f);
		headingTable.addCell(cell);
		document.add(headingTable);
    }
    
    private void addCell(String label,String value,PdfPTable table)
    {
    	label = (label == null || label.length() == 0) ? " " : label;
    	value = (value == null || value.length() == 0) ? " " : value;
    	PdfPCell cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
    	Paragraph paragraph = getCellParagraph(label,FONT_BOLD_9_BLACK,null,null,Element.ALIGN_LEFT,10,0);
		cell.addElement(paragraph);
		table.addCell(cell);
		cell = getCellInstance(0,0,0,0,BaseColor.WHITE);
		paragraph = getCellParagraph(null,null,value,FONT_NORMAL_9_BLACK,Element.ALIGN_LEFT,0,0);
		cell.addElement(paragraph);
		table.addCell(cell);
    }
    
    private String getApprovalDate(String strDate) throws Exception
    {
    	if(strDate != null && strDate.length() > 0)
        {
            return "(on " + DateFormattingUtil.getFormattedDate(strDate,DateFormattingUtil.DB_INPUT_FORMAT,DateFormattingUtil.APPROVED_OUTPUT_FORMAT) + ")";
        }
    	return "";
    }
}




------------------------------------------------------

package com.nomura.ccet.export;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;

public class PageEventHandlerForPDF extends PdfPageEventHelper 
{
	public String generatedOn = "";
	
	protected int pageNumber = 0;
	
	@Override
	public void onOpenDocument(PdfWriter writer,Document document) 
	{
		
    }
	
	@Override
	public void onStartPage(PdfWriter writer,Document document) 
	{
		pageNumber++;
	}
	
	@Override
	public void onEndPage(PdfWriter writer,Document document) 
	{
       
		ColumnText.showTextAligned(writer.getDirectContent(),
             Element.ALIGN_CENTER, new Phrase(String.format("Page %d", pageNumber),new Font(FontFamily.HELVETICA,8, Font.NORMAL,BaseColor.BLACK)),
             (document.left() + document.right()) / 2, document.bottomMargin() - 10, 0);
		ColumnText.showTextAligned(writer.getDirectContent(),
	             Element.ALIGN_CENTER, new Phrase(generatedOn,new Font(FontFamily.HELVETICA,8, Font.NORMAL,BaseColor.BLACK)),
	             document.left() + 30, document.bottomMargin() - 10, 0);
		ColumnText.showTextAligned(writer.getDirectContent(),
	             Element.ALIGN_CENTER, new Phrase("STRICTLY PRIVATE AND CONFIDENTIAL",new Font(FontFamily.HELVETICA,8, Font.NORMAL,BaseColor.BLACK)),
	             document.right() - 80, document.bottomMargin() - 10, 0);
	}
	
	@Override
	public void onCloseDocument(PdfWriter writer,Document document) 
	{
	}
	 
	@Override
	public void onParagraph(PdfWriter writer,Document document,float paragraphPosition) 
	{
		
	}
	
	@Override
	public void onParagraphEnd(PdfWriter writer,Document document,float paragraphPosition) 
	{
	}
	
	@Override
	public void onChapter(PdfWriter writer,Document document,float paragraphPosition,Paragraph title) 
	{
	}
	
	@Override
	public void onChapterEnd(PdfWriter writer,Document document,float position) 
	{
	}
	
	@Override
	public void onSection(PdfWriter writer,Document document,float paragraphPosition,int depth,Paragraph title) 
	{
	}
	
	@Override
	public void onSectionEnd(PdfWriter writer,Document document,float position) 
	{
	}
	
	@Override
	public void onGenericTag(PdfWriter writer,Document document,Rectangle rect,String text) 
	{
	}
}
 
 
 
 -------------------------
 
 package com.nomura.ccet.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.nomura.ccet.dto.RequestDTO;
import com.nomura.ccet.export.RequestDetailPDFGenerator;
import com.nomura.ccet.services.requests.IRequestsService;
import com.nomura.ccet.util.ApplicationContextProvider;
import com.nomura.ccet.util.CCETUtils;
import com.nomura.ccet.util.DateFormattingUtil;
import com.nomura.export.model.ExportDTO;
import com.nomura.export.model.ExportPDFSettingsDTO;
import com.nomura.export.model.ExportTitleInfo;
import com.nomura.export.model.LogoDetails;
import com.nomura.export.model.NomuraExportPageVO;

/**
 * Servlet implementation class ExportRequestDetails
 */
public class ExportRequestDetails extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	public static final Log logger = LogFactory.getLog(ExportServlet.class);
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ExportRequestDetails() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		exportRequestDetailsList(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		exportRequestDetailsList(request, response);
	}
	
	public void exportRequestDetailsList(HttpServletRequest request, HttpServletResponse response) 
	{
		logger.debug("Method exportRequestDetailsList: Started");
		try 
		{
			IRequestsService requestDetailsService = ApplicationContextProvider.getApplicationContext().getBean("RequestsServiceImpl", IRequestsService.class);
			List<RequestDTO> requestList = new ArrayList<RequestDTO>();
			String requestIDs =request.getParameter("requestIDs");
			String[] arrStrID = requestIDs.split(",");
			if(null != arrStrID && arrStrID.length > 0)
			{
				for(int i = 0;i < arrStrID.length;i++)
				{
				   if(arrStrID[i] != null && !"".equals(arrStrID[i]))
				   {
					   requestList.add(requestDetailsService.getRequestDetails(Integer.parseInt(arrStrID[i])));
				   }
				}
				if(requestList != null && requestList.size() > 0)
				{
					ExportPDFSettingsDTO exportPDFSetting = new ExportPDFSettingsDTO();
					ExportDTO exportDetails = new ExportDTO();
					exportDetails.setExcelSheetName("Sheet1");
					LogoDetails logoDetails = new LogoDetails();
					logoDetails.setPath(getServletContext().getRealPath("/images/corporate-email-signaturegraphic.jpg"));
					logoDetails.setScaleWidthBy(73.0f);
					logoDetails.setScaleHeightBy(70.0f);
					logoDetails.setHeight(40.0f);
					exportPDFSetting.setLogoDetails(logoDetails);
					exportDetails.setExportPDFSetting(exportPDFSetting);
					
					NomuraExportPageVO nomuraExportPage = new NomuraExportPageVO();
					nomuraExportPage.setCompanyTitle("Internal Communications and Events Request ");
					nomuraExportPage.setGeneratedOn(DateFormattingUtil.getFormattedDate(new Date(), DateFormattingUtil.SCREEN_OUTPUT_FORMAT));
					
					exportDetails.setFileName("RequestDetailsListReport.pdf");
					ExportTitleInfo titleInfo =  new ExportTitleInfo();
					String titleText = "Reports";
					titleInfo.setTitleText(titleText);
					exportDetails.setTitleInfo(titleInfo);
					if(requestList.size() > 0)
					{
						response.setContentType("application/pdf");
				        response.setHeader("Content-Disposition", " attachment; filename=\"RequestDetailsListReport.pdf\"");
						List<String> lstCriteria = new ArrayList<String>();
						lstCriteria.add("Total no of Records : " + requestList.size());
						String[] arrCriteria = lstCriteria.toArray(new String[lstCriteria.size()]);
						nomuraExportPage.setSearchCriteria(arrCriteria);
						exportDetails.setNomuraExportPage(nomuraExportPage);
						RequestDetailPDFGenerator pdfGenerator = new RequestDetailPDFGenerator();
						pdfGenerator.renderDocument(requestList,exportDetails,response);
						response.flushBuffer();
					}
					else
					{
						ServletOutputStream servletOutputStream = response.getOutputStream();
						servletOutputStream.print("Empty Result");
						servletOutputStream.flush();
					}
				}
				else
				{
					throw new Exception("Invalid Request ID's.");
				}
			} 
			else
			{
				throw new Exception("Invalid transaction name or employee ID.");
			}
		}
		catch (Exception e) 
		{
			logger.error(e.getMessage(), e);
			//throw new Exception(e.getMessage());
		}
		logger.debug("Method exportRequestDetailsList: End");
	}

}
