import * as React from 'react';
import {ReactPortal} from 'react';
import * as ReactDOM from 'react-dom';

import { NSUtil } from 'nscomputil';

/*import { ChineseWallEditor } from '../../modules/chineseWallAdmin/chineseWallEditor1';

export class PortalComponent extends React.Component<any, any> 
{
    private componentRef: any;
    
    constructor(public props: any, public state: any) 
    {
        super(props, state);
    }
    
    public componentDidMount() 
    {
        console.log(this.componentRef);
    }
    
    render() 
    {
        return (
                <ChineseWallEditor>
                </ChineseWallEditor>
              )
    }
}*/


export default class DynamicComponentService 
{
    private component: any;
    private parent: any;
    private container: any;
    private componentRef: any;
    private statelessComponent: boolean;
    private portal: any;
    private __nsUtil: any;

    constructor(component: any, parent?: any) 
    {
        this.component = component;
        this.parent = parent;
        this.__nsUtil = new NSUtil();
        this.statelessComponent = DynamicComponentService.isStateless(this.component);
    }
    
    public isStatelessComponent(): boolean {
        return this.statelessComponent;
    }

    public getReactComponentName(): string 
    {
        return this.component.name;
    }
    
    public createComponent(callback?: any,params?: any) 
    {
        if(!params)
        {
            params = {};
        }
        const self = this;
        this.container = this.__nsUtil.createDiv(null,"nsGrid-react-container");
        params.container = this.container;
        if (!this.statelessComponent) {
            // grab hold of the actual instance created
            params.ref = function (element) {
                self.componentRef = element;
                //this.addParentContainerStyleAndClasses();
            };
        }
        const component = React.createElement(this.component, params);
        //var portal = ReactDOM.createPortal(component, this.container);
        //this.portal = portal;
        //this.parent.mountReactPortal(portal, this, this.__createCompCallback.bind(this,this,callback));
        if (this.parent) 
        {
            ReactDOM.unstable_renderSubtreeIntoContainer(this.parent, component, this.container, function(this: any) {
                    self.__createCompCallback.call(self,this,callback);
             });
        }
        else
        {
            ReactDOM.render(component, this.container, function(this: any) {
                 self.__createCompCallback.call(self,this,callback);
            });
        }
    }

    public getComponentInstance(): any 
    {
        return this.componentRef;
    }
    
    public getElement(): HTMLElement 
    {
        return this.container;
    }
    
    public statelessComponentRendered(): boolean 
    {
        return this.container.childElementCount > 0 || this.container.childNodes.length > 0;
    }
    
    public destroy(): void 
    {
        //ReactDOM.unmountComponentAtNode(this.container);
        this.parent.destroyPortal(this.portal as ReactPortal);
    }
    
    private __createCompCallback(compRef: any,callback?: any)
    {
        this.componentRef = compRef;
        if(callback)
        {
            callback(this,this.componentRef,this.getElement());
        }
    }
    
    private static hasSymbol() 
    {
        return typeof Symbol === 'function' && Symbol.for;
    }
    
    private static isStateless(component: any) 
    {
        let REACT_MEMO_TYPE = DynamicComponentService.hasSymbol() ? Symbol.for('react.memo') : 0xead3;
        return (typeof component === 'function' &&  !(component.prototype && component.prototype.isReactComponent))
            || (typeof component === 'object' &&  component.$$typeof === REACT_MEMO_TYPE);
    }
    
}


