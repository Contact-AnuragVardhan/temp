var isContainsTempSearch = (!this.__dataSource || this.__dataSource.length == 0) || (this.__lastSearchParam.toLowerCase() !== searchString.substr(0,this.__minSearchStartChars).toLowerCase());

function NSController(item) 
	{
		var self = this;
		var element = null;
		var model = null;
		var util = null;
		var nsBind = null;
		var childController = [];
		
		var initialize = function()
		{
			model = {};
			util = new NSModel(item.event);
		};
		
		var addChildCallbacks = function(arrCallback)
		{
			if(arrCallback)
			{
				childController = arrCallback;
			}
		};
		
		var process = function(argElement)
		{
			element = argElement;
			if(element && item && item.controller)
			{
				item.controller(model,util,item.uid);
				if(childController && childController.length > 0)
				{
					for(var index = 0;index < childController.length;index++)
					{
						var itemChild = childController[index];
						itemChild.controller(model,util,itemChild.uid);
					}
				}
				if(model)
				{
					for(var key in model)
					{
						if(typeof model[key] === "function")
						{
							injectFunction(model,key,model);
						}
					}
				}
				//if(!nsBind)
				//{
				nsBind = new NSBinding(element,model);
				//}
			}
		};
    
    "use strict";
var NSMvc = (function()
{
	function NSMvc(arrRoute,setting) 
	{
		this.util = new NSUtil();
		this.__arrRoute = arrRoute ? arrRoute : [];
		this.__setting = setting;
		this.__mainContainer = null;
		this.__routeContainer = null;
		this.__registeredController = null;
		this.__mapController = {};
		this.__mapPath = {};
		this.__mapIncludes = {};
		this.__nsEvent = null;
		
		this.__routeHandlerRef = null;
		this.__initialize();
	};

	NSMvc.prototype.__initialize = function()
	{
		if(this.__setting)
		{
			this.__nsEvent = new NSEvent();
			this.__registeredController = {};
			this.__mainContainer = this.__setting["mainContainer"] ? this.util.getElement(this.__setting["mainContainer"]) : null;
			if(!this.__mainContainer)
			{
				this.__mainContainer = (document.querySelector("[data-ns-container]") || document.querySelector("[ns-container]"));
			}
			this.__routeContainer = this.__setting["routeContainer"] ? this.util.getElement(this.__setting["routeContainer"]) : null;
			if(!this.__routeContainer)
			{
				this.__routeContainer = (document.querySelector("[data-ns-route-container]") || document.querySelector("[ns-route-container]"));
			}
			if(this.__arrRoute && this.__arrRoute.length > 0)
			{
				this.__routeHandlerRef = this.__routeHandler.bind(this);
				var item = {};
				var length = this.__arrRoute.length;
				for(var count = 0;count < length;count++)
				{
					item = this.__arrRoute[count];
					item["handler"] = this.__routeHandlerRef;
				}
			}
			var ajaxEventHandler = this.__ajaxEventHandler.bind(this);
			this.util.addEvent(window,NSAjax.REQUEST_STARTED,ajaxEventHandler);
			this.util.addEvent(window,NSAjax.ALL_REQUEST_COMPLETED,ajaxEventHandler);
			this.__router = new NSRouter(this.__arrRoute, this.__setting);
			if(this.__mainContainer && this.__setting["mainController"])
			{
				this.__processController.call(this,"__mainContainer",this.__setting["mainController"],this.__mainContainer);
			}
		}
	};
	
	NSMvc.prototype.addController = function(name,callback)
	{
		if(name && callback && this.util.isFunction(callback))
		{
			this.__registeredController[name] = callback;
		}
	};

	NSMvc.prototype.addRoute = function(item)
	{
		if(item)
		{
			item["handler"] = this.__routeHandlerRef;
			this.__router.addRoute(item);
		}
	};

	NSMvc.prototype.removeRoute = function(param) 
	{
		this.__router.removeRoute(param);
	};

	NSMvc.prototype.reset = function()
	{
		this.__router.reset();
	};

	NSMvc.prototype.getCurrentRoute = function() 
	{
		return this.__router.getCurrentRoute();
	};

	NSMvc.prototype.callRoute = function(route)
	{
		this.__router.callRoute(route);
	};

	NSMvc.prototype.routeTo = function(route) 
	{
		this.__router.routeTo(route);
	};

	NSMvc.prototype.__routeHandler = function(item) 
	{
		if(item)
		{
			var self = this;
			var route = item["route"];
			var childElement = null;
			var process = function()
			{
				self.__routeContainer.innerHTML = "";
				if(childElement)
				{
					self.__routeContainer.appendChild(childElement);
				}
				self.__processController.call(self,route,item["controller"],childElement);
				self.__nsEvent.dispatch(NSMvc.ROUTE_CHNAGED,item);
			};
			if(this.__routeContainer)
			{
				if(item["templateUrl"])
				{
					var templateLoadHandler = function(templateText)
					{
						if(templateText)
						{
							childElement = self.__getElementFromText(templateText);
							process();
						}
						else
						{
							console.error(item["templateUrl"] + " was not loaded.Please check the URL");
						}
					};
					var templateErrorHandler = function(errorText)
					{
						console.error(item["templateUrl"] + " was not loaded.Please check the URL");
					};
					this.util.getTemplateFromURL(item["templateUrl"],templateLoadHandler,templateErrorHandler);
				}
				if(item["templateId"])
				{
					var template = this.util.getTemplate(item["templateId"]);
					if(template)
					{
						childElement = template.cloneNode(true);
						process();
					}
				}
				else if(item["template"])
				{
					childElement = this.__getElementFromText(item["template"]);
					process();
				}
			}
		}
	};
	
	NSMvc.prototype.__getElementMap = function(element,arrController,level,parentID,callback)
	{
		if(element && element.querySelectorAll)
		{
			var arrInclude = element.querySelectorAll("ns-include");
			if(arrInclude && arrInclude.length > 0)
			{
				for(var index = 0;index < arrInclude.length;index++)
				{
					var nsInclude = arrInclude[index];
					var url = nsInclude.getAttribute("url");
					var uid = this.__generateUUID();
					var item = {url: url,nsInclude: nsInclude,parent: element,parentID: parentID,level: level,status: "pending",uid: uid};
					this.__mapIncludes[uid] = item;
					if(this.__mapPath[url])
					{
						var childElement = this.__mapPath[url];
						this.__processAfterElement(item,childElement,arrController,callback);
						this.__getElementMap(childElement,arrController,level + 1,uid,callback);
					}
				}
			}
			this.__processMap(arrController,callback);
		}
	};
	
	NSMvc.prototype.__processMap = function(arrController,callback)
	{
		for(var key in this.__mapIncludes)
		{
			var item = this.__mapIncludes[key];
			this.__processInclude(item,arrController,callback);
		}
	};
	
	NSMvc.prototype.__processInclude = function(item,arrController,callback)
	{
		var self = this;
		if(item.status == "pending")
		{
			item.status = "processing";
			self.util.getTemplateFromURL(item.url,function(templateText)
			{
				if(templateText)
				{
					var childElement = self.__getElementFromText(templateText);
					self.__processAfterElement.call(self,item,childElement,arrController,callback);
				}
				else
				{
					console.warn(url + " was not loaded.Please check the URL");
					self.__processAfterElement.call(self,item,null,arrController,callback);
				}
			},function(errorText){
				console.warn(url + " was not loaded with details " + errorText);
				self.__processAfterElement.call(self,item,null,arrController,callback);
			});
		}
	};
	
	NSMvc.prototype.__processAfterElement = function(item,childElement,arrController,callback)
	{
		if(childElement)
		{
			if(!this.__mapPath[item.url])
			{
				this.__mapPath[item.url] = childElement;
			}
			childElement = childElement.cloneNode(true);
			//if(item.nsInclude.parentElement === item.parent)
			//{
				//item.parent.replaceChild(childElement,item.nsInclude);
			item.nsInclude.parentElement.replaceChild(childElement,item.nsInclude);
			//}
			item.element = childElement;
			var controllerName = item.nsInclude.getAttribute("controller");
			var controller = null;
			if(controllerName)
			{
				controller = this.__registeredController[controllerName];
				arrController.push({controller: controller,uid: item.uid});
			}
			this.__getElementMap(childElement,arrController,item.level + 1,item.uid,callback);
		}
		else
		{
			item.parent.removeChild(item.nsInclude);
		}
		item.status = "completed";
		if(this.__isAllIncludesProcessed())
		{
			callback();
		}
	};
	
	NSMvc.prototype.__isAllIncludesProcessed = function()
	{
		for(var key in this.__mapIncludes)
		{
			var item = this.__mapIncludes[key];
			if(item.status != "completed")
			{
				return false;
			}
		}
		return true;
	};

	NSMvc.prototype.__processController = function(controllerName,controller,childElement)
	{
		var interval = null;
		var process = function()
		{
			if(!self.__mapController[controllerName] && controller)
			{
				var uid = self.__generateUUID();
				self.__mapController[controllerName] = new NSController({controller: controller,uid: uid,event: self.__nsEvent}); 
			}
			if(self.__mapController[controllerName])
			{
				self.__mapController[controllerName].addChildCallbacks(arrCallbacks);
				self.__mapController[controllerName].process(childElement);
			}
		};
		var checkIfElementAdded = function()
		{
			interval = setInterval(function(){
				if(childElement.parentElement)
				{
					clearInterval(interval);
					interval = null;
					process();
				}
			}, 300);
		};
		var self = this;
		if(self.util.isString(controller))
		{
			controller = self.__registeredController[controllerName];
		}
		this.__mapIncludes = {};
		var arrCallbacks = [];
		this.__getElementMap(childElement,arrCallbacks,0,null,checkIfElementAdded);
		//this.__processElement(childElement,arrCallbacks,0,
	};
	
	NSMvc.prototype.__ajaxEventHandler = function(event)
	{
		if(event.type == NSAjax.REQUEST_STARTED)
		{
			this.__nsEvent.dispatch(NSMvc.AJAX_START,NSMvc.AJAX_START);
		}
		else if(event.type == NSAjax.ALL_REQUEST_COMPLETED)
		{
			this.__nsEvent.dispatch(NSMvc.AJAX_DONE,NSMvc.AJAX_DONE);
		}
	};

	NSMvc.prototype.__getElementFromText = function(htmlText)
	{
		if(htmlText)
		{
			var div = document.createElement("div");
			div.innerHTML = htmlText;
			if(div["childNodes"] && div["childNodes"].length > 1)
			{
				return div;
			}
			return div.firstChild;
		}
		return null;
	};
	
	//https://jsfiddle.net/xg7tek9j/460/
	NSMvc.prototype.__generateUUID = function() 
	{
	    var d = new Date().getTime();
	    if(Date.now)
	    {
	        d = Date.now(); 
	    }
	    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	        var r = (d + Math.random()*16)%16 | 0;
	        d = Math.floor(d/16);
	        return (c=='x' ? r : (r&0x3|0x8)).toString(16);
	    });
	    return uuid;
	};
	
	NSMvc.ROUTE_CHNAGED = "routeChanged";
	NSMvc.AJAX_START = "ajaxStart";
	NSMvc.AJAX_DONE = "ajaxDone";
	
	return NSMvc;
})();
nsModuleExport(this,"NSMvc",NSMvc);

"use strict";
var NSAjax = (function()
{
	function NSAjax() 
	{
		var self = this;
		var activeReq = 0;
		
		var post = function(url,data,setting)
		{
			return processRequest(getSetting("POST",url,data,setting));
		};
		
		var get = function(url,data)
		{
			return processRequest(getSetting("GET",url,data,setting));
		};
		
		var jsonp = function(url,data,setting)
		{
			setting = setting ? setting : {};
			setting.dataType = "JSONP";
			setting.url = url;
			setting.param = data;
			processRequest(setting);
		};
		
		var getSetting = function(method,url,data,setting)
		{
			setting = setting ? setting : {};
			setting.method = "POST";
			setting.url = url;
			setting.param = data;
			setting.dataType = setting.dataType ? setting.dataType : "JSON";
			
			return setting;
		};
		
		var processRequest = function(setting)
		{
			var config = null;
			var request = null;
			var requestDone = false;
			var resolve = null;
			var reject = null;
			
			var functionNameInitials = "nsjsonp";
			var instanceNameInitials = "nsjsonpIns";
			var random = -1;
			var util = null;
			
			var onInit = function()
			{
				if(!setting)
				{
					return;
				}
				util = new NSUtil();
				config = {
						method: setting["method"] || "POST",
						url: setting["url"] || "",
						param: setting["param"] || {},
						dataType: setting["dataType"] || "",
						completeHandler: setting["completeHandler"],
						timeOutHandler: setting["timeOutHandler"],
						//if browser supports W3C Events then the below function will fire
						loadStartHandler: setting["loadStartHandler"],
						progressHandler: setting["progressHandler"],
						abortHandler: setting["abortHandler"],
						//end of browser supports W3C Events then the below function will fire
						timeout: setting.timeout || -1,
						header: setting["header"]
				};
			};
			
			var getPromise = function()
			{
				if(config)
				{
					handleActiveReq(true);
					var objPromise = (config.dataType.toUpperCase() === "JSONP") ? handleJSONP() : handleNonJSNOPRequest();
					return objPromise;
				}
				return null;
			};
			
			var handleJSONP = function()
			{
				var objPromise = new Promise(function(parResolve,parReject)
				{
					resolve = parResolve;
					reject = parReject;
					if(random === -1)
					{
						random = util.getUniqueId();
					}
					var functionName = functionNameInitials + random;
					var instanceName = instanceNameInitials + random;
					//window[instanceName] = this;
					window[functionName] = function(json){
						defaultSuccessHandler(json);
					};
					var url = config.url + "?callback=" + functionName;
					var strParam = getParam();
					if(strParam && strParam != "")
					{
						url += "&" + strParam;
					}
					createScript(url);
				});
				return objPromise;
			};
			
			var createScript = function(url)
			{
		        var domPosition = document.getElementsByTagName("body")[0];
		        var script = document.createElement("script");
		        script.async = true;
		        script.setAttribute("id", url);
		        script.setAttribute("type","text/javascript");
		        script.setAttribute("src",url);
		        script.onload = script.onreadystatechange = function()
		        {
		        	if (!script.readyState || /loaded|complete/.test(script.readyState)) 
		        	{
						script.onload = script.onreadystatechange = null;
						if (script.parentNode) 
						{
							script.parentNode.removeChild(script);
						}
						script = null;
					}
		        }; 
		        domPosition.appendChild(script);
			};
			
			var handleNonJSNOPRequest = function()
			{
				var objPromise = new Promise(function(parResolve,parReject)
				{
					resolve = parResolve;
					reject = parReject;
					if(config.timeout > 0)
					{
						window.setTimeout(function() 
						{
							requestDone = true;
						}, config.timeout);
					}
					request = getRequest();
					if(request) 
					{
						var strParam = getParam();
						if (config.method.toUpperCase() === "POST") 
						{
							request.open("POST",config.url, true);
							if(config.header)
							{
								for(var key in config.header)
								{
									request.setRequestHeader(key,config.header[key]);
								}
							}
							else if(config.dataType && config.dataType.toUpperCase() === "JSON")
							{
								request.setRequestHeader("Content-type", "application/json");
							}
							else 
							{
								request.setRequestHeader("Content-type","application/x-www-form-urlencoded;charset=UTF-8");
							}
						}
						else 
						{
							var url = config.url;
							if(strParam && strParam != "")
							{
								url += "?" + strParam;
								//so that send method sends as null for GET
								strParam = null;
							}
							request.open("GET",url, true);
						}
						//Browser supports W3C Events
						if("onloadstart" in request)
						{
							request.onloadstart = loadStartHandler;
							request.onprogress = progressHandler;
							request.onabort = abortHandler;
							request.onerror = errorHandler;
							request.onload = loadHandler;
							request.ontimeout = timeOutHandler;
							request.onloadend = loadEndHandler;
						}
						else
						{
							request.onreadystatechange = stateChange;
						}
						request.send(strParam);
					}
		   		});
				return objPromise;
			};
			
			var getRequest = function() 
			{
				if (window.XMLHttpRequest)
				{
					return new XMLHttpRequest();
				}
				else
				{
					var versions = ["Microsoft", "msxm3", "msxml2", "msxml1"];
	                for (var count = 0;count < versions.length; count++) 
	                {
	                    try 
	                    {
	                        var version = versions[count] + ".XMLHTTP";
	                        return new ActiveXObject(version);
	                    } 
	                    catch (error) 
	                    {
	                    }
	                }
				}
				return null;
			};
			
			var getParam = function()
			{
				var strParam = "";
				var param = config.param;
				if(util.isString(param))
				{
					strParam = param;
				}
				else
				{
					for(var paramKey in param)
					{
						if(param[paramKey])
						{
							strParam += "&" + paramKey + "=" + param[paramKey];
						}
					}
					if(strParam && strParam.length > 1)
					{
						strParam = strParam.substring(1);
					}
				}
				return strParam;
			};
			
			var stateChange = function (object) 
			{
				if (request.readyState === 4 && !requestDone)
				{
					var data = getResponseData();
					if (isRequestSuccess()) 
					{
						defaultSuccessHandler(data);
					}
					else 
					{
						defaultErrorHandler(data);
					}
					defaultCompleteHandler();
					request = null;
				}
				else if (request.readyState != 4 && requestDone) 
				{
					if(config["timeOutHandler"])
					{
						config["timeOutHandler"]();
					}
					request.onreadystatechange = null;
				}
			};
			
			var isRequestSuccess = function()
			{
				var retValue = false;
				//if requesting a local resource
				if(!request.status && location.protocol == "file:")
				{
					retValue = true;
				}
				// Any status in the 200 range is good
				else if (request.status >= 200 && request.status < 300)
				{
					retValue = true;
				}
				//Successful if the document has not been modified and Safari returns an empty status if the file has not been modified
				else if(request.status == 304 || (navigator.userAgent.indexOf("Safari") >= 0 && typeof request.status == "undefined"))
				{
					retValue = true;
				}
				return retValue;
			};
			
			var getResponseData = function()
			{
				var contentType = request.getResponseHeader("content-type");
				var data = null;
				if(contentType && contentType.indexOf("json") > -1)
				{
					data = JSON.parse(request.response);
				}
				else 
				{
					var isXMLData = false;
					var dataType = requestDone.dataType;
					if(!dataType && contentType && contentType.indexOf("xml") > -1)
					{
						isXMLData = true;
					}
					if(isXMLData || (dataType && dataType.indexOf("xml") > -1))
					{
						data = request.responseXML;
					}
					else
					{
						data = request.responseText;
					}
					// If the specified type is "script", execute the returned text response as if it was JavaScript
					if (dataType == "script") 
					{
						eval.call(window, data);
					}
				}
				return data;
			};
			
			var loadStartHandler = function(event)
			{
				if(config["loadStartHandler"])
				{
					config["loadStartHandler"]();
				}
			};
		
			var progressHandler = function(event)
			{
				if(config["progressHandler"])
				{
					if (event.lengthComputable) 
					{
						config["progressHandler"](event.loaded,event.total);
					}
					else
					{
						config["progressHandler"](event.loaded,-1);
					}
				}
			};
		
			var abortHandler = function(event)
			{
				if(config["abortHandler"])
				{
					config["abortHandler"](event);
				}
				defaultErrorHandler(event);
			};
		
			var errorHandler = function(event)
			{
				var data = getResponseData(event);
				defaultErrorHandler(event);
			};
		
			var loadHandler = function(event)
			{
				var data = getResponseData();
				defaultSuccessHandler(data);
			};
		
			var timeOutHandler = function(event)
			{
				if(config["timeOutHandler"])
				{
					config["timeOutHandler"](event);
				}
				defaultErrorHandler(event);
			};
		
			var loadEndHandler = function(event)
			{
				defaultCompleteHandler();
			};
			
			var defaultSuccessHandler = function(response)
			{
				if(config.dataType === "jsonp")
				{
					 var functionName = functionNameInitials + random;
					 var instanceName = instanceNameInitials + random;
					 if(window[instanceName])
					 {
						 window[instanceName] = null;
					 }
					 if(window[functionName])
					 {
						 window[functionName] = null;
					 }
				}
				if(resolve)
				{
					resolve(response);
					resolve = null;
					handleActiveReq(false);
				}
			};
		
			var defaultErrorHandler = function(response)
			{
				if(reject)
				{
					reject(response);
					reject = null;
					handleActiveReq(false);
				}
			};
		
			var defaultCompleteHandler = function()
			{
				if(config.completeHandler)
				{
					config.completeHandler();
				}
				defaultSuccessHandler(null);
			};
			
			onInit();
			return getPromise();
		};
		
		var handleActiveReq = function(add)
		{
			var util = new NSUtil();
			if(add)
			{
				activeReq++;
				if(activeReq == 1)
				{
					util.dispatchEvent(window,NSAjax.REQUEST_STARTED);
				}
			}
			else
			{
				activeReq--;
				if(activeReq == 0)
				{
					util.dispatchEvent(window,NSAjax.ALL_REQUEST_COMPLETED);
				}
			}
		};
		
		self.post = post;
		self.get = get;
		self.jsonp = jsonp;
		self.processRequest = processRequest;
	};
	NSAjax.REQUEST_STARTED = "requestStarted";
	NSAjax.ALL_REQUEST_COMPLETED = "allRequestCompleted";
	return NSAjax;
})();
nsModuleExport(this,"NSAjax",NSAjax);
