	this.__setYearDropdown(year);
	this.__setYearDropdown(monthDate.getFullYear());
	item.date = new Date(date.getTime());
	//dont fire event as it is just to update the cell
					this.__setCellSelection(dateToSet,cell,false);
	
	//IE issue 
	NSCalendar.prototype.__setYearDropdown = function(year)
	{
		//this.__cmbYear.selectedIndex = this.__cmbYear.querySelector('option[value="'+ monthDate.getFullYear() +'"]').index;
		this.__cmbYear.querySelector('option[value="'+ year +'"]').selected = "selected";
	};
	
	,item[this.__childField],item[this.__objGrid.__childrenCountField]
	 this.__objAdvancedFilterSetting = {};
	 
	 NSGroupingGrid.prototype.__initialize = function ()
{
	var setGroupColumn = false;
	if(this.__nsGrid.hasAttribute("isSingleLevelGrouping"))
	{
		this.__isSingleLevelMode =  Boolean.parse(this.__nsGrid.getAttribute("isSingleLevelGrouping"));
	}
	if(this.__nsGrid.hasAttribute("multiLevelGroupColumn"))
	{
		this.__multiLevelGroupColumn = this.__nsGrid.getAttribute("multiLevelGroupColumn");
		if(this.__multiLevelGroupColumn)
		{
			this.__multiLevelGroupColumn.dataField = this.__nsGrid.getID() + "_group_field";
			if(!this.__multiLevelGroupColumn.groupRenderer)
			{
				this.__multiLevelGroupColumn.groupRenderer = this.__groupTextRenderer.bind(this);
			}
		}
		else
		{
			setGroupColumn = true;
		}
	}
	else
	{
		setGroupColumn = true;
	}
	if(setGroupColumn)
	{
		this.__multiLevelGroupColumn = {headerText:"Group",dataField:this.__nsGrid.getID() + "_group_field",width:"100px",enableFilter:true,groupRenderer:this.__groupTextRenderer.bind(this)};
	}
};

NSGroupingGrid.prototype.__groupTextRenderer = function(data,dataField,rowIndex,columnIndex,row,arrChildren,childrenCount)
{
	if(data && data.hasOwnProperty(dataField))
	{
		var innerHTML = "<span>" + data[dataField];
		if(childrenCount)
		{
			innerHTML += " &#40;" + childrenCount + "&#41;";
		}
		innerHTML += "</span>";
		return innerHTML;
	}
	return "";
};

if (!String.prototype.startsWith) 
{
	  String.prototype.startsWith = function(searchString, position) 
	  {
	    position = position || 0;
	    return this.indexOf(searchString, position) === position;
	  };
}

this.KEYCODE = {BACKSPACE:8, TAB:9, ENTER:13, SHIFT:16, CTRL:17, ALT:18, ESC:27,SPACE:32,PAGEUP:33,PAGEDOWN:34,LEFT:37,UP:38,RIGHT:39,DOWN:40,INSERT:45,DELETE:46};
	
