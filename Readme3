var NSEditor = (function()
{
	function NSEditor(component,setting) 
	{
		this.__orignalTextArea = component;
		this.__setting = setting;
		
		this.__context = window;
		
		this.editorUtil = null;
		this.__config = null;
		this.__divOuterContainer = null;
		this.__divToolBarContainer = null;
		this.__divTabContainer = null;
		this.__divBodyContainer = null;
		this.__divFooterContainer = null;
		this.__divFooterLeftContainer = null;
		this.__divFooterRightContainer = null;
		this.__divLineNumberContainer = null;
		this.__divTextAreaContainer = null;
		this.__compTextArea = null;
		this.__divLineNumberWrapper = null;
		this.__frameContentWindow = null;
		this.__frameContentDoc = null;
		this.__frameBody = null;
		this.__txtSourceCode = null;
		this.__compPlaceHolder = null;
		this.__iframePrint = null;
		
		this.__textAreaScrollRef = null;
		this.__textAreaResizeRef = null;
		this.__textAreaKeyUpRef = null;
		this.__textAreaKeyDownRef = null;
		
		this.__textAreaObserver = null; 
		this.__orignalTextAreaObserver = null; 
		this.__timeOutInterval = null;
		this.__lastTextAreaHeight = 0; 
		this.__lastTextAreaWidth = 0;
		this.__paddingHorizontal = 0;
		this.__browserDetail = null;
		this.__toolBarButton = null;
		this.__isDisabled = false;
		this.__isFrameDesignModeEnabled = false;
		this.__nsToolTipInElement = null;
		this.__editorDropDown = null;
		this.__selectedRange = null;
		this.__isSourceMode = false;
		this.__isInternalHTMLChange = false;
		//this.__defaultContent = "<p class='nsEditorLineElement'><br></p>";
		this.__defaultContent = null;
		
		this.__pluginsInstances = {};
		
		this.__windowClickRef = null;
		
		this.__init();
		
		this.base.__setBaseComponent.call(this,this.__divOuterContainer);
	};
	nsExtendPrototype(NSContainerBase,NSEditor);
	NSEditor.prototype.constructor = NSEditor;
	
	NSEditor.prototype.initializeComponent = function() 
	{
		this.base.initializeComponent.call(this);
		this.editorUtil = new editorUtil(this);
		this.__browserDetail = this.util.getBrowser();
		this.__toolBarButton = {"bold":{html:"<i class='fa fa-bold' aria-hidden='true'></i>",tooltip:"Bold",tags: ["b", "strong"],css: {fontWeight: "bold"},hotkey: {"ctrl": 1, "key": 66},command:"bold",showAsMenu: true},
				   "italic":{html:"<i class='fa fa-italic' aria-hidden='true'></i>",tooltip:"Italic",tags: ["i", "em"],css: {fontStyle: "italic"},hotkey: {"ctrl": 1, "key": 73},command:"italic",showAsMenu: true},
				   "underline":{html:"<i class='fa fa-underline' aria-hidden='true'></i>",tooltip:"Underline",tags: ["u"],css: {textDecoration: "underline"},hotkey: {"ctrl": 1, "key": 85},command:"underline",showAsMenu: true},
				   "strikeThrough":{html:"<i class='fa fa-strikethrough' aria-hidden='true'></i>",tooltip:"Strikethrough",tags: ["s", "strike"],css: {textDecoration: "line-through"},hotkey: {"ctrl": 1, "key": 83},command:"strikeThrough",showAsMenu: true},
				   "justifyCenter":{html:"<i class='fa fa-align-center' aria-hidden='true'></i>",tooltip:"Justify Center",css: {textAlign: "center"},command:"justifyCenter"},
				   "justifyLeft":{html:"<i class='fa fa-align-left' aria-hidden='true'></i>",tooltip:"Justify Left",css: {textAlign: "left"},command:"justifyLeft"},
				   "justifyRight":{html:"<i class='fa fa-align-right' aria-hidden='true'></i>",tooltip:"Justify Right",css: {textAlign: "right"},command:"justifyRight"},
				   "justifyFull":{html:"<i class='fa fa-align-justify' aria-hidden='true'></i>",tooltip:"Justify Full",tags: ["s", "strike"],css: {textAlign: "justify"},command:"justifyFull"},
				   "subscript":{html:"<i class='fa fa-subscript' aria-hidden='true'></i>",tooltip:"Subscript",tags: ["sub"],command:"subscript",showAsMenu: true},
				   "superscript":{html:"<i class='fa fa-superscript' aria-hidden='true'></i>",tooltip:"Superscript",tags: ["sup"],command:"superscript",showAsMenu: true},
				  
				   "paragraph":{html:"<p>Normal</p>",tooltip:"Paragraph",command: "FormatBlock",
						   		    "arguments": (this.__browserDetail.isMSIE || this.__browserDetail.isSafari) ? "<p>" : "p",tags:["p"]},
				   "header1":{html:"<h1>Heading 1</h1>",tooltip:"Header 1",
					   				 command: "FormatBlock",
							   		 "arguments": "<h1>",tags: ["h1"]},
			   	   "header2":{html:"<h2>Heading 2</h2>",tooltip:"Header 2",
			   		   		  command: "FormatBlock",
		   				 	  "arguments": "<h2>",tags: ["h2"]},
				   "header3":{html:"<h3>Heading 3</h3>",tooltip:"Header 3",
					   		  command: "FormatBlock",
							  "arguments": "<h3>",tags: ["h3"]},
				   "header4":{html:"<h4>Heading 4</h4>",tooltip:"Header 4",
					   		  command: "FormatBlock",
			   		  		 "arguments": "<h4>",tags: ["h4"]},
				   "orderedList":{html:"<i class='fa fa-list-ol' aria-hidden='true'></i>",tooltip:"Ordered List",command:"insertorderedlist",showAsMenu: true},
				   "unorderedList":{html:"<i class='fa fa-list-ul' aria-hidden='true'></i>",tooltip:"Unordered List",command:"insertunorderedlist",showAsMenu: true},
				   "undo":{html:"<i class='fa fa-rotate-left' aria-hidden='true'></i>",tooltip:"Undo",command:"undo",showAsMenu: true},
				   "redo":{html:"<i class='fa fa-rotate-right' aria-hidden='true'></i>",tooltip:"Redo",command:"redo",showAsMenu: true},
				   "outdent":{html:"<i class='fa fa-outdent' aria-hidden='true'></i>",tooltip:"Decrease Indent",command:"outdent",showAsMenu: true},
				   "indent":{html:"<i class='fa fa-indent' aria-hidden='true'></i>",tooltip:"Increase Indent",command:"indent",showAsMenu: true},
				   "viewSourceCode":{html:"<i class='fa fa-code' aria-hidden='true'></i>",tooltip:"View Source Code",click: this.__viewSourceCodeHandler.bind(this),showAsMenu: true},
				   "print":{html:"<i class='fa fa-print' aria-hidden='true'></i>",tooltip:"Print",click: this.__printHandler.bind(this),showAsMenu: true},
				   "pageBreakForPrinting":{html:"<i class='fa fa-bookmark' aria-hidden='true'></i>",tooltip:"Insert Page Break for Printing",click: this.__pageBreakForPrintingHandler.bind(this),showAsMenu: true},
				   "horizontalRule":{html:"<i class='fa fa-minus' aria-hidden='true'></i>",tooltip:"Insert Horizontal Line",command:"insertHorizontalRule",tags:["hr"],showAsMenu: true},
				   "fontFamily":{html:"<i class='fa fa-font' aria-hidden='true'></i>",tooltip:"Font Family",showAsMenu: true,
			   			isDropdown:true,
			   			dataSource:[{value:"Arial",html:"<span style=\"font-family: Arial\">Arial</span>",tooltip:"Arial",command:"fontName","arguments":"Arial"},
			   			            {value:"Arial Black",html:"<span style=\"font-family: Arial Black\">Arial Black</span>",tooltip:"Arial Black",command:"fontName","arguments":"Arial Black"},
			   			            {value:"Courier",html:"<span style=\"font-family: Courier\">Courier</span>",tooltip:"Courier",command:"fontName","arguments":"Courier"},
			   			            {value:"Courier New",html:"<span style=\"font-family: Courier New\">Courier New</span>",tooltip:"Courier New",command:"fontName","arguments":"Courier New"},
			   			            {value:"Comic Sans MS",html:"<span style=\"font-family: Comic Sans MS\">Comic Sans MS</span>",tooltip:"Comic Sans MS",command:"fontName","arguments":"Comic Sans MS"},
			   			            {value:"Courier",html:"<span style=\"font-family: Courier\">Courier</span>",tooltip:"Courier",command:"fontName","arguments":"Courier"},
			   			            {value:"Georgia",html:"<span style=\"font-family: Georgia\">Georgia</span>",tooltip:"Georgia",command:"fontName","arguments":"Georgia"},
			   			            {value:"Impact",html:"<span style=\"font-family: Impact\">Impact</span>",tooltip:"Impact",command:"fontName","arguments":"Impact"},
			   			            {value:"Lucida Grande",html:"<span style=\"font-family: Lucida Grande\">Lucida Grande</span>",tooltip:"Lucida Grande",command:"fontName","arguments":"Lucida Grande"},
			   			            {value:"Lucida Sans",html:"<span style=\"font-family: Lucida Sans\">Lucida Sans</span>",tooltip:"Lucida Sans",command:"fontName","arguments":"Lucida Sans"},
			   			            {value:"Serif",html:"<span style=\"font-family: Serif\">Serif</span>",tooltip:"Serif",command:"fontName","arguments":"Serif"},
			   			            {value:"Sans",html:"<span style=\"font-family: Sans\">Sans</span>",tooltip:"Sans",command:"fontName","arguments":"Sans"},
			   			            {value:"Tahoma",html:"<span style=\"font-family: Tahoma\">Tahoma</span>",tooltip:"Tahoma",command:"fontName","arguments":"Tahoma"},
			   			            {value:"Times",html:"<span style=\"font-family: Times\">Times</span>",tooltip:"Times",command:"fontName","arguments":"Times"},
			   			            {value:"Times New Roman",html:"<span style=\"font-family: Times New Roman\">Times New Roman</span>",tooltip:"Times New Roman",command:"fontName","arguments":"Times New Roman"},
			   			            {value:"Verdana",html:"<span style=\"font-family: Verdana\">Verdana</span>",tooltip:"Verdana",command:"fontName","arguments":"Verdana"}]},
				   "fontSize":{html:"<i class='fa fa-text-height' aria-hidden='true'></i>",tooltip:"Font Size",showAsMenu: true,
					   		    isDropdown:true,dataSource:[]},
				   "paragraphFormat":{html:"<i class='fa fa-paragraph' aria-hidden='true'></i>",tooltip:"Paragraph Format",showAsMenu: true,
					   			isDropdown:true,
					   			dataSource:[{value:"paragraph",htmlKey:"paragraph"},
					   			            {value:"header1",htmlKey:"header1"},
					   			            {value:"header2",htmlKey:"header2"},
					   			            {value:"header3",htmlKey:"header3"},
					   			            {value:"header4",htmlKey:"header4"}]},
 			       "align":{html:"<i class='fa fa-align-left' aria-hidden='true'></i>",tooltip:"Align",showAsMenu: true,
	 			    	  		isDropdown:true,
	 			    	  		dataSource:[{value:"justifyCenter",htmlKey:"justifyCenter"},
	 			    	  		            {value:"justifyLeft",htmlKey:"justifyLeft"},
	 			    	  		            {value:"justifyRight",htmlKey:"justifyRight"},
	 			    	  		            {value:"justifyFull",htmlKey:"justifyFull"}]},
	 		       "color":{html:"<i class='fa fa-paint-brush' aria-hidden='true'></i>",tooltip:"Font Color",showAsMenu: true,
	 						   isDropdown:true,dataSource:[]},
	 			   "backgroundColor":{html:"<i class='fa fa-magic' aria-hidden='true'></i>",tooltip:"Background Color",showAsMenu: true,
		 					   isDropdown:true,dataSource:[]},
				 };
		//the browser doesnot allow font size > 7
		var arrFontSize = [{label:"xx-large",style:"xx-large",value:7},
		                   {label:"x-large",style:"x-large",value:6},
		                   {label:"large",style:"large",value:5},
		                   {label:"medium",style:"medium",value:4},
		                   {label:"small",style:"small",value:3},
		                   {label:"x-small",style:"x-small",value:2},
		                   {label:"xx-small",style:"xx-small",value:1}];
		var fontDataSource = [];
		for(var count = 0;count < arrFontSize.length;count++)
		{
			var item = arrFontSize[count];
			fontDataSource.push({value:item.label,html:"<span style=\"font-size: " + item.style + "\">" + item.label + "</span>",command:"fontsize","arguments":item.value});
		}
		this.__toolBarButton["fontSize"].dataSource = fontDataSource;
		var arrForeColor = [{label:"#000000",style:"#000000",value:"#000000"},
		                    {label:"#0000FF",style:"#0000FF",value:"#0000FF"},
							{label:"#30AD23",style:"#30AD23",value:"#30AD23"},
							{label:"#FF7F00",style:"#FF7F00",value:"#FF7F00"},
							{label:"#FF0000",style:"#FF0000",value:"#FF0000"},
							{label:"#FFFF00",style:"#FFFF00",value:"#FFFF00"},
							{label:"#FFFFFF",style:"#FFFFFF",value:"#FFFFFF"}];
		var foreColorDataSource = [];
		for(var count = 0;count < arrForeColor.length;count++)
		{
			var item = arrForeColor[count];
			foreColorDataSource.push({value:item.label,html:"<span style=\"color: " + item.style + "\">" + item.label + "</span>",command:"forecolor","arguments":item.value});
		}
		this.__toolBarButton["color"].dataSource = foreColorDataSource;
		var arrBackColor = [{label:"#000000",style:"#000000",value:"#000000"},
		                    {label:"#0000FF",style:"#0000FF",value:"#0000FF"},
							{label:"#30AD23",style:"#30AD23",value:"#30AD23"},
							{label:"#FF7F00",style:"#FF7F00",value:"#FF7F00"},
							{label:"#FF0000",style:"#FF0000",value:"#FF0000"},
							{label:"#FFFF00",style:"#FFFF00",value:"#FFFF00"},
							{label:"#FFFFFF",style:"#FFFFFF",value:"#FFFFFF"}];
		var backColorDataSource = [];
		for(var count = 0;count < arrBackColor.length;count++)
		{
			var item = arrBackColor[count];
			backColorDataSource.push({value:item.label,html:"<span style=\"color: " + item.style + "\">" + item.label + "</span>",command:"backcolor","arguments":item.value});
		}
		this.__toolBarButton["backgroundColor"].dataSource = backColorDataSource;
		this.__initializePlugins();
		this.__setSetting();
		this.__initDefault();
		this.__initializeTools();
		this.__callInitializeInPluggin();
		this.__createComponent();
	};
	
	NSEditor.prototype.setComponentProperties = function() 
	{
		this.base.setComponentProperties.call(this);
	};
	
	NSEditor.prototype.propertyChange = function(attrName, oldVal, newVal, setProperty)
	{
		var attributeName = attrName.toLowerCase();
		this.base.propertyChange.call(this,attrName, oldVal, newVal, setProperty);
	};
	
	NSEditor.prototype.removeComponent = function() 
	{
		this.__callDestroyInPluggin();
		var listenerComponent = this.__isModeTextArea() ? this.__compTextArea : this.__frameContentWindow;
		if(this.__textAreaScrollRef)
		{
			var element = this.__getScrollableComponent();
			this.util.removeEvent(element,"scroll",this.__textAreaScrollRef);
			this.__textAreaScrollRef = null;
		}
		if(this.__textAreaResizeRef)
		{
			this.util.removeEvent(listenerComponent,"resize",this.__textAreaResizeRef);
			this.__textAreaResizeRef = null;
		}
		if(this.__textAreaKeyUpRef)
		{
			this.util.removeEvent(listenerComponent,"keyup",this.__textAreaKeyUpRef);
			this.__textAreaKeyUpRef = null;
		}
		if(this.__textAreaKeyDownRef)
		{
			this.util.removeEvent(listenerComponent,"keydown",this.__textAreaKeyDownRef);
			this.__textAreaKeyDownRef = null;
		}
		if(this.__windowClickRef)
		{
			this.util.removeEvent(window,"click",this.__windowClickRef);
			this.__windowClickRef = null;
		}
		if(this.__orignalTextAreaObserver)
		{
			this.__orignalTextAreaObserver.disconnect();
			this.__orignalTextAreaObserver = null;
		}
		if(this.__divOuterContainer)
		{
			if(this.__divOuterContainer.parentNode)
			{
				this.__divOuterContainer.parentNode.removeChild(this.__divOuterContainer);
			}
			this.__divOuterContainer = null;
		}
		if(this.__orignalTextArea)
		{
			this.util.removeStyleClass(this.__orignalTextArea,"nsEditorTextAreaHidden");
		}
		if(this.__iframePrint)
		{
			document.removeChild(this.__iframePrint);
		}
		
		this.base.removeComponent.call(this);
	};
	
	NSEditor.prototype.componentResized = function(event) 
	{
		this.__callResizedInPluggin([event]);
		this.base.componentResized.call(this,event);
	};
	
	NSEditor.prototype.registerPlugin = function(name,pluggin) 
	{
		if(name && pluggin)
		{
			if(!NSEditor.__plugins)
			{
				NSEditor.__plugins = {};
			}
			if(!NSEditor.__plugins[name])
			{
				NSEditor.__plugins[name] = pluggin;
			}
		}
	};
	
	//if setting["enableLineNumber"] is true then the components for line Number is created and then 
	// with toggleLineNumber function the Line Number visibility can be toggled
	NSEditor.prototype.toggleLineNumber = function() 
	{
		this.__config["enableLineNumber"] = !this.__config["enableLineNumber"];
		this.__setLineNumberVisibility(this.__config["enableLineNumber"]);
	};
	
	NSEditor.prototype.setDisabled = function(isDisabled) 
	{
		this.__isDisabled = isDisabled;
	};
	
	NSEditor.prototype.getDisabled = function() 
	{
		return this.__isDisabled;
	};
	
	NSEditor.prototype.getText = function() 
	{
		return this.__getTextFromTextArea();
	};
	
	NSEditor.prototype.setText = function(text) 
	{
		this.__setTextIntoTextArea(text);
	};
	
	NSEditor.prototype.getHtml = function() 
	{
		return this.__getHtmlFromTextArea();
	};
	
	NSEditor.prototype.setHtml = function(html) 
	{
		this.__setHtmlIntoTextArea(html);
	};
	
	NSEditor.prototype.__initDefault = function()
	{
		//item in autoSuggestTriggers will be {keyCode: 32, ctrlKey: true,shiftKey: false, preventDefault: true}
		if(!this.__config["autoSuggestTriggers"])
		{
			this.__config["autoSuggestTriggers"] = [];
		}
		if(!this.__config["mode"])
		{
			this.__config["mode"] = NSEditor.MODE_TEXTAREA;
		}
		var defaultElement = this.util.createElement(this.__config["enterElement"],null,"nsEditorLineElement");
		if(defaultElement)
		{
			defaultElement.innerHTML = "<br>"; 
			this.__defaultContent = defaultElement.outerHTML;
		}
		else 
		{
			this.util.throwNSError("NSEditor","Enter a valid enterElement property");
		}
	};
	
	NSEditor.prototype.__setSetting = function()
	{
		if(!this.__setting)
		{
			this.__setting = {};
		}
		if(!this.__config)
		{
			this.__config = {};
		}
		var setting = this.__setting;
		if(setting)
		{
			if(setting.hasOwnProperty("context"))
			{
				this.__context = setting["context"];
			}
			this.__config = {
					enableToolBar: this.util.isUndefinedOrNull(this.__setting["enableToolBar"]) ? true : Boolean.parse(this.__setting["enableToolBar"]),
					toolBarButton: this.__setting["toolBarButton"],
					enableTabBar: Boolean.parse(this.__setting["enableTabBar"]),
					enableLineNumber: Boolean.parse(this.__setting["enableLineNumber"]),
					enableAutoSuggest: Boolean.parse(this.__setting["enableAutoSuggest"]),
					autoSuggestTriggers: this.__setting["autoSuggestTriggers"],
					enableToolbarInFooter: Boolean.parse(this.__setting["enableToolbarInFooter"]),
					mode: this.__setting["mode"],
					placeholder: this.__setting["placeholder"],
					enterElement: this.__setting["enterElement"] || "p",// should ideally be <p> or <div> as others can create problems
					promptBoxCallback: this.__setting["promptBoxCallback"] ? this.util.getFunction(this.__setting["promptBoxCallback"]) : null,
			};
		}
		this.__callSetSettingsInPluggin();
		if(this.__config.enableToolBar && (!this.__config.toolBarButton || this.__config.toolBarButton.length == 0))
		{
			this.__config.toolBarButton = [];
			for(var key in this.__toolBarButton)
			{
				if(this.__toolBarButton[key].showAsMenu)
				{
					this.__config.toolBarButton.push(key);
				}
			}
		}
	};
	
	NSEditor.prototype.__init = function()
	{
		this.__divOuterContainer = document.createElement("div");
		this.__divOuterContainer.setAttribute("class","nsEditor nsEditorOuterContainer");
		if(this.__orignalTextArea && this.__orignalTextArea.parentNode)
		{
			if(this.__orignalTextArea.nextSibling)
			{
				this.__orignalTextArea.parentNode.insertBefore(this.__divOuterContainer, this.__orignalTextArea.nextSibling);
			}
			else
			{
				this.__orignalTextArea.parentNode.appendChild(this.__divOuterContainer);
			}
		}
		else
		{
			document.body.appendChild(this.__divOuterContainer);
		}
	};
	
	NSEditor.prototype.__initializeTools = function()
	{
		this.__nsToolTipInElement = new this.util.nsToolTipInElement();
	};
	
	NSEditor.prototype.__createComponent = function()
	{
		this.__createToolBar();
		this.__createTabBar();
		this.__createBody();
		this.__createFooter();
		this.__createPlaceHolder();
		if(!this.__windowClickRef)
		{
			this.__windowClickRef = this.__windowClickHandler.bind(this);
			this.util.addEvent(window,"click",this.__windowClickRef);
		}
		this.__editorDropDown =  this.util.createElement("ul",this.getID() + "dropDown","nsEditorToolBarDropdown");
		//this.__divOuterContainer.appendChild(this.__editorDropDown);
		document.body.appendChild(this.__editorDropDown);
		if(this.__isModeTextArea())
		{
			this.__callComponentsInitializedInPluggin();
			this.__checkPlaceHolderRequired();
		}
	};
	
	NSEditor.prototype.__createToolBar = function()
	{
		this.__divToolBarContainer = this.util.createDiv(this.getID() + "toolbarcontainer","nsEditorToolBarContainer");
		this.__divOuterContainer.appendChild(this.__divToolBarContainer);
		if(this.__config["enableToolBar"])
		{
			this.__createToolBarComponents();
		}
		else
		{
			this.__handleVisibilityOfComponent(this.__divToolBarContainer,"enableToolBar");
		}
	};
	
	NSEditor.prototype.__createToolBarComponents = function()
	{
		this.util.removeAllChildren(this.__divToolBarContainer);
		if(this.__config["toolBarButton"] && this.__config["toolBarButton"].length > 0)
		{
			for(var count = 0;count < this.__config["toolBarButton"].length;count++)
			{
				var key = this.__config["toolBarButton"][count];
				if(this.__toolBarButton[key])
				{
					this.__createToolBarButton(this.__toolBarButton[key],this.__divToolBarContainer,key);
				}
			}
		}
	};
	
	NSEditor.prototype.__createToolBarButton = function(item,parent,key)
	{
		if(item)
		{
			var self = this;
			var btnItem =  this.util.createElement("button",null,"nsEditorToolBarButton");
			btnItem.innerHTML = item.html;
			if(item.tooltip && item.tooltip.length > 0)
			{
				this.__nsToolTipInElement.addToolTip(btnItem,item.tooltip);
			}
			if(item.isDropdown)
			{
				this.util.addStyleClass(btnItem,"nsEditorToolBarButtonDropdown");
				this.util.addEvent(btnItem,"click",(function(item){
					return function(event){
						self.__toolBarDropdownClickHandler.call(self,item,key,event);
					};
				})(item));
			}
			else
			{
				this.util.addEvent(btnItem,"click",(function(item){
					return function(event){
						self.__toolBarButtonClickHandler.call(self,item,key,event);
					};
				})(item));
			}
			if(parent)
			{
				parent.appendChild(btnItem);
			}
			item.control = btnItem;
			item.selected = false;
			return btnItem;
		}
		return null;
	};
	
	NSEditor.prototype.__makeToolBarItemActive = function(item,isActive)
	{
		if(item)
		{
			item.selected = isActive;
			if(item.control)
			{
				isActive ? this.util.addStyleClass(item.control,"nsEditorToolBarItemActive") : this.util.removeStyleClass(item.control,"nsEditorToolBarItemActive");
			}
		}
	};
	
	NSEditor.prototype.__makeToolBarItemDisabled = function(item,isDisabled)
	{
		if(item)
		{
			item.selected = false;
			item.disabled = isDisabled;
			if(item.control)
			{
				isDisabled ? this.util.addStyleClass(item.control,"nsEditorToolBarButtonDisabled") : this.util.removeStyleClass(item.control,"nsEditorToolBarButtonDisabled");
			}
		}
	};
	
	NSEditor.prototype.__createToolBarDropdown = function(parentItem,key,event)
	{
		var arrItem = parentItem.dataSource;
		if(arrItem && arrItem.length > 0)
		{
			var self = this;
			this.util.removeAllChildren(this.__editorDropDown);
			for(var count = 0;count < arrItem.length;count++)
			{
				var item = arrItem[count];
				var value = item.value;
				if(item.hasOwnProperty("htmlKey"))
				{
					item = this.__toolBarButton[item["htmlKey"]];
				}
				if(item)
				{
					var child = this.util.createElement("li",null,"nsEditorToolBarDropdownItem");
					child.innerHTML = item.html;
					child.setAttribute("data-nsEditor-value",value);
					this.util.addEvent(child,"click",(function(item){
						return function(event){
							self.__toolBarButtonClickHandler.call(self,item,key,event);
						};
					})(item));
					this.__editorDropDown.appendChild(child);
				}
			}
			var offset = this.util.getEventPosition(event);
			this.__editorDropDown.style.left = (offset.left - 22) + "px";
			this.__editorDropDown.style.top = (offset.top + 15) + "px";
			//this.__editorDropDown.style.left = (event.clientX - 221)+ "px";
			//this.__editorDropDown.style.top = event.clientY + "px";
			console.log(event);
			console.log(offset);
			return this.__editorDropDown;
		}
		return null;
	};
	
	NSEditor.prototype.__toolBarDropdownClickHandler = function(item,key,event)
	{
		var dropdown = this.__createToolBarDropdown(item,event);
		if(dropdown)
		{
			var maxZIndex = this.util.getMaxZIndex(this.__divOuterContainer);
			if(maxZIndex > 0)
			{
				dropdown.style.zIndex = maxZIndex;
			}
			this.util.toggleStyleClass(dropdown,"nsEditorToolBarDropdownShow");
		}
	};
	
	NSEditor.prototype.__toolBarButtonClickHandler = function(item,key,event)
	{
		if(item)
		{
			if(!this.getDisabled())
			{
				this.__saveSelection();
				if(item.command)
				{
					this.__executeCommand(item.command,item);
				}
				if(item.click)
				{
					item.click(item,key,event);
				}
				this.__makeToolBarItemActive(item,true);
			}
		}
	};
	
	NSEditor.prototype.__createTabBar = function()
	{
		this.__divTabContainer = this.util.createDiv(this.getID() + "tabcontainer","nsEditorTabContainer");
		this.__divOuterContainer.appendChild(this.__divTabContainer);
		if(this.__config["enableTabBar"])
		{
			//this.__createToolBarComponents();
		}
		else
		{
			this.__handleVisibilityOfComponent(this.__divTabContainer,"enableTabBar");
		}
	};
	
	NSEditor.prototype.__createBody = function()
	{
		this.__divBodyContainer = this.util.createDiv(this.getID() + "bodycontainer","nsEditorBodyContainer");
		this.__divLineNumberContainer = this.util.createDiv(this.getID() + "linenumbercontainer","nsEditorLineNumberContainer");
		this.__divTextAreaContainer = this.util.createDiv(this.getID() + "textareacontainer","nsEditorTextAreaContainer");
		this.__divBodyContainer.appendChild(this.__divLineNumberContainer);
		this.__divBodyContainer.appendChild(this.__divTextAreaContainer);
		this.__divOuterContainer.appendChild(this.__divBodyContainer);
		this.__compTextArea = this.__createTextArea();
		this.__divTextAreaContainer.appendChild(this.__compTextArea);
		if(this.__isModeTextArea())
		{
			this.__initTextArea();
			this.__createLineNumberComponents();
		}
	};
	
	NSEditor.prototype.__createTextArea = function()
	{
		var divTextArea = null;
		var content = "";
		if(this.__isModeTextArea())
		{
			//do not add class here as it will get overriden from if orignalTextArea has class
			divTextArea = this.util.createDiv(this.getID() + "textArea",null);
			divTextArea.setAttribute("contenteditable",true);
			divTextArea.setAttribute("spellcheck",true);
			if(this.__orignalTextArea)
			{
				if(this.__orignalTextArea.value.length > 0)
				{
					content = this.__orignalTextArea.value;
				}
				var arrAttributes = ["tabIndex","style","class"];
				var arrNewAttributes = ["tabIndex","style","class"];
				for(var count = 0;count < arrAttributes.length;count++)
				{
					if(this.__orignalTextArea.getAttribute(arrAttributes[count]))
					{
						divTextArea.setAttribute(arrNewAttributes[count],this.__orignalTextArea.getAttribute(arrAttributes[count]));
					}
				}
				divTextArea.style.height = "";
			}
			else if(this.__config.defaultValue && this.__config.defaultValue.length > 0)
			{
				divTextArea.appendChild(document.createTextNode(this.__config.defaultValue));
			}
			this.util.addStyleClass(divTextArea,"nsEditorTextArea");
		}
		else
		{
			divTextArea = this.util.createElement("iframe",this.getID() + "textArea","nsEditorTextAreaIFrame");
			if(window.location.protocol === "https:")
			{
				divTextArea.setAttribute("src","about:blank");
			}
			divTextArea.setAttribute("frameborder","0");
			divTextArea.setAttribute("allowtransparency","true");
			if(this.__orignalTextArea)
			{
				if(this.__orignalTextArea.getAttribute("tabindex"))
				{
					divTextArea.setAttribute("tabindex",this.__orignalTextArea.getAttribute("tabindex"));
				}
				if(this.__orignalTextArea.value.length > 0)
				{
					content = this.__orignalTextArea.value;
				}
			}
			var style = "html\r\n" + 
					"		{\r\n" + 
					"			margin:0px;\r\n" + 
					"			height:auto;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody\r\n" + 
					"		{\r\n" + 
					"			height:auto;\r\n" + 
					"			background:transparent;\r\n" + 
					"			color:#000000;\r\n" + 
					"			position:relative;\r\n" + 
					"			z-index: 2;\r\n" + 
					"			-webkit-user-select:auto;\r\n" + 
					"			margin:0px;\r\n" + 
					"			min-height:50px;\r\n" + 
					"			padding: 5px;\r\n" +
					"		}\r\n" + 
					"		.nsEditorBody:after\r\n" + 
					"		{\r\n" + 
					"			content:\'\';\r\n" + 
					"			display:block;\r\n" + 
					"			clear:both;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody::-moz-selection\r\n" + 
					"		{\r\n" + 
					"			background:#b5d6fd;\r\n" + 
					"			color:#000;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody::selection\r\n" + 
					"		{\r\n" + 
					"			background:#b5d6fd;\r\n" + 
					"			color:#000;\r\n" + 
					"		}\r\n" + 
					"		.nsEditorBody.nsEditorBodyWithLineNumber\r\n" + 
					"		{\r\n" + 
					"			padding: 0px;\r\n" +
					"			padding-top: 5px;\r\n" + 
					"			padding-right: 5px;\r\n" + 			
					"		}\r\n" + 
					"		.nsEditorBody.nsEditorBodyWithLineNumber .nsEditorLineElement\r\n" + 
					"		{\r\n" + 
					"			margin:0;\r\n" + 
					"			font-size: 12px;\r\n" +
					"			line-height: 15px !important;\r\n" +
					"		}\r\n" + 
					"		.nsEditorPageBreak\r\n" + 
					"		{\r\n" + 
					"			clear: both !important;\r\n" + 
					"    		width: 100% !important;\r\n" + 
					"    		border-top: #999 1px dotted !important;\r\n" + 
					"    		border-bottom: #999 1px dotted !important;\r\n" + 
					"    		padding: 0 !important;\r\n" + 
					"    		height: 7px !important;\r\n" + 
					"    		cursor: default !important;\r\n" + 
					"		}";
			var arrStyle = this.__callAddStyleIFrameInPluggin(style);
			if(arrStyle && arrStyle.length > 0)
			{
				for(var count = 0;count < arrStyle.length;count++)
				{
					style += arrStyle[count].value;
				}
			}
			var html = "<html><head><style>" + style + "</style></head><body class=\"nsEditorBody" + (this.__config["enableLineNumber"] ? " nsEditorBodyWithLineNumber" : "") + "\" contenteditable=\"true\" aria-disabled=\"false\" spellcheck=\"true\" dir=\"auto\">" + content + "</body></html>";
			this.__enableIFrameDesignMode(divTextArea,html);
		}
		if(!content && this.__config.defaultValue && this.__config.defaultValue.length > 0)
		{
			content = this.__config.defaultValue;
		}
		//for Mozilla showing cursor
		if(content)
		{
			content = this.__getWrappedContent(content);
		}
		else
		{
			content = this.__defaultContent;
		}
		this.__config.defaultValue = content;
		if(this.__orignalTextArea)
		{
			var width = (this.__orignalTextArea.clientWidth || 0);
			var height = (this.__orignalTextArea.clientHeight || 0);
			var textWidth = this.util.getOuterWidth(this.__orignalTextArea);
			this.__setWidth(textWidth);
			var baseMeasurement = this.__orignalTextArea.getBoundingClientRect();
			this.__setHeight(baseMeasurement.height);
			this.util.addStyleClass(this.__orignalTextArea,"nsEditorTextAreaHidden");
			if(!this.__config["placeholder"] && this.__orignalTextArea.getAttribute("placeholder"))
			{
				this.__config["placeholder"] = this.__orignalTextArea.getAttribute("placeholder");
			}
		}
		this.util.addStyleClass(divTextArea,"nsEditorTextAreaGeneric");
		
		return divTextArea;
	};
	
	NSEditor.prototype.__initTextArea = function()
	{
		var listenerComponent = this.__isModeTextArea() ? this.__compTextArea : this.__frameContentWindow;
		var clickListener = this.__isModeTextArea() ? this.__compTextArea : this.__frameContentDoc;
		var body = this.__isModeTextArea() ? this.__compTextArea : this.__getIFrameBody();
		var self = this;
		
		var genericListerener = function(event)
		{
			self.__dispatchInternalEvent(event.type,{orignalEvent:event},{orignalEvent:event});
		};
		
		var eventListener = function(event){
			event = self.util.getEvent(event);
			//var target = self.util.getTarget(event);
			self.__saveSelection();
			//self.__updateToolbar(target);
			switch(event.type)
			{
				case "mouseup":
					self.__checkPlaceHolderRequired();
					break;
			}
		};
		var pasteListener = function(event)
		{
			event = self.util.getEvent(event);
			switch(event.type)
			{
				case "beforepaste":
					self.__dispatchInternalEvent("beforepaste",{orignalEvent:event},{orignalEvent:event});
					break;
				case "paste":
					var content = self.__getPastedHTML(event);
					if(!content)
					{
						content = {};
					}
					content.orignalEvent = event;
					self.__dispatchInternalEvent("paste",content,content);
					break;
			}
		};
		
		if(this.__config.defaultValue)
		{
			body.innerHTML = this.__config.defaultValue;
		}
		var nonClickEvents = "keydown keyup keypress mousedown mouseup copy cut dragstart drop dragover resize touchstart touchend focus blur";
		var clickEvents = "selectionchange selectionstart dblclick click paste";
		this.util.addEvent(listenerComponent,nonClickEvents,genericListerener);
		this.util.addEvent(clickListener,clickEvents,genericListerener);
		this.util.addEvent(listenerComponent,"keydown",this.__textAreaKeyDownHandler.bind(this));
		this.util.addEvent(listenerComponent,"keyup mouseup mouseout focusout",eventListener);
		this.util.addEvent(clickListener,"beforepaste paste",pasteListener);
		this.util.addEvent(clickListener,"click",this.__textAreaClickHandler.bind(this));
		if(!this.__isModeTextArea())
		{
			this.__callComponentsInitializedInPluggin();
			this.__checkPlaceHolderRequired();
		}
		this.__textAreaObserver = new MutationObserver(this.__textAreaChangeHandler.bind(this));
		var observerConfig = {attributes:false,childList:true,characterData:true,subtree:true};
		this.__textAreaObserver.observe(body, observerConfig);
	};
	
	NSEditor.prototype.__saveSelection = function()
	{
		this.__selectedRange = this.__getInternalRange();
	};
	
	NSEditor.prototype.__updateToolbar = function(element)
	{
		var self = this;
		var checkForTags = function(arrTags,item)
		{
			if(arrTags && arrTags.length > 0)
			{
				var tempElement = element;
				while (tempElement && tempElement.nodeType == 1) 
				{
					if (arrTags.indexOf(tempElement.tagName.toLowerCase()) > -1) 
					{
						self.__makeToolBarItemActive(item,true);
					}
					tempElement = tempElement.parentNode;
				}
			}
		};
		var checkForCSS = function(objCSS,item)
		{
			if(objCSS)
			{
				var tempElement = element;
				while (tempElement && tempElement.nodeType == 1) 
				{
					var arrCSS = Object.keys(objCSS);
					for(var cssCount = 0;cssCount < arrCSS.length;cssCount++)
					{
						if(isCSSValuePresentInElement(arrCSS[cssCount],objCSS[arrCSS[cssCount]]))
						{
							self.__makeToolBarItemActive(item,true);
						}
					}
					tempElement = tempElement.parentNode;
				}
				self.__setFocusOnControl(true);
			}
		};
		var isCSSValuePresentInElement = function(property,value)
		{
			var cssValue = self.util.getStyleValue(element,property);
			if(cssValue)
			{
				if(typeof (value) === "function")
				{
					var callback = value;
					if(callback && callback(cssValue.toString().toLowerCase()))
					{
						return true;
					}
				}
				else if(cssValue.toString().toLowerCase() === value)
				{
					return true;
				}
			}
			return false;
		};
		
		var arrKeys = Object.keys(this.__toolBarButton);
		for(var count = 0;count < arrKeys.length;count++)
		{
			var key = arrKeys[count];
			var item = this.__toolBarButton[key];
			this.__makeToolBarItemActive(item,false);
			var arrTags = item.tags;
			checkForTags(arrTags,item);
			var css = item.css;
			checkForCSS(css,item);
		}
	};
	
	NSEditor.prototype.__enableIFrameDesignMode = function(iframe,html)
	{
		if(iframe && !this.__isFrameDesignModeEnabled)
		{
			this.__frameContentWindow = this.__getIFrameContentWindow(iframe);
			try 
			{
				this.__frameContentDoc = this.__frameContentWindow.document;
				this.__frameContentDoc.open();
				this.__frameContentDoc.write(html);
				this.__frameContentDoc.close();
            } 
			catch (error) 
			{
                //console.debug(error);
            }
            if (document.contentEditable) 
			{
            	this.__frameContentDoc.designMode = "On";
            	this.__isFrameDesignModeEnabled = true;
            } 
			else if (document.designMode !== null) 
			{
                try 
				{
                	this.__frameContentDoc.designMode = "on";
                	this.__isFrameDesignModeEnabled = true;
                } 
				catch (error) 
				{
                    //console.debug(error);
                }
            }
            if(this.__isFrameDesignModeEnabled)
            {
            	this.__initTextArea();
            	this.__createLineNumberComponents();
            	this.util.addEvent(this.__frameContentWindow,"click",this.__windowClickRef);
            }
            var self = this;
            this.__timeOutInterval = setTimeout(function () 
		    {
            	self.__timeOutInterval = null;
            	self.__enableIFrameDesignMode.call(self,iframe,html);
		    }, 500);
		}
		else
		{
			clearTimeout(this.__timeOutInterval);
			this.__timeOutInterval = null;
		}
	};
	
	NSEditor.prototype.__createLineNumberComponents = function()
	{
		var listenerComponent = this.__isModeTextArea() ? this.__compTextArea : this.__frameContentWindow;
		if(this.__config["enableLineNumber"])
		{
			this.util.addStyleClass(this.__divOuterContainer,"nsEditorWithLineNumber");
			var textWidth = this.__divOuterContainer.offsetWidth;
			var baseMeasurement = this.__compTextArea.getBoundingClientRect();
			this.__divLineNumberWrapper = this.util.createDiv(this.getID() + "linenumberwrapper","nsEditorLineNumberWrapper");
			this.__divLineNumberContainer.appendChild(this.__divLineNumberWrapper);
			this.__drawLineNumbers(1);
			this.__paddingHorizontal = parseInt(this.util.getStyleValue(this.__divOuterContainer,"border-left-width",false)) +
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"border-right-width",false)) + 
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"padding-left",false)) + 
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"padding-right",false));
			this.__setWidth(textWidth - this.__paddingHorizontal);
			this.__lastTextAreaHeight = this.__compTextArea.offsetHeight; 
			this.__lastTextAreaWidth = this.__compTextArea.offsetWidth;
			if(!this.__textAreaScrollRef)
			{
				this.__textAreaScrollRef = this.__textAreaScrollHandler.bind(this);
				var element = this.__getScrollableComponent();
				this.util.addEvent(element,"scroll",this.__textAreaScrollRef);
			}
			if(!this.__textAreaResizeRef)
			{
				this.__textAreaResizeRef = this.__textAreaResizeHandler.bind(this);
				this.util.addEvent(listenerComponent,"resize",this.__textAreaResizeRef);
			}
		}
		else
		{
			if(this.__divLineNumberContainer && this.__divLineNumberContainer.parentElement)
			{
				this.__divLineNumberContainer.parentElement.removeChild(this.__divLineNumberContainer);
				this.__divLineNumberContainer = null;
			}
			this.util.removeStyleClass(this.__divOuterContainer,"nsEditorWithLineNumber");
		}
		if(this.__config["enableAutoSuggest"])
		{
			if(!this.__textAreaKeyUpRef)
			{
				this.__textAreaKeyUpRef = this.__textAreaKeyUpHandler.bind(this);
				this.util.addEvent(listenerComponent,"keyup",this.__textAreaKeyUpRef);
			}
			if(!this.__textAreaKeyDownRef)
			{
				this.__textAreaKeyDownRef = this.__textAreaKeyDownHandler.bind(this);
				this.util.addEvent(listenerComponent,"keydown",this.__textAreaKeyDownRef);
			}
		}
		//observer to watch if orignalTextArea has some style changed
		if(!this.__orignalTextAreaObserver && this.__orignalTextArea)
		{
			this.__orignalTextAreaObserver = new MutationObserver(this.__orignalTextAreaStyleChangeHandler.bind(this));
			this.__orignalTextAreaObserver.observe(this.__orignalTextArea, {attributes:true,attributeFilter:["style"]});
		}
		this.__setLineNumberVisibility(this.__config["enableLineNumber"]);
	};
	
	NSEditor.prototype.__createFooter = function()
	{
		this.__divFooterContainer = this.util.createDiv(this.getID() + "footercontainer","nsEditorFooterContainer");
		this.__divFooterLeftContainer = this.util.createDiv(this.getID() + "footerleftcontainer","nsEditorFooterLeftContainer");
		this.__divFooterContainer.appendChild(this.__divFooterLeftContainer);
		this.__divFooterRightContainer = this.util.createDiv(this.getID() + "footerrightcontainer","nsEditorFooterRightContainer");
		this.__divFooterContainer.appendChild(this.__divFooterRightContainer);
		this.__divOuterContainer.appendChild(this.__divFooterContainer);
		if(this.__config["enableToolbarInFooter"])
		{
			//this.__createToolBarComponents();
		}
		else
		{
			this.__handleVisibilityOfComponent(this.__divFooterContainer,"enableToolbarInFooter");
		}
	};
	
	NSEditor.prototype.__windowClickHandler = function(event)
	{
		//if(this.hasFocus())
		//{
			if (!this.util.hasStyleClass(event.target,"nsEditorToolBarButtonDropdown")) 
			{
				/*var dropdowns = document.getElementsByClassName("nsEditorToolBarDropdownShow");
			    for (var count = 0; count < dropdowns.length; count++) 
			    {
			      var openDropdown = dropdowns[count];
			      this.util.removeStyleClass(openDropdown,"nsEditorToolBarDropdownShow");
			    }*/
				this.util.removeStyleClass(this.__editorDropDown,"nsEditorToolBarDropdownShow");
			}
		//}
	};
	
	NSEditor.prototype.__textAreaKeyDownHandler = function(event)
	{
		event = this.util.getEvent(event);
		if(!this.getDisabled())
		{
			if (event.keyCode === this.util.KEYCODE.BACKSPACE) 
			{ 
				if (this.__isTextAreaBlank()) 
				{ 
					event.stopPropagation(); // prevent remove single empty tag
					event.preventDefault();
				}
			}
			else
			{
				if (event.ctrlKey || event.metaKey) 
				{
					var self = this;
					var processArray = function(objToolBar)
					{
						for (var key in objToolBar) 
						{
							var item = objToolBar[key];
							if(item && item.hotkey)
							{
								if((item.hotkey.ctrl && event.ctrlKey && event.keyCode === item.hotkey.key) || (event.keyCode === item.hotkey.key))
								{
									self.__executeCommand(item.command,item);
									if(item.click)
									{
										item.click(item,event);
									}
									self.__makeToolBarItemActive(item,true);
									event.preventDefault();
									return true;
								}
							}
							else if(item.isDropdown)
							{
								if(processArray(item.dataSource))
								{
									return true;
								}
							}
						}
						return false;
					};
					processArray(this.__toolBarButton);
					
					/*if (event.keyCode === 13) 
					{
						var range = this.__getRange();
						range.pasteHTML("<br/>");
						range.collapse(false);
						range.select();
						event.preventDefault();
					}*/
				}
			}
		}
		this.__checkPlaceHolderRequired();
		
	};
	
	NSEditor.prototype.__textAreaKeyUpHandler = function(event)
	{
		 /*if (decls.isVisible())
         {
             decls.setFilter(getFilterText());
         }*/
	};
	
	NSEditor.prototype.__textAreaClickHandler = function(event)
	{
		var target = this.util.getTarget(event);
		this.__updateToolbar(target);
	};
	
	NSEditor.prototype.__textAreaScrollHandler = function(event)
	{
		if(!this.__timeOutInterval)
		{
			var lineNumberHeight = 15;
			var self = this;
			this.__timeOutInterval = setTimeout( function() 
			{
				var listenerComponent = self.__getScrollComponent();
				var scrollTop = listenerComponent.scrollTop;
				var firstLine = Math.floor((scrollTop / lineNumberHeight) + 1);
				var remainingScroll = (scrollTop / lineNumberHeight) % 1;

				self.__drawLineNumbers(firstLine);
				self.__divLineNumberWrapper.style.marginTop = (-1 * (remainingScroll * lineNumberHeight)) + "px";
				self.__timeOutInterval = null;
			}, 150);
		}
	};
	
	NSEditor.prototype.__textAreaResizeHandler = function(event)
	{
		
	};
	
	NSEditor.prototype.__orignalTextAreaStyleChangeHandler = function(arrMutation)
	{
		for(var count = 0;count < arrMutation.length;count++)
		{
			var mutation = arrMutation[count];
			if (mutation.type == "attributes") 
	        {
	        	
	        }
			
		}
	};
	
	NSEditor.prototype.__textAreaChangeHandler= function(arrMutation)
	{
		//for(var count = 0;count < arrMutation.length;count++)
		//{
			//var mutation = arrMutation[count];
			if(!this.__isInternalHTMLChange)
			{
				this.__setDefaultTag();
				this.__checkPlaceHolderRequired();
			}
		//}
	};
	
	NSEditor.prototype.__drawLineNumbers = function(fromLine)
	{
		if(this.__divLineNumberWrapper)
		{
			this.util.removeAllChildren(this.__divLineNumberWrapper);
			this.arrLinesElement = [];
			var measurement = this.__divLineNumberContainer.getBoundingClientRect();
			var containerHeight = measurement.height;
			while((this.__divLineNumberWrapper.offsetHeight - containerHeight) <= 0)
			{
				var divLineNumber = this.util.createDiv(this.getID() + "linenumber","nsEditorLineNumber");
				divLineNumber.appendChild(document.createTextNode(fromLine));
				this.__divLineNumberWrapper.appendChild(divLineNumber);
				this.arrLinesElement.push(divLineNumber);
				fromLine++;
			}
		}
		return fromLine;
	};
	
	NSEditor.prototype.__setLineNumberVisibility = function(isVisible) 
	{
		if(this.__setting["enableLineNumber"])
		{
			this.__config["enableLineNumber"] = isVisible;
			this.__handleVisibilityOfComponent(this.__divLineNumberContainer,"enableLineNumber");
			this.__divToolBarContainer.style.paddingLeft = (this.__divLineNumberContainer.offsetWidth + 10) + "px";
		}
	};
	
	NSEditor.prototype.__handleVisibilityOfComponent = function(component,property) 
	{
		this.__setting[property] ? this.util.removeStyleClass(component,"nsEditorComponentHidden") : this.util.addStyleClass(component,"nsEditorComponentHidden");
	};
	
	NSEditor.prototype.__handleKeySpecialKeys = function(event) 
	{
		// escape, left, right
        if (event.keyCode === 27 || event.keyCode === 37 || event.keyCode === 39)
        {
            setVisible(false);
        }
        // up
        else if (event.keyCode === 38)
        {
            moveSelected(-1);
            event.preventDefault();
            event.stopPropagation();
        }
        // down
        else if (event.keyCode === 40)
        {
            moveSelected(1);
            event.preventDefault();
            event.stopPropagation();
        }
        // page up 
        else if (event.keyCode === 33)
        {
            moveSelected(-5);
            event.preventDefault();
        }
        // page down
        else if (event.keyCode === 34)
        {
            moveSelected(5);
            event.preventDefault();
        }
	};
	
	NSEditor.prototype.__getTextFromTextArea = function() 
	{
		var text = null;
		if(this.__isModeTextArea())
		{
			text  = this.__compTextArea.textContent || this.__compTextArea.innerText;
		}
		else
		{
			text = this.__getIFrameText();
		}
		return text;
	};
	
	NSEditor.prototype.__getHtmlFromTextArea = function() 
	{
		var text = null;
		if(this.__isModeTextArea())
		{
			text  = this.__compTextArea.innerHTML;
		}
		else
		{
			text = this.__getIFrameContent();
		}
		if(text)
		{
			text = text.replace(/^(<p[^>]*>(&nbsp;|&#160;|\s|\u00a0|<br \/>|)<\/p>[\r\n]*|<br \/>[\r\n]*)$/, "");
		}
		return text;
	};
	
	NSEditor.prototype.__setTextIntoTextArea = function(text) 
	{
		if(this.__isModeTextArea())
		{
			this.__compTextArea.innerText = text;
		}
		else
		{
			this.__setIFrameText(text);
		}
		this.__dispatchInternalEvent("change");
	};
	
	NSEditor.prototype.__setHtmlIntoTextArea = function(html) 
	{
		if(this.__isModeTextArea())
		{
			this.__compTextArea.innerHTML = html;
		}
		else
		{
			this.__setIFrameContent(html);
		}
		this.__dispatchInternalEvent("change");
	};
	
	//function to get last text for autocomplete .. especially for . intellisense
	NSEditor.prototype.__getCursorPosition = function() 
	{
		var element = this.__isModeTextArea() ? this.__compTextArea : this.__frameContentWindow;
		var cursorPosition = 0;
		this.__restoreSelection();
		this.__setFocusOnControl(true);
		if (window.getSelection)
		{
			var range = window.getSelection().getRangeAt(0);
	        var cloneRange = range.cloneRange();
	        cloneRange.selectNodeContents(element);
	        cloneRange.setEnd(range.endContainer, range.endOffset);
	        cursorPosition = cloneRange.toString().length;
		}
		else if (document.selection && document.selection.type != "Control")
	    {
	        var textRange = document.selection.createRange();
	        var cloneRange = document.body.createTextRange();
	        cloneRange.moveToElementText(element);
	        cloneRange.setEndPoint("EndToEnd", textRange);
	        cursorPosition = cloneRange.text.length;
	    }
        return cursorPosition;
	};
	
	NSEditor.prototype.__getWordAtPosition = function(strData,position) 
	{
		var retData = strData.substring(0,position);
        if (retData.indexOf(" ") > 0 || retData.indexOf("\n") > 0) 
        {
            retData = retData.split(" ");
            retData = retData[retData.length - 1].split("\n");
            return retData[retData.length - 1];
        }
        return retData;
	};
	
	NSEditor.prototype.__getPreviousWord = function() 
	{
		var cursorPosition = this.__getCursorPosition();
		var lastWord = this.__getWordAtPosition(this.__getTextFromTextArea(),cursorPosition);
		return lastWord;
	};
	//end of function to get last text for autocomplete
	
	//functions related to IFrame
	NSEditor.prototype.__getIFrameText = function() 
	{
		var iframeBody = this.__getIFrameBody();
	    return (iframeBody ? (iframeBody.textContent || iframeBody.innerText) : null);
	};
	
	NSEditor.prototype.__getIFrameContent = function() 
	{
		var iframeBody = this.__getIFrameBody();
	    return (iframeBody ? iframeBody.innerHTML : null);
	};
	
	NSEditor.prototype.__setIFrameText = function(text) 
	{
		var iframeBody = this.__getIFrameBody();
	    iframeBody ? iframeBody.innerText = text : null;
	};
	
	NSEditor.prototype.__setIFrameContent = function(html) 
	{
		var iframeBody = this.__getIFrameBody();
	    iframeBody ? iframeBody.innerHTML = html : null;
	};
	
	NSEditor.prototype.__getIFrameContentWindow = function(iframe) 
	{
		var contentWindow = null;
		if (iframe.contentWindow)
		{
			contentWindow = iframe.contentWindow;
		}
		else
		{
	        if (iframe.contentDocument && iframe.contentDocument.document)
	        {
	        	contentWindow = iframe.contentDocument.document;
	        }
	        else
	        {
	        	contentWindow = iframe.contentDocument;
	        }
		}
		return contentWindow;
	};
	
	NSEditor.prototype.__getIFrameBody = function() 
	{
		if(!this.__frameBody)
		{
			this.__frameBody = this.__getIFrameDocument().getElementsByTagName("body")[0];
		}
	    return this.__frameBody;
	};
	
	NSEditor.prototype.__getIFrameDocument = function()  
	{
	    return (this.__compTextArea.contentDocument || this.__compTextArea.contentWindow.document);
	};
	
	NSEditor.prototype.__disableStyleWithCSS = function() 
	{
		if (this.__browserDetail.isFirefox) 
		{
			//disable style while inserting in firefox design Mode
			try 
			{
				this.__frameContentDoc.execCommand("styleWithCSS", false, false);
			} 
			catch (error) 
			{
				try 
				{
					this.__frameContentDoc.execCommand("useCSS", false, true);
				} 
				catch (error2) 
				{
				}
			}
		}
	};
	//end of functions related to IFrame
	NSEditor.prototype.__executeCommand = function(commandName,config) 
	{
		if(!config)
		{
			config = {};
		}
		var command = config.command || commandName;
		var arguments = config["arguments"];
		if(config.execCommand)
		{
			config.execCommand.apply(this);
		}
		else 
		{
			var doc = document;
			if(!this.__isModeTextArea())
			{
				doc = this.__frameContentDoc;
				this.__disableStyleWithCSS();
			}
			// in Firefox untrusted JavaScript is not allowed to access the clipboard
			try 
			{
				this.__restoreSelection();
				this.__setFocusOnControl(true);
				doc.execCommand(command, false, arguments);
				this.__saveSelection();
			} 
			catch (error) 
			{
				console.error(error);
			}
		}
		this.__dispatchInternalEvent("change");
	};
	
	NSEditor.prototype.__setFocusOnControl = function(isFocus) 
	{
		if(this.__isModeTextArea())
		{
			isFocus ? (this.__compTextArea ? this.__compTextArea.focus() : null) : null;
		}
		else
		{
			isFocus ? (this.__frameContentWindow ? this.__frameContentWindow.focus() : null) : null;
		}
	};
	
	NSEditor.prototype.__restoreSelection = function() 
	{
		var selection = null;
		var self = this;
		var setTextRange = function(win,doc)
		{
			if(win.getSelection || doc.createRange) 
			{
				selection = win.getSelection();
			    if (self.__selectedRange) 
			    {
			        try 
			        {
			        	selection.removeAllRanges();
			        } 
			        catch (error) 
			        {
			        	doc.body.createTextRange().select();
			        	if(doc.selection)
			        	{
			        		doc.selection.empty();
			        	}
			        }
			        selection.addRange(self.__selectedRange);
			     }
			} 
			else if (doc.selection && self.__selectedRange) 
			{
				self.__selectedRange.select();
			}
		};
		if(this.__isModeTextArea())
		{
			setTextRange(window,document);
		}
		else
		{
			setTextRange(this.__frameContentWindow,this.__frameContentDoc);
		}
	};
	
	NSEditor.prototype.__createRange = function() 
	{
		var doc = this.__getDocument();
		var range = doc.createRange();
		return range;
	};
	
	NSEditor.prototype.__selectRange = function(range) 
	{
		var selection = this.__getInternalSelection();
		if (selection) 
		{
			selection.removeAllRanges();
			selection.addRange(range);
		}
		this.__dispatchInternalEvent("selectionchange",{range:range},{range:range});
	};
	
	NSEditor.prototype.__getInternalRange = function() 
	{
		var selection = this.__getInternalSelection();
		if (selection) 
		{
			if (selection.rangeCount && selection.rangeCount > 0) 
			{
				return selection.getRangeAt(0);
			} 
			else if (selection.createRange) 
			{
				return selection.createRange();
			}
		}
		return null;
	};

	NSEditor.prototype.__getInternalSelection = function() 
	{
		if(this.__isModeTextArea())
		{
			if (window.getSelection) 
			{
				return window.getSelection();
			} 
			else if (document.selection) 
			{
			   return document.selection;
			}
		}
		else
		{
			if (this.__compTextArea.contentWindow) 
			{
				if (this.__compTextArea.contentWindow.getSelection) 
				{
					return this.__compTextArea.contentWindow.getSelection();
				}
				if (this.__compTextArea.contentWindow.selection) 
				{
					return this.__compTextArea.contentWindow.selection;
				}
			}
			if (this.__frameContentDoc.getSelection) 
			{
				return this.__frameContentDoc.getSelection();
			}
			if (this.__frameContentDoc.selection) 
			{
				return this.__frameContentDoc.selection;
			}
		}
		return null;
	};

	NSEditor.prototype.__getRange = function() 
	{
		var selection = (window.getSelection) ? window.getSelection() : window.document.selection;
		if (selection) 
		{
			if (selection.rangeCount && selection.rangeCount > 0) 
			{ 
				selection.getRangeAt(0);
			} 
			else if (selection.createRange)
			{
				return selection.createRange();
			}
		}
		return null;
	};
	
	NSEditor.prototype.__insertHTML = function(html) 
	{
		if(html && html.length > 0)
		{
			var doc = this.__isModeTextArea() ? document : this.__frameContentDoc;
			var divTemp = document.createElement("div");
			divTemp.innerHTML = html;
			var element = divTemp.childNodes[0];
			if(this.__browserDetail.isMSIE)
			{
				this.__executeCommand("insertImage",{"arguments": "##nsEditorImage##"});
				var image = doc.querySelector('img[src="##nsEditorImage##"]');
				if(image)
				{
					image.parentNode.replaceChild(element,image);
				}
			}
			else if (this.__browserDetail.isFirefox) 
			{ 
				range = this.__getInternalRange();
				range.deleteContents();
				range.insertNode(element);
			}
			else
			{
				this.__executeCommand("insertHTML",{"arguments": html});
			}
		}
	};
	
	NSEditor.prototype.__viewSourceCodeHandler = function(item,key,event)
	{
		if(!this.__txtSourceCode)
		{
			this.__txtSourceCode = this.util.createElement("textarea",this.getID() + "sourcetextArea","nsEditorSourceTextArea");
			//this.__txtSourceCode.setAttribute("disabled",true);
			this.__divTextAreaContainer.appendChild(this.__txtSourceCode);
		}
		var self = this;
		var processItems = function(isDefaultDisabled)
		{
			var arrKeys = Object.keys(self.__toolBarButton);
			for(var count = 0;count < arrKeys.length;count++)
			{
				var itemKey = arrKeys[count];
				var toolBarItem = self.__toolBarButton[itemKey];
				if(item != toolBarItem)
				{
					var disabled = toolBarItem.checkDisability ? toolBarItem.checkDisability(itemKey,toolBarItem,item,key,isDefaultDisabled) : true;
					self.__makeToolBarItemDisabled(toolBarItem,(isDefaultDisabled ? disabled : !disabled));
				}
			}
		};
		//view source is shown then show editor
		if (this.__isSourceMode)
		{
			this.util.addStyleClass(this.__txtSourceCode,"nsEditorTextAreaHidden");
			this.util.removeStyleClass(this.__compTextArea,"nsEditorTextAreaHidden");
			this.setHtml(this.__txtSourceCode.value);
			this.__checkPlaceHolderRequired();
			processItems(false);
		}
		//view source is not shown then show viewsource text area
		else
		{
			var html = this.__getHtmlFromTextArea();
			this.util.removeStyleClass(this.__txtSourceCode,"nsEditorTextAreaHidden");
			this.util.addStyleClass(this.__compTextArea,"nsEditorTextAreaHidden");
			this.__txtSourceCode.value = html;
			this.__showHidePlaceHolder(false);
			processItems(true);
		}
		this.__isSourceMode = !this.__isSourceMode;
		this.__dispatchInternalEvent("viewSourceChanged",{isSourceMode: this.__isSourceMode}, {isSourceMode: this.__isSourceMode});
	};
	
	NSEditor.prototype.__printHandler = function(item,key,event)
	{
		if(this.__isModeTextArea())
		{
			if(!this.__iframePrint)
			{
				this.__iframePrint = this.util.createElement("iframe",this.getID() + "EditorPrintFrame","nsEditorPrint");
				this.__iframePrint.name = this.getID() + "EditorPrintFrame";
				document.body.appendChild(this.__iframePrint);
			}
			var content =  this.__getHtmlFromTextArea();
			var html = "<!DOCTYPE html><html><head><title>" + document.title + "</title>";
			var arrStyle = document.querySelectorAll("style");
			if(arrStyle && arrStyle.length > 0)
			{
				for(var count= 0;count < arrStyle.length; count++)
				{
					var style = arrStyle[count].cloneNode(true);
					html += style.outerHTML;
				}
			}
			var arrLink = document.querySelectorAll("link[rel=stylesheet]");
			if(arrLink && arrLink.length > 0)
			{
				for(var count= 0;count < arrLink.length; count++)
				{
					var link = document.createElement("link");
					link.rel = arrLink[count].rel;
					link.href = arrLink[count].href;
					link.media = "print";
					link.type = "text/css";
					link.media = "all";
					html += link.outerHTML;
				}
			}
			html +="</head><body class=\"nsEditorBody\" dir=\"auto\"><div>" + content + "</div></body></html>";
			var self = this;
			this.__iframePrint.onload = function() 
			{
                setTimeout(function() 
                {
                	var frame = window.frames[self.getID() + "EditorPrintFrame"];
                	frame.focus();
                	frame.print();
                	window.focus();
                }, 0);
            };
            var contentWindow = this.__iframePrint.contentWindow;
            contentWindow.document.open();
            contentWindow.document.write(html);
            contentWindow.document.close();
		}
		else
		{
			this.__executeCommand("print",item);
		}
	};
	
	NSEditor.prototype.__pageBreakForPrintingHandler = function(item,key,event)
	{
		var divPageBreak = "<div class=\"nsEditorPageBreak\" style=\"page-break-after: always\" title=\"Page Break\"></div>";
		this.__insertHTML(divPageBreak);
	};
	
	NSEditor.prototype.__getScrollComponent = function() 
	{
		var component = this.__isModeTextArea() ? this.__divTextAreaContainer : this.__getIFrameBody();
		return component;
	};
	
	NSEditor.prototype.__getScrollableComponent = function() 
	{
		var element = this.__isModeTextArea() ? this.__divTextAreaContainer : this.__frameContentWindow;
		return element;
	};
	
	NSEditor.prototype.__getTextArea = function() 
	{
		var component = this.__isModeTextArea() ? this.__compTextArea : this.__getIFrameBody();
		return component;
	};
	
	NSEditor.prototype.__getDocument = function() 
	{
		var component = this.__isModeTextArea() ? document : this.__getIFrameDocument();
		return component;
	};

	NSEditor.prototype.__isModeTextArea = function() 
	{
		return (this.__config["mode"] !== NSEditor.MODE_IFRAME);
	};
	
	NSEditor.prototype.__resizeContainer = function(width,height) 
	{
		this.__setHeight(height);
		this.__setWidth(width);
		this.__handleLineNumberOnResize();
	};
	
	NSEditor.prototype.__dispatchEvent = function(eventType,data,param,bubbles,cancelable)
	{
		this.util.dispatchEvent(this.__baseComponent,eventType,data,param,bubbles,cancelable);
	};
	
	NSEditor.prototype.__dispatchInternalEvent = function(eventType,data,param,bubbles,cancelable)
	{
		this.util.dispatchEvent(this.__baseComponent,this.__getInternalEvent(eventType),data,param,bubbles,cancelable);
	};
	
	NSEditor.prototype.__listenInternalEvent = function(eventType,callback)
	{
		this.util.addEvent(this.__baseComponent,this.__getInternalEvent(eventType),function(event){
			callback(event,event.detail);
		});
	};
	
	NSEditor.prototype.__addEvent = function(eventType,listener)
	{
		this.util.addEvent(this.__baseComponent,eventType,listener);
	};
	
	NSEditor.prototype.__getInternalEvent = function(eventType)
	{
		var retType = "";
		var joinBy = " ";
		arrEventType = eventType.split(" ");
		for(var count = 0;count < arrEventType.length;count++)
		{
			retType += joinBy + "__" + arrEventType[count];
		}
		if(retType)
		{
			retType = retType.substring(retType.length);
		}
		return retType;
	};
	
	NSEditor.prototype.__setHeight = function(height)
	{
		if(!this.util.isUndefinedOrNull(height))
		{
			this.__divBodyContainer.style.height = height + "px";
		}
	};
	
	NSEditor.prototype.__getHeight = function()
	{
		var baseMeasurement = this.__divBodyContainer.getBoundingClientRect();
		return baseMeasurement.height;
	};
	
	NSEditor.prototype.__setWidth = function(width)
	{
		if(!this.util.isUndefinedOrNull(width))
		{
			this.__divOuterContainer.style.width = width + "px";
		}
	};
	
	NSEditor.prototype.__getWidth = function()
	{
		var baseMeasurement = this.__divOuterContainer.getBoundingClientRect();
		return baseMeasurement.width;
	};
	
	NSEditor.prototype.__handleLineNumberOnResize = function()
	{
		if(this.__divLineNumberWrapper)
		{
			var lineNumberHeight = 15;
			var listenerComponent = this.__getScrollComponent();
			
			var scrollTop = listenerComponent.scrollTop;
			var firstLine = Math.floor((scrollTop / lineNumberHeight) + 1);
			var remainingScroll = (scrollTop / lineNumberHeight) % 1;

			this.__drawLineNumbers(firstLine);
			this.__divLineNumberWrapper.style.marginTop = (-1 * (remainingScroll * lineNumberHeight)) + "px";
			this.__paddingHorizontal = parseInt(this.util.getStyleValue(this.__divOuterContainer,"border-left-width",false)) +
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"border-right-width",false)) + 
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"padding-left",false)) + 
									parseInt(this.util.getStyleValue(this.__divOuterContainer,"padding-right",false));
		}
	};
	
	NSEditor.prototype.__getWrappedContent = function(content) 
	{
		if(content)
		{
			var isPFound = content.match(/<\/?p>/gi);
			if (!isPFound) 
			{
				return "<p>" + content + "</p>";
			}
		}
		return content;
	};
	
	NSEditor.prototype.__setDefaultTag = function()
	{
		var text = this.__getTextFromTextArea();
		var htmlText = this.__getHtmlFromTextArea();
		if(text && text.trim().length === 0 && htmlText != this.__defaultContent)
		{
			this.__isInternalHTMLChange = true;
			var body = this.__isModeTextArea() ? this.__compTextArea : this.__getIFrameBody();
			body.innerHTML = this.__defaultContent;
			this.__isInternalHTMLChange = false;
		}
	};
	
	NSEditor.prototype.__getPastedHTML = function(event)
	{
		var objReturn = {text:"",html:"",rtf:""};
		if (window.clipboardData && window.clipboardData.getData) 
        { 
			
        }
		else if (event.clipboardData && event.clipboardData.getData) 
        {
			objReturn.text = event.clipboardData.getData("text/plain");
			objReturn.html = event.clipboardData.getData("text/html");
			objReturn.rtf = event.clipboardData.getData("text/rtf");
        }
		return objReturn;
	};
	
	//Placeholder functions
	NSEditor.prototype.__createPlaceHolder = function() 
	{
		if(!this.__compPlaceHolder && this.__config["placeholder"] && this.__config["placeholder"].length > 0)
		{
			this.__compPlaceHolder = this.util.createElement("span",this.getID() + "Placeholder","nsEditorPlaceholder");
			this.__compPlaceHolder.appendChild(document.createTextNode(this.__config["placeholder"]));
			this.__divTextAreaContainer.appendChild(this.__compPlaceHolder);
		}
	};
	
	NSEditor.prototype.__showHidePlaceHolder = function(isVisible) 
	{
		if(this.__compPlaceHolder)
		{
			//console.log("In __showHidePlaceHolder");
			isVisible ? this.util.addStyleClass(this.__compPlaceHolder,"nsEditorPlaceholderShow") : this.util.removeStyleClass(this.__compPlaceHolder,"nsEditorPlaceholderShow");
			if(isVisible)
			{
				this.__setPlaceHolderPosition();
			}
		}
	};
	
	NSEditor.prototype.__setPlaceHolderPosition = function() 
	{
		if(this.__compPlaceHolder)
		{
			var self = this;
			var getValue = function(obj,element)
			{
				for(var count = 0;count < arrStyle.length;count++)
				{
					obj[arrProp[count]] = self.__getStyleValue(self.util.getStyleValue(element,arrStyle[count],false));
				}
			};
			var body = this.__isModeTextArea() ? this.__compTextArea : this.__getIFrameBody();
			var firstChild = body.children[0];
			var child = {};
			var element = {};
			var arrStyle = ["margin-top","margin-right","margin-left","padding-top","padding-right","padding-left"];
			var arrProp = ["marginTop","marginRight","marginLeft","paddingTop","paddingRight","paddingLeft"];
			getValue(child,firstChild);
			getValue(element,body);
			var isTextArea = this.__isModeTextArea();
			for(var count = 0;count < arrProp.length;count++)
			{
				var prop = arrProp[count];
				this.__compPlaceHolder.style[prop] = (isTextArea ? Math.max(child[prop],element[prop]) : element[prop]) + "px";
			}
		}
	};
	
	NSEditor.prototype.__checkPlaceHolderRequired = function() 
	{
		var self = this;
		var callLater = function()
		{
			self.__showHidePlaceHolder(self.__isTextAreaBlank());
		};
		setTimeout(callLater, 0);
	};
	//end of Placeholder functions
	NSEditor.prototype.__isTextAreaBlank = function() 
	{
		var body = this.__isModeTextArea() ? this.__compTextArea : this.__getIFrameBody();
		if(body.children.length === 1)
		{
			var html = this.getHtml();
			/*if(html == "<p><br /></p>")
			{
				return true;
			}*/
			var emptyRegex = /^<([\w]+)[^>]*>(<br\/?>)?<\/\1>$/;
			var isBlank = emptyRegex.test(html);
			return isBlank;
		}
		return false;
	};
	
	NSEditor.prototype.__getStyleValue = function(styleValue) 
	{
        return parseInt(styleValue, 10) || 0;
    };
	//section of functions for pluggin
	NSEditor.prototype.__initializePlugins = function() 
	{
		this.__pluginsInstances = {};
		if(NSEditor.__plugins)
		{
			for(var plugginName in NSEditor.__plugins)
			{
				var objPlugin = new NSEditor.__plugins[plugginName](this);
				this.__pluginsInstances[plugginName] = {prototype: NSEditor.__plugins[plugginName],instance: objPlugin};
			}
		}
	};
	
	NSEditor.prototype.__callSetSettingsInPluggin = function() 
	{
		this.__callFunctionInPlugins("setSettings");
	};
	
	NSEditor.prototype.__callInitializeInPluggin = function() 
	{
		this.__callFunctionInPlugins("initialize");
	};
	
	NSEditor.prototype.__callComponentsInitializedInPluggin = function() 
	{
		this.__callFunctionInPlugins("componentsInitialized");
	};
	
	NSEditor.prototype.__callDestroyInPluggin = function() 
	{
		this.__callFunctionInPlugins("destroy");
	};
	
	NSEditor.prototype.__callResizedInPluggin = function() 
	{
		this.__callFunctionInPlugins("resized");
	};
	
	NSEditor.prototype.__callAddStyleIFrameInPluggin = function() 
	{
		return this.__callFunctionInPlugins("addStyleInIFrame");
	};
	
	NSEditor.prototype.__callFunctionInPlugins = function(functionName,arrParams) 
	{
		var arrRetValue = [];
		if(this.__pluginsInstances)
		{
			for(var plugginName in this.__pluginsInstances)
			{
				var objPlugin = this.__pluginsInstances[plugginName].instance;
				if(objPlugin && objPlugin[functionName])
				{
					var retValue = objPlugin[functionName].apply(objPlugin,arrParams);
					if(!this.util.isUndefined(retValue))
					{
						arrRetValue.push({name: plugginName,value: retValue});
					}
				}
			}
		}
		return arrRetValue;
	};
	
	NSEditor.prototype.__callPromptBox = function(titleHtml,message,okText,cancelText,okHandler,cancelHandler) 
	{
		if(this.__config["promptBoxCallback"])
		{
			this.__config["promptBoxCallback"](titleHtml,message,okText,cancelText,okHandler,cancelHandler);
		}
		else
		{
			var closeConfirmBox = function(event)
			{
				document.body.removeChild(divContainer);
			};
			var divContainer = this.util.createDiv("nsEditorConfirmContainer","nsEditorPromptOvelay");
			var content = "<div class='nsEditorPrompt'>" +
	    						"<header>" +
	    							"<h3> " + titleHtml + " </h3> " +
	    							"<i id='nsEditorIconClose' class='fa fa-close'></i>" +
	    						"</header>" +
	        					"<div class='nsEditorPromptBody'>" +
	        						" <p> " + message + " </p> " +
	        					"</div>" +
	        					"<footer>" +
							         "<div class='controls'>" +
							             " <button id='btnEditorConfirmOk' class='nsEditorPromptButton nsEditorPromptButtonDanger'>" + okText + "</button> " +
							             " <button id='btnEditorConfirmCancel' class='nsEditorPromptButton nsEditorPromptButtonDefault'>" + cancelText + "</button> " +
							         "</div>" +
							    "</footer>" +
						   "</div>";
			divContainer.innerHTML = content;
			document.body.insertBefore(divContainer,document.body.firstChild);
			this.util.addEvent(document.getElementById("nsEditorIconClose"),"click",closeConfirmBox);
			this.util.addEvent(document.getElementById("btnEditorConfirmOk"),"click",function(event){
				if(okHandler)
				{
					okHandler(event);
				}
				closeConfirmBox();
			});
			this.util.addEvent(document.getElementById("btnEditorConfirmCancel"),"click",function(event){
				if(cancelHandler)
				{
					cancelHandler(event);
				}
				closeConfirmBox();
			});
		}
	};
	//end of section of functions for pluggin
	NSEditor.prototype.__findCurrentElement = function(checkChild) 
	{
		if(!this.__isSourceMode)
		{
			checkChild = (checkChild === void 0) ? true : Boolean.parse(checkChild);
			var selection = this.__getInternalSelection();
			if(selection && selection.rangeCount > 0) 
			{
				var range = selection.getRangeAt(0);
                var node = range.startContainer;
                var isLastChild = false;
                var container = this.__getTextArea();
                if(!this.util.isTextNode(node))
                {
                	node = range.startContainer.childNodes[range.startOffset];
                	if (!node) 
                	{
                        node = range.startContainer.childNodes[range.startOffset - 1];
                        isLastChild = true;
                    }
                	if(node && selection.isCollapsed && !this.util.isTextNode(node)) 
                	{
                		var getChild = function (nodeParam) 
                		{
                            return isLastChild ? nodeParam.lastChild : nodeParam.firstChild;
                        };
                		if (!isLastChild && this.util.isTextNode(node.previousSibling)) 
                		{
                            node = node.previousSibling;
                        }
                        else if (checkChild) 
                        {
                            var current = getChild(node);
                            while (current) 
                            {
                                if (current && this.util.isTextNode(current)) 
                                {
                                    node = current;
                                    break;
                                }
                                current = getChild(current);
                            }
                        }
                	}
                	if(node && !selection.isCollapsed && !this.util.isTextNode(node)) 
                	{
                		var leftChild = node;
                		var rightChild = node;
                        do 
                        {
                            leftChild = leftChild.firstChild;
                            rightChild = rightChild.lastChild;
                        } 
                        while (leftChild && rightChild && !this.util.isTextNode(leftChild));
                        if (leftChild === rightChild && leftChild && this.util.isTextNode(leftChild)) 
                        {
                            node = leftChild;
                        }
                	}
                }
                if(node && this.util.isElementInOrParent(node,container))
                {
                	return node;
                }
			}
		}
		return null;
	};
	
	NSEditor.prototype.__selectElement = function(node,isInward) 
	{
		if(node)
		{
			isInward = Boolean.parse(isInward);
			var textArea = this.__getTextArea();
			var isExistsInside =  this.editorUtil.loopParents(node,function(paramElement){
										return paramElement === textArea || (paramElement && paramElement.parentNode === textArea);
									},textArea);
			if(isExistsInside)
			{
				var range = this.__createRange();
			    range[isInward ? 'selectNodeContents' : 'selectNode'](node);
			    this.__selectRange(range);
			}
			else
			{
				this.util.warning("NSEditor","Node element must be in editor");
			}
		}
	};
	
	NSEditor.prototype.__isCollapsed = function() 
	{
		var selection = this.__getInternalSelection();
		if(selection)
		{
			for (var count = 0; count < selection.rangeCount; count++) 
			{
	            if (!selection.getRangeAt(count).collapsed) 
	            {
	                return false;
	            }
	        }
		}
        return true;
    };
    
    NSEditor.prototype.__setCursorAfter = function(node) 
	{
    	if(node)
    	{
    		var textArea = this.__getTextArea();
    		var isExistsInside =  this.editorUtil.loopParents(node,function(paramElement){
				return paramElement === textArea || (paramElement && paramElement.parentNode === textArea);
			},textArea);
			if(isExistsInside)
			{
				var range = this.__createRange();
				var fakeNode = null;
		        if (!this.util.isTextNode(node)) 
		        {
		            fakeNode = document.createTextNode("");
		            range.setStartAfter(node);
		            range.insertNode(fakeNode);
		            range.selectNode(fakeNode);
		        }
		        else 
		        {
		            range.setEnd(node, node.nodeValue !== null ? node.nodeValue.length : 0);
		        }
		        range.collapse(false);
				this.__selectRange(range);
				return fakeNode;
			}
			else
			{
				this.util.warning("NSEditor","Node element must be in editor");
			}
    	}
    	return null;
	};
	
	NSEditor.prototype.__setCursorBefore = function(node) 
	{
    	if(node)
    	{
    		var textArea = this.__getTextArea();
    		var isExistsInside =  this.editorUtil.loopParents(node,function(paramElement){
				return paramElement === textArea || (paramElement && paramElement.parentNode === textArea);
			},textArea);
			if(isExistsInside)
			{
				var range = this.__createRange();
				var fakeNode = null;
		        if (!this.util.isTextNode(node)) 
		        {
		            fakeNode = document.createTextNode("");
		            range.setStartAfter(node);
		            range.collapse(true);
		            range.insertNode(fakeNode);
		            range.selectNode(fakeNode);
		        }
		        else 
		        {
		            range.setStart(node, node.nodeValue !== null ? node.nodeValue.length : 0);
		        }
		        range.collapse(true);
				this.__selectRange(range);
				return fakeNode;
			}
			else
			{
				this.util.warning("NSEditor","Node element must be in editor");
			}
    	}
    	return null;
	};
	
	NSEditor.prototype.__setCursorIn = function(node,inStart) 
	{
    	if(node)
    	{
    		inStart = (inStart === void 0) ? true : Boolean.parse(inStart);
    		var textArea = this.__getTextArea();
    		var isExistsInside =  this.editorUtil.loopParents(node,function(paramElement){
				return paramElement === textArea || (paramElement && paramElement.parentNode === textArea);
			},textArea);
			if(isExistsInside)
			{
				var range = this.__createRange();
				var startNode = node;
				var lastNode = node;
				do 
				{
		            if(this.util.isTextNode(startNode)) 
		            {
		                break;
		            }
		            lastNode = startNode;
		            startNode = inStart ? startNode.firstChild : startNode.lastChild;
		        } 
				while (startNode);
				if (!startNode) 
				{
		            var fakeNode = document.createTextNode("");
		            if (!/^(img|br|input)$/i.test(lastNode.nodeName)) 
		            {
		            	lastNode.appendChild(fakeNode);
		            	lastNode = fakeNode;
		            }
		            else 
		            {
		            	startNode = lastNode;
		            }
		        }
				range.selectNodeContents(startNode || lastNode);
		        range.collapse(inStart);
		        this.__selectRange(range);
		        return lastNode;
			}
			else
			{
				this.util.warning("NSEditor","Node element must be in editor");
			}
    	}
    	return null;
	};
	
	 NSEditor.prototype.__insertNode = function (node, insertCursorAfter) 
	 {
		if(node)
		{
			insertCursorAfter = (insertCursorAfter === void 0) ? true : Boolean.parse(insertCursorAfter);
			if (!this.hasFocus() && !this.__isSourceMode) 
	        {
				this.__restoreSelection();
	            this.__setFocusOnControl(true);
	        }
			if (!this.__isCollapsed()) 
			{
				this.__executeCommand("Delete");
			}
			var tempNode = null;
			var selection = this.__getInternalSelection();
			var textArea = this.__getTextArea();
			if(selection && selection.rangeCount)
			{
				var range = selection.getRangeAt(0);
				if (this.util.isElementInOrParent(range.commonAncestorContainer,textArea)) 
				{
		                if (/^(BR|HR|IMG|VIDEO)$/i.test(range.startContainer.nodeName) && range.collapsed) 
		                {
		                	tempNode = range.startContainer.parentNode;
		                	if(tempNode)
		                	{
		                		tempNode.insertBefore(node, range.startContainer);
		                	}
		                }
		                else 
		                {
		                    range.deleteContents();
		                    range.insertNode(node);
		                }
	            }
	            else 
	            {
	            	textArea.appendChild(node);
	            }
			}
			else 
            {
            	textArea.appendChild(node);
            }
			if (insertCursorAfter) 
			{
	            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) 
	            {
	                node.lastChild && this.setCursorAfter(node.lastChild);
	            }
	            else 
	            {
	                this.__setCursorAfter(node);
	            }
	        }
			this.__dispatchInternalEvent("afterInsertNode");
		}
        
    };
    
    var editorUtil = function(nsEditor)
    {
    	this.__nsEditor = nsEditor;
		this.util = nsEditor.util;
		
		this.REGEX_BLOCK = /^(PRE|DIV|P|LI|H[1-6]|BLOCKQUOTE|TD|TH|TABLE|BODY|HTML|FIGCAPTION|FIGURE|DT|DD)$/i;
		
		this.loopParents = function(element,callback,root)
		{
			if (!element || !this.util.isElementInOrParent(element,root)) 
			{
	            return null;
	        }
			var start = element;
	        do 
	        {
	            if (callback(start)) 
	            {
	                return start;
	            }
	            if (start === root || !start.parentNode) 
	            {
	                break;
	            }
	            start = start.parentNode;
	        } 
	        while(start && start !== root);
	        return null;
		};
		
		this.getClosestElement = function(element,tags,root)
		{
			var condition;
	        if (typeof tags === 'function') 
	        {
	            condition = tags;
	        }
	        else if (tags instanceof RegExp) 
	        {
	            condition = function (tag) 
	            { 
	            	return tag && tags.test(tag.nodeName); 
	            };
	        }
	        else 
	        {
	            condition = function (tag) 
	            {
	                return tag && new RegExp('^(' + tags + ')$', 'i').test(tag.nodeName);
	            };
	        }
	        return this.loopParents(element, condition, root);
		};
		
		this.isNode = function(element, win) 
		{
	        if (!element) 
	        {
	            return false;
	        }
	        if (typeof win === 'object' && win && (typeof win.Node === 'function' || typeof win.Node === 'object')) 
	        {
	            return element instanceof win.Node;
	        }
	        return false;
	    };
		
		this.isBlock = function(element, win) 
		{
	        if(element && typeof element === "object")
	        {
	        	var isNode = this.isNode(element, win);
	        	var isBlock = this.REGEX_BLOCK.test(element.nodeName);
	        	if(isNode && !isBlock)
	        	{
	        		var display = this.util.getStyleValue(element,"display");
	        		if(display && display.includes("block"))
	        		{
	        			isBlock = true;
	        		}
	        	}
	        	if(isNode && isBlock)
	        	{
	        		return true;
	        	}
	        }
	        return false; 
	    };
		
	    this.isCell = function(element, win) 
	    {
	    	return this.isNode(element, win) && /^(td|th)$/i.test(element.nodeName);
		};
		
		this.isImage = function(element, win) 
		{
		    return (this.isNode(element, win) && /^(img|svg|picture|canvas)$/i.test(element.nodeName));
		};
		    
    };
    
	NSEditor.TOOLBAR_BUTTONS_BOLD = "bold";
	NSEditor.TOOLBAR_BUTTONS_ITALIC = "italic";
	NSEditor.TOOLBAR_BUTTONS_UNDERLINE = "underline";
	NSEditor.TOOLBAR_BUTTONS_STRIKETHROUGH = "strikeThrough";
	NSEditor.TOOLBAR_BUTTONS_SUBSCRIPT = "subscript";
	NSEditor.TOOLBAR_BUTTONS_SUPERSCRIPT = "superscript";
	NSEditor.TOOLBAR_BUTTONS_FONTFAMILY = "fontFamily";
	NSEditor.TOOLBAR_BUTTONS_FONTSIZE = "fontSize";
	NSEditor.TOOLBAR_BUTTONS_PARAGRAPHFORMAT = "paragraphFormat";
	NSEditor.TOOLBAR_BUTTONS_ALIGN = "align";
	NSEditor.TOOLBAR_BUTTONS_ORDEREDLIST = "orderedList";
	NSEditor.TOOLBAR_BUTTONS_UNORDEREDLIST = "unorderedList";
	NSEditor.TOOLBAR_BUTTONS_UNDO = "undo";
	NSEditor.TOOLBAR_BUTTONS_REDO = "redo";
	NSEditor.MODE_TEXTAREA = "textArea";
	NSEditor.MODE_IFRAME = "iframe";
	
	return NSEditor;
})();
nsModuleExport(this,"NSEditor",NSEditor,module,exports);
