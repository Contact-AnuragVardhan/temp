
const appRoutes: Routes = [
  {
    path: 'createRequest',
    component: CreateRequestComponent,
    canActivate: [AuthorizeService],
    data: { preload: true },
    pathMatch: 'full'
  },
  
  @Injectable()
export class AuthorizeService implements CanActivate 
{
    constructor(private common: CommonService, private router: Router) 
    {
    }
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean 
    {
        let retValue: boolean = true;
        let url: string = state.url;
        this.common.linkPath = url;
        if(!this.common.logInUserInfoObj)
        {
            //this.Common.linkPath = url;
            retValue = false;
        }
        if(this.common.menuList && url && url != "" && !this.common.isLinkPathValidForUserRole(this.common.menuList,url.substring(1)))
        {
            retValue = false;
        }
        return retValue;
    }
}


@NgModule({
  imports: [
    CreateRequestModule,
    MyApprovalModule,
    MyRequestsModule,
    ReportModule,
    AboutModule,
    DefaultWorkflowModule,
    UploadTemplateModule,
    DivisionSetupModule,
    RouterModule.forRoot(appRoutes,{useHash: true, errorHandler: CustomRouterErrorHandler })
  ],
  exports: [
    RouterModule
  ],
  providers: [
  ]
})

providers: [
  	LoggedInUserService,
  	NMSharedService,
  	CommonService,
    AuthorizeService,
  	{
	    provide: HTTP_INTERCEPTORS,
	    useClass: NMHttpInterceptor,
	    multi: true,
  	},
    {provide: ErrorHandler, useClass: CustomErrorHandler},
    { provide: RouteReuseStrategy, useClass: PreventErrorRouteReuseStrategy }
  ],
  bootstrap: [ AppComponent ],
  entryComponents: [NSMessageBoxAngularComponent, NSTextBoxAngularComponent, RequestIDComponent],
})

@Injectable()
export class MyApprovalService extends BaseService
{
    constructor(private http: HttpClient) 
    {
      super();
    }
    
    getRequestsForApproval(): Observable<any>
    {
      return this.http.post<any>(this.getURL("getRequestsForApproval"),null);
    }    
    
}
