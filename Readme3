import * as React from "react";
import { NSGridReact, INSGridReactSettings } from '../../lib/nsGrid/nsGridReact';
import { INSGridColumn, INSGridCustomClassSetting, INSGridEditorSetting } from '../../lib/nsGrid/interfaces';
import { NSMessageBoxReact, INSMessageBoxReactSettings } from '../../lib/nsMessageBox/nsMessageBoxReact';
import { INSMessageBoxCustomSetting } from '../../lib/nsMessageBox/interfaces';

import { NewDatasource } from './newDatasource';


import {ExportService} from '../helper/exportService';
import {BaseComponent} from '../base/baseComponent';

export class ManageDatasources extends BaseComponent
{ 
    private grid: NSGridReact;
    private modal: NSMessageBoxReact;
    private modalEmployee: NSMessageBoxReact;
    
    constructor(public props: any, public state: any) 
    {
        super(props,state);
        const customClass: INSGridCustomClassSetting = {headerCell:"columnClass",firstBodyColumn:"columnClass", nonFirstBodyColumn:"columnClass"};
        
        const gridColumn: INSGridColumn[] = [
                                                  {headerText: "Datasource Name", dataField: "DATASOURCE_NAME", width: "20%",
                                                        filter:{advancedFilterPopUpPos: "bottom-right"},enableEditable: false},
                                                  {headerText: "Datasource Description", dataField: "DATASOURCE_DESC", width: "35%",truncateToFit: true,enableEditable: false},
                                                  {headerText: "Datasource Connection", dataField: "CONNECTION_NAME", width: "35%",truncateToFit: true,enableEditable: false},
                                                  {headerText: "Modified By", dataField: "UPDATED_BY", width: "15%",enableEditable: false},
                                                  {headerText: "Modified Date", dataField: "UPDATED_DATE", width: "20%",enableEditable: false},
                                                  {headerText: "Action", dataField: "MODIFIED_DT", width: "20%",itemRenderer: this.actionRender.bind(this),
                                                          excludeFromExport:true,enableEditable: false , enableFilter:false , sortable:false}
                                                 
                                                 ];
        
        const editorSetting: INSGridEditorSetting = {clickType:NSGridReact.EDITOR_EDITING_NOCLICK,enableMultipleEdit:true};
        const gridSetting: INSGridReactSettings = {type: "normal", columnResizable: true,columnSortable:true,
                columnDraggable: false, enableFilter: true, enableAdvancedFilter: true,
               columns: gridColumn, customClass: customClass,rowKeyField:"COST_CODE_COMPANY_REGION",heightOffset:220,
               enableVirtualScroll: true,editorSetting: editorSetting,enableEditable: true};
        const modalSetting: INSMessageBoxReactSettings = {enableModalCloseOnEscape: true,enableCloseIconVisibility: true};
        
        this.state = {
                gridSetting: gridSetting,
                modalSetting: modalSetting
        };
    }
    
   render() {
        const buttonStyle: any = {"marginRight": "10px"};
        const gridSetting: INSGridReactSettings = this.state.gridSetting;
        const modalSetting: INSMessageBoxReactSettings = this.state.modalSetting;
        const getDatasources: any = this.getDatasources.bind(this);
       const createNewDatasource: any = this.createNewDatasource.bind(this);
     
   
        const exportToExcel: any = this.exportToExcel.bind(this);
   
        return (
          <div className="box box-nomura-red">
              <div className="box-header">
                    <h3 className="box-title">Manage Data Connections</h3>
                    <div className="pull-right box-tools">
                         <button className="btn btn-nomura-green btn-sm" onClick={createNewDatasource}>
                    <i className='fa fa-table'></i>&nbsp;&nbsp;&nbsp;New Datasource
                         </button>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
                
                        <button className="btn btn-nomura-red btn-sm" onClick={getDatasources}>
                            <i className='fa fa-refresh text-white'></i>&nbsp;&nbsp;&nbsp;Refresh Grid
                        </button>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;
                        <button className="btn btn-nomura-default btn-sm" data-toggle="tooltip" data-placement="top" title="Export to Excel"
                                onClick={exportToExcel}>
                            <i className="fa fa-file-excel-o text-nomura-green"></i>
                        </button>
                    </div>
              </div>
              <div className="box-body">
                  <NSGridReact setting={gridSetting} dataSource={[]} ref={(ref) => this.grid = ref}>
                  </NSGridReact>
              </div>
                
             <NSMessageBoxReact setting={modalSetting} ref={(ref) => this.modal = ref} />
             <NSMessageBoxReact setting={modalSetting} ref={(ref) => this.modalEmployee = ref} />
          </div>
        )
   }
        
   componentDidMount() 
   {
      this.grid.dataSource([]);
      this.getDatasources() ; 
   }
      
   
   
   
   private actionRender(item: any,dataField: string,index: number,colIndex: number,row: any): any
   {
       if(item)
       {
           /*const anchor:any = React.createElement("a",{onClick: this.openCostCenterEmployeeListPopup.bind(this,item)}, "View Employee");
           return anchor;*/
           const anchor:any = document.createElement("span");
           anchor.innerHTML = '<i class="fa fa-edit" style="cursor:hand"></i>';
           anchor.addEventListener("click",this.modifyData.bind(this,item));
           return anchor;
       }
       return null;
   }
   
   private modifyData(item: any,event: any): void
   {     
       event.preventDefault();
       event.stopPropagation();
       console.log(item) ; 
       this.updateDatasource(item);
   }
   
   

   

   
   
   
   private getDatasources(): void
   {
       this.grid.dataSource([]);
       const self : any = this;
       this.context.ajax.post(this.context.getURL("getDatasources"),{region: this.context.nefGroup},null)
       .then(function(response){
           self.context.globalIntercept(response,function(response){
               if(self.grid)
                   {
               self.grid.dataSource(response)
                   }
           });
       })
       .catch(err => this.context.globalCatchBlock(err));
   }
   
   
   
   private createNewDatasource()
   {
       this.manageDatasource({ID:0,title:'Create New Datasource', buttonLabel:'Add Datasource'}) 
   }
   
   private updateDatasource(data:any)
   {
       this.manageDatasource({ID:data.ID,title:'Update Datasource', buttonLabel:'Update Datasource'}) 
   }
   
   
   private manageDatasource(data:any):void
   {
       
          const self : any = this;
   
   
   this.context.ajax.post(this.context.getURL("getDataConnections"),{},null)
   .then(function(response){
       self.context.globalIntercept(response,function(response){
           if(response)
           {
              
               let titleHtml: string = data.title
               let buttonLabel: string = data.buttonLabel
                    
                   let modalSetting: INSMessageBoxCustomSetting = {titleHtml: titleHtml,bodyComponent: NewDatasource,
                    panelSetting:{width:"70%",height:"70%"},
                    bodyComponentData: {item:data, connections:response , getUrl:self.context.getURL , globalIntercept:self.context.globalIntercept,popUpService:self.context.popUpService , globalCatchBlock:self.context.globalCatchBlock},
                    buttons:[{label: "Close", callback: function(event: any)
                    {
                        self.modalEmployee.close();
                        event.stopPropagation();
                    }
              } , {label: buttonLabel,cssClass:'btn btn-nomura-green btn-sm' , callback: function(event: any)
                  {
                
                  self.addNewDatasource(modalSetting.bodyComponentData.getRequestDetails()) ; 
                  self.modalEmployee.close();
                  event.stopPropagation();
              }
         }]};
              self.modalEmployee.custom(modalSetting);
               
           }
           else
           {
               self.context.popUpService.showAlertPopup("Failed to update chinese wall status.");
           }
       });
   })
   .catch(err => this.context.globalCatchBlock(err));
   
   
          
   }
   
   
   
   
   
   
   private addNewDatasource(data:any): void
   {
           
           const self : any = this;

           console.log(data);
               
           this.context.ajax.post(this.context.getURL("addDatasource"),{id:data.id,query:data.query, datasourceName:data.datasourceName,datasourceDesc:data.datasourceDesc,connectionId:data.connectionId, attributes:data.attributes    })
           .then(function(response){
               self.context.globalIntercept(response,function(response){
                   if(response)
                   {
                       self.context.popUpService.showAlertPopup("Connection added successfully.");
                       self.getDatasources();
                   }
                   else
                   {
                       self.context.popUpService.showAlertPopup("Failed to update chinese wall status.");
                   }
               });
           })
           .catch(err => this.context.globalCatchBlock(err));
       
   }
   
   
   
   
   
   private exportToExcel(): void
   {
       let fileName: string = "data_connections";
       let grid: NSGridReact = this.grid;
       let setting: INSGridReactSettings = this.state.gridSetting;
       let exportService: ExportService = new ExportService();
       exportService.initialize(grid,grid.getFilteredData(),setting.columns,"normal","normal",this.context,null,null);
       exportService.excel(fileName,fileName,fileName);
   }

}
