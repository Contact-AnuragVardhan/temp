style = new XlsxStyle(xlsxUtil);

var XlsxStyle = function(util)
		{
			var self = this;
			var PATTERN_TYPES = ['none', 'solid', 'darkGray', 'mediumGray', 'lightGray', 'gray125', 'gray0625', 'darkHorizontal', 'darkVertical', 'darkDown', 'darkUp', 'darkGrid', 'darkTrellis', 'lightHorizontal', 'lightVertical', 'lightDown', 'lightUp', 'lightGrid', 'lightTrellis'];
			var nameIndex = 1;
			var idIndex = 0;
			var formats = [];
			var formatsByData = {};
			var formatsByNames = {};
			var predefined = {};
			
			var add = function(formatName,name,style,prop)
			{
				prop = prop ? prop : {};
				if (name && formatsByNames[name]) 
				{
					var objStyle = getStyleObj(style,prop);
					var strStyle = util.isObject(objStyle) ? JSON.stringify(objStyle) : objStyle;

					if (strStyle !== formatsByNames[name].stringFormat) 
					{
						addNewStyle(formatName,objStyle, strStyle, name);
					}
					return name;
				}
				if (!name && util.isString(style)) 
				{
					if (formatsByNames[style]) 
					{
						return style;
					} 
					else if (predefined[style]) 
					{
						return add(style,predefined[style]);
					}
				}
				var objStyle = getStyleObj(style,prop);
				var stringFormat = util.isObject(objStyle) ? JSON.stringify(objStyle) : objStyle;
				var styleFormat = formatsByData[stringFormat];

				if (!styleFormat) 
				{
					styleFormat = addNewStyle(formatName,objStyle,stringFormat,name);
				} 
				else if (name && !formatsByNames[name]) 
				{
					styleFormat.name = name;
					formatsByNames[name] = styleFormat;
				}
				return styleFormat.name;
			};
			
			var getStyle = function(formatName,format) 
			{
				if (util.isString(format)) 
				{
					var styleFormat = formatsByNames[format];
					return styleFormat ? styleFormat.format : format;
				}
				return format;
			};
			
			var getStyleID = function(formatName,name) 
			{
				var styleFormat = formatsByNames[name];
				return styleFormat ? styleFormat.formatId : getPredefinedID(name);
			};
			
			var getPredefinedID = function(formatName,name) 
			{
				if (predefined[name]) 
				{
					return getStyleID(add(formatName,name,predefined[name]));
				}
				return null;
			};
			
			var addNewStyle = function(formatName,objStyle,strStyle,name)
			{
				name = name || formatName + nameIndex++;
				var styleFormat = {
					name: name,
					formatId: idIndex++,
					format: objStyle,
					stringFormat: strStyle
				};

				formats.push({name:formatName,style:styleFormat});
				formatsByData[strStyle] = styleFormat;
				formatsByNames[name] = styleFormat;

				return styleFormat;
			};
			
			var getStyleObj = function(style,prop)
			{
				var retValue = {};
				retValue["fillType"] = prop.merge ? style.fillType : prop.fillType;
				if(retValue["fillType"] === "pattern")
				{
					var fgColor = (prop.merge ? style.fgColor : style.color) || 'FFFFFFFF';
					var bgColor = (prop.merge ? style.bgColor : style.backColor) || 'FFFFFFFF';
					var patternType = prop.merge ? style.patternType : style.type;
					
					retValue["patternType"] = util.hasInArray(PATTERN_TYPES, patternType) ? patternType : 'solid';
					if (prop.isTable && result.patternType === 'solid') 
					{
						retValue["fgColor"] = bgColor;
						retValue["bgColor"] = fgColor;
					} 
					else 
					{
						retValue["fgColor"] = fgColor;
						retValue["bgColor"] = bgColor;
					}
				}
				else 
				{
					if (style['left'] !== undefined)
					{
						retValue.left = style.left || 0;
						retValue.right = style.right || 0;
						retValue.top = style.top || 0;
						retValue.bottom = style.bottom || 0;
					} 
					else 
					{
						retValue.degree = style.degree || 0;
					}
					retValue.start = style.start || 'FFFFFFFF';
					retValue.end = style.end || 'FFFFFFFF';
				}
			};
			
			self.add = add;
			self.getStyle = getStyle;
			self.getStyleID = getStyleID;
			self.getPredefinedID = getPredefinedID;
		};
    
    if (item.style) 
						{
							item.styleID = util.addStyle(style,item.style,null,"format");
						}
            
            
            var hasInArray = function(arrSource,value)
			{
				 return (arrSource.indexOf(value) > -1);
			};
			
			var isObject = function(refObject)
			{
				if (typeof refObject === 'object' && refObject !== null) 
				{
				    return true;
				} 
				return false;
			};
			
			var isString = function(object) 
			{
			    return typeof object == "string";
			};
			
			var addStyle = function(objStyle,style,prop,formatName)
			{
				return objStyle.add(formatName,null,style,prop);
			};
			self.hasInArray = hasInArray;
			self.isObject = isObject;
			self.isString = isString;
      self.addStyle = addStyle;
