this.__COLUMNSETTING_ICON_ID = "nsSvgColumnSetting";

NSSvgShapes.prototype.addColumnSettingIcon = function() 
	{
        var COLUMNSETTING_ICON_VIEWPORT = "0 0 1000 1000";
        var COLUMNSETTING_ICON_PATH = "M898.1,10H668.4h-30.6H362.2h-30.6H101.9C51.1,10,10,51.1,10,101.9v229.7v566.6c0,50.7,41.1,91.9,91.9,91.9h229.7h30.6h275.6h30.6h229.7c50.7,0,91.9-41.1,91.9-91.9V331.6V101.9C990,51.1,948.9,10,898.1,10z M331.6,959.4H117.2c-42.3,0-76.6-34.3-76.6-76.6V362.2h290.9V959.4z M637.8,959.4H362.2V362.2h275.6V959.4z M959.4,882.8c0,42.3-34.3,76.6-76.6,76.6H668.4V362.2h290.9V882.8z M959.4,331.6H40.6V117.2c0-42.3,34.3-76.6,76.6-76.6h214.4h30.6h275.6h30.6h214.4c42.3,0,76.6,34.3,76.6,76.6V331.6 Z";
        var group = this.__objSVG.createGroup(this.__COLUMNSETTING_ICON_ID + "group");
        var path = this.__objSVG.createPath(this.__COLUMNSETTING_ICON_ID + "path", COLUMNSETTING_ICON_PATH, null);
        group.appendChild(path);
        this.__objSVG.addElementInSymbol(this.__COLUMNSETTING_ICON_ID, COLUMNSETTING_ICON_VIEWPORT, group);
    };
    
    "use strict";
var NSPinTip = (function()
{
	function NSPinTip(component,option)
	{
		this.__component = component;
		this.__setting = option;
		this.__config = {};
		this.__id = null;
		this.__divTipContainer = null;
		this.__divTip = null;
		this.__divTipArrow = null;
		this.__itemRenderer = null;
		this.__currentPosition = null;
		this.__isVisible = false;
		this.__styleSuffix = "nsPinTip";
		
		this.util = null;
		this.__componentMouseOverRef = null;
		this.__componentMouseOutRef = null;
		this.__windowResizeRef = null;
		this.__windowScrollRef = null;
		this.__documentClickHandlerRef = null;
		this.__initialize();
	};
	
	NSPinTip.prototype.show = function(text)
	{
		var self = this;
		var afterShow = function()
		{
			self.__isVisible = true;
			if(self.__config["closeOnOutsideClick"])
			{
				var clickHandler = self.__popUpClickHandler.bind(self);
				self.util.addEvent(self.__divTipContainer,"click",clickHandler);
				if(!self.__documentClickHandlerRef)
				{
					self.__documentClickHandlerRef = self.__documentClickHandler.bind(self);
					self.util.addEvent(document,"click",self.__documentClickHandlerRef);
				}
			}
		};
		if(text)
		{
			this.__config.text = text;
		}
		if(this.__config.text || this.__config.template)
		{
			if(!this.__divTipContainer)
			{
				this.__currentPosition = this.__config.position;
				this.__createTip(this.__config.position);
			}
			if(this.__config.enableAnimation)
			{
				this.util.fadeIn(this.__divTipContainer,null,function(component)
				{
					afterShow();
				});
			}
			else
			{
				this.util.removeStyleClass(this.__divTipContainer,this.__getStyleName("hide"));
				afterShow();
			}
			this.__addContent();
			this.__placeTip(this.__config.position);
		}
	};
	
	NSPinTip.prototype.remove = function()
	{
		var self = this;
		var fireEvent = function()
		{
			self.__removeDocEvent();
			self.util.dispatchEvent(self.__component,NSPinTip.CLOSED);
		};
		if(this.__config.enableAnimation)
		{
			var objPinTip = this;
			this.util.fadeOut(this.__divTipContainer,function(component)
			{
				if(this.__divTipContainer)
				{
					document.body.removeChild(objPinTip.__divTipContainer);
					objPinTip.__divTipContainer = null;
					objPinTip.__isVisible = false;
					fireEvent();
				}
			});
		}
		else
		{
			if(this.__divTipContainer)
			{
				document.body.removeChild(this.__divTipContainer);
				this.__divTipContainer = null;
				this.__isVisible = false;
				fireEvent();
			}
		}
	};
	
	NSPinTip.prototype.hide = function()
	{
		var self = this;
		var fireEvent = function()
		{
			self.__removeDocEvent();
			self.util.dispatchEvent(self.__component,NSPinTip.HIDDEN);
		};
		if(this.__config.enableAnimation)
		{
			var objPinTip = this;
			this.util.fadeOut(this.__divTipContainer,function(component)
			{
				objPinTip.__isVisible = false;
				fireEvent();
			});
		}
		else
		{
			this.util.addStyleClass(this.__divTipContainer,this.__getStyleName("hide"));
			this.__isVisible = false;
			fireEvent();
		}
	};
	
	NSPinTip.prototype.destroyObject =  function()
	{
		if(this.__componentMouseOverRef)
		{
			this.util.removeEvent(this.__component,"mouseover",this.__componentMouseOverRef);
			this.__componentMouseOverRef = null;
		}
		if(this.__componentMouseOutRef)
		{
			this.util.removeEvent(this.__component,"mouseout",this.__componentMouseOutRef);
			this.__componentMouseOutRef = null;
		}
		if(this.__windowResizeRef)
		{
			this.util.removeEvent(window,"resize",this.__windowResizeRef);
			this.__windowResizeRef = null;
		}
		if(this.__windowScrollRef)
		{
			this.util.removeEvent(window,"scroll",this.__windowScrollRef);
			this.__windowScrollRef = null;
		}
		this.__removeDocEvent();
	};
	
	NSPinTip.prototype.isVisible = function()
	{
		return this.__isVisible;
	};
	
	NSPinTip.prototype.__initialize = function(properties)
	{
		this.util = new NSUtil();
		var setting = this.__setting;
		if(!setting)
		{
			setting = {};
		}
		this.__config = {
				position: setting["position"] || this.util.POS_BOTTOM,
				size: setting["size"] || NSPinTip.SIZE_MEDIUM,
				showOnMouseHover: this.util.isUndefinedOrNull(setting["showOnMouseHover"]) ? true : Boolean.parse(setting["showOnMouseHover"]),
				text: setting["text"],
				template: setting["template"],
				style: setting["style"],
				enableAnimation: Boolean.parse(setting["enableAnimation"]),
				showEvent: setting["showEvent"],
				hideEvent: setting["hideEvent"],
				hideOrRemoveAutomatic: setting["hideOrRemoveAutomatic"] || "remove",
				closeOnOutsideClick: Boolean.parse(setting["closeOnOutsideClick"]),
				title: setting["title"],
				closeRequired: Boolean.parse(setting["closeRequired"]),
				closeHtml: setting["closeHtml"] || "<span class=\"nsPopUpClose\"></span>",
		};
		
		if(!setting.customClass)
		{
			setting.customClass = {};
		}
		var customClass = setting.customClass;
		this.__config.customClass = {
				headerContainer: customClass["headerContainer"],
				title: customClass["title"],
				close: customClass["close"],
				body: customClass["body"]
		};
		
		this.__config.position = this.__config.position.toLowerCase();
		this.__config.size = this.__config.size.toLowerCase();
		
		if(this.__config.showOnMouseHover)
		{
			this.__config.showEvent = "mouseover";
			this.__config.hideEvent = "mouseout";
		}
		if(this.__config.showEvent)
		{
			this.__componentMouseOverRef = this.__componentMouseOverHandler.bind(this);
			this.util.addEvent(this.__component,this.__config.showEvent,this.__componentMouseOverRef);
		}
		if(this.__config.hideEvent)
		{
			this.__componentMouseOutRef = this.__componentMouseOutHandler.bind(this);
			this.util.addEvent(this.__component,this.__config.hideEvent,this.__componentMouseOutRef);
		}
		this.__windowResizeRef = this.__windowScrollResizeHandler.bind(this);
		this.__windowScrollRef = this.__windowScrollResizeHandler.bind(this);
		this.util.addEvent(window,"resize",this.__windowResizeRef);
		this.util.addEvent(window,"scroll",this.__windowScrollRef);
	};
	
	NSPinTip.prototype.__createTip = function(position)
	{
		if(!this.__divTipContainer)
		{
			this.__divTipContainer = this.util.createDiv(this.__getID() + "#nsTipContainer",null);
			this.__setTipStyle(position);
			if(this.__config["title"] || this.__config["closeRequired"])
			{
				this.__divTipContainer.style.minHeight = "50px";
				var divHead = this.util.createDiv(null,"nsPopUpHeader");
				var divHeadContainer = this.util.createDiv(null,"nsPopUpHeaderContainer");
				this.__applyCustomClass(divHeadContainer,"headerContainer");
				var divTitleContainer = this.util.createDiv(null,"nsPopUpTitleContainer");
				this.__applyCustomClass(divTitleContainer,"title");
				if(this.__config["title"])
				{
					var divTitle = this.util.createDiv(null,"nsPopUpTitle");
					divTitle.innerHTML = this.__config["title"];
					divTitleContainer.appendChild(divTitle);
				}
				divHeadContainer.appendChild(divTitleContainer);
				var divCloseContainer = this.util.createDiv(null,"nsPopUpCloseContainer");
				this.__applyCustomClass(divCloseContainer,"close");
				if(this.__config["closeRequired"])
				{
					var btnTitle = this.util.createElement("button",null,"nsPopUpBtnClose");
					divCloseContainer.appendChild(btnTitle);
					btnTitle.innerHTML = this.__config["closeHtml"];
					var self = this;
					this.util.addEvent(btnTitle,"click",function(event){
						self.__closeHandler.call(self,event);
					});
				}
				divHeadContainer.appendChild(divCloseContainer);
				divHead.appendChild(divHeadContainer);
				this.__divTipContainer.appendChild(divHead);
			}
			this.__divTipArrow = this.util.createDiv(this.__getID() + "#nsTipArrow", this.__getStyleName("arrow"));
			this.__divTipContainer.appendChild(this.__divTipArrow);
			this.__divTip = this.util.createDiv(this.__getID() + "#nsTip",this.__getStyleName("content"));
			this.__applyCustomClass(this.__divTip,"body");
			this.__divTipContainer.appendChild(this.__divTip);
			this.__applyExtraStyle();
			document.body.appendChild(this.__divTipContainer);
		}
	};
	
	NSPinTip.prototype.__popUpClickHandler = function(event)
	{
		event.stopPropagation();
	};
	
	NSPinTip.prototype.__documentClickHandler = function(event)
	{
		event = this.util.getEvent(event);
		var target = event.target;
		if(target != this.__component && !this.__divTipContainer.contains(target))
		{
			this.__closeHandler(event);
		}
	};
	
	NSPinTip.prototype.__placeTip = function(position)
	{
		var offset = this.__getOffset(position);
		var newPosition = this.__getSuggestedPosition(position, offset);
		if (newPosition && newPosition !== position) 
		{
			position = newPosition;
			offset = this.__getOffset(position);
		}
		this.__currentPosition = position;
		this.__setTipStyle(position);
		this.__divTipContainer.style.top = offset.top + "px";
		this.__divTipContainer.style.left = offset.left + "px";
	};
	
	NSPinTip.prototype.__addContent = function()
	{
		this.util.removeAllChildren(this.__divTip);
		if(this.__config.template)
		{
			if(!this.__itemRenderer)
			{
				this.__itemRenderer = this.util.getTemplate(this.__config.template);
			}
			if(this.__itemRenderer)
			{
				this.__divTip.appendChild(this.__itemRenderer.cloneNode(true));
			}
		}
		else if(this.__config.text)
		{
			if(this.util.isString(this.__config.text))
			{
				this.__divTip.innerHTML = this.__config.text;
			}
			else
			{
				this.util.warning("NSPinTip","text is not a string.");
			}
		}
	};
	
	NSPinTip.prototype.__applyExtraStyle = function()
	{
		if(this.__config.style && this.util.isString(this.__config.style) && this.__config.style != "")
		{
			var arrStyles = this.__config.style.split(";");
			for(var count = 0; count < arrStyles.length;count++)
			{
				var arrStyle =  arrStyles[count].split(":");
				if(arrStyle && arrStyle.length === 2)
				{
					var styleProp = this.util.convertCSSPropToJS(arrStyle[0]);
					var styleValue = arrStyle[1];
					if(styleProp === "backgroundColor")
					{
						var propPos = null;
						if(this.__currentPosition.indexOf(this.util.POS_TOP) > -1)
						{
							propPos = this.util.POS_TOP;
						}
						else if(this.__currentPosition.indexOf(this.util.POS_BOTTOM) > -1)
						{
							propPos = this.util.POS_BOTTOM;
						}
						else if(this.__currentPosition.indexOf(this.util.POS_LEFT) > -1)
						{
							propPos = this.util.POS_LEFT;
						}
						else if(this.__currentPosition.indexOf(this.util.POS_RIGHT) > -1)
						{
							propPos = this.util.POS_RIGHT;
						}
						if(propPos)
						{
							propPos = propPos[0].toUpperCase() + propPos.slice(1);
						}
						this.__divTipArrow.style["border" + propPos + "Color"] = styleValue;
					}
					this.__divTip.style[styleProp] = styleValue;
				}
			}
		}
	};
	
	NSPinTip.prototype.__getOffset = function(position)
	{
		  var pad = 15;
		  var rectTip = this.__divTipContainer.getBoundingClientRect();
		  var rectComponent = this.__component.getBoundingClientRect();
		  var item = {top: 0,left:0};
		  if(rectTip && rectComponent)
		  {
			  var tipWidth = rectTip.width;
			  var tipHeight = rectTip.height;
			  var componentWidth = rectComponent.width;
			  var componentHeight = rectComponent.height;
			  var componentOffset = this.util.getOffSetForElementRectangle(rectComponent);
			  switch(position) 
			  {
				case this.util.POS_TOP:
					item.top = componentOffset.top - tipHeight;
					item.left = componentOffset.left + componentWidth / 2 - tipWidth / 2;
					break;
				case this.util.POS_BOTTOM:
					item.top = componentOffset.top + componentHeight;
					item.left = componentOffset.left + componentWidth / 2 - tipWidth / 2;
					break;
				case this.util.POS_LEFT:
					item.top =  componentOffset.top + componentHeight / 2 - tipHeight / 2;
					item.left = componentOffset.left - tipWidth;
					break;
				case this.util.POS_RIGHT:
					item.top =  componentOffset.top + componentHeight / 2 - tipHeight / 2,
					item.left = componentOffset.left + componentWidth;
					break;
				case this.util.POS_TOPLEFT:
					item.top =  componentOffset.top - tipHeight;
					item.left = componentOffset.left + componentWidth / 2 - tipWidth + pad;
					break;
				case this.util.POS_TOPRIGHT:
					item.top =  componentOffset.top - tipHeight;
					item.left = componentOffset.left + componentWidth / 2 - pad;
					break;
				case this.util.POS_BOTTOMLEFT:
					item.top =  componentOffset.top + componentHeight;
					item.left = componentOffset.left + componentWidth / 2 - tipWidth + pad;
					break;
				case this.util.POS_BOTTOMRIGHT:
					item.top =  componentOffset.top + componentHeight;
					item.left = componentOffset.left + componentWidth / 2 - pad;
					break;
			  }
		  }
		  return item;
	};
	
	NSPinTip.prototype.__getSuggestedPosition = function(position,offset)
	{
		  var tipWidth = this.__divTipContainer.clientWidth;
		  var tipHeight = this.__divTipContainer.clientHeight;
		  var top = window.scrollY;
		  var left = window.scrollX;
		  var totalWidth = window.innerWidth;
		  var totalHeight = window.innerHeight;
		
		  var objPosition = {};
		  objPosition[this.util.POS_TOP] = true;
		  objPosition[this.util.POS_BOTTOM] = true;
		  objPosition[this.util.POS_LEFT] = true;
		  objPosition[this.util.POS_RIGHT] = true;
		  
		  if (offset.top < top) 
		  {
			  objPosition[this.util.POS_TOP] = false;
		  }
		  if (offset.top + tipHeight > top + totalHeight) 
		  {
			  objPosition[this.util.POS_BOTTOM] = false;
		  }
		  if (offset.left < left)
		  {
			  objPosition[this.util.POS_LEFT] = false;
		  }
		  if (offset.left + tipWidth > left + totalWidth) 
		  {
			  objPosition[this.util.POS_RIGHT] = false;
		  }
		
		  var positions = position.split("-");
		  //below loop tries to give favourable position like bottom-right so if position has bottom and right both true it returns that position
		  for (var count = 0; count < positions.length; count++) 
		  {
			if (!objPosition[positions[count]]) 
			{
				break;
			}
			if (count === positions.length - 1) 
			{
			  return position;
			}
		  }
		  //below loop tries to give one favourable position like in bottom-right if bottom is true or right is true it gets returned
		  for (var count = 0; count < positions.length; count++) 
		  {
			if (objPosition[positions[count]]) 
			{
				return positions[count];
			}
		  }
		  if (objPosition[position]) 
		  {
			  return position;
		  }
		  for(var tmpPosition in objPosition)
		  {
			  if (objPosition[tmpPosition]) 
			  {
				  return tmpPosition;
			  }
		  }
	};
	
	NSPinTip.prototype.__componentMouseOverHandler = function(event)
	{
		event = this.util.getEvent(event);
		this.show(this.__config.text);
		event.stopPropagation();
	};
	
	NSPinTip.prototype.__componentMouseOutHandler = function(event)
	{
		this.__closeHandler(event);
	};
	
	NSPinTip.prototype.__windowScrollResizeHandler = function(event)
	{
		if(this.isVisible())
		{
			this.show(this.__config.text);
		}
	};
	
	NSPinTip.prototype.__closeHandler = function(event)
	{
		if(this.__config.hideOrRemoveAutomatic == "remove")
		{
			this.remove();
		}
		else
		{
			this.hide();
		}
	};
	
	NSPinTip.prototype.__removeDocEvent = function()
	{
		if(this.__documentClickHandlerRef)
		{
			this.util.removeEvent(document,"click",this.__documentClickHandlerRef);
			this.__documentClickHandlerRef = null;
		}
	};
	
	NSPinTip.prototype.__setTipStyle = function(position)
	{
		var classname = this.__styleSuffix;
		var posStyle = this.__getStyleName(position.toLowerCase());
		if(!posStyle)
		{
			posStyle = this.__getStyleName("top");
		}
		classname += " " + posStyle;
		classname += " " + this.__getStyleName(this.__config.size);
		this.__divTipContainer.setAttribute("class", classname);
	};
	
	NSPinTip.prototype.__applyCustomClass = function(element,type)
	{
		if(element && type && this.__config.customClass[type])
		{
			this.util.addStyleClass(element,this.__config.customClass[type]);
		}
	};
	
	NSPinTip.prototype.__getStyleName =  function(styleName)
	{
		return this.__styleSuffix + "-" + styleName;
	};
	
	NSPinTip.prototype.__getID = function()
	{
		if(!this.__id)
		{
			if(this.__component.hasAttribute("id"))
			{
				this.__id = this.__component.getAttribute("id");
			}
			else if(this.__component.hasAttribute("name"))
			{
				this.__id = this.__component.getAttribute("name");
			}
			else
			{
				this.__id = "comp" + this.util.getUniqueId();
			}
		}
		
		return this.__id;
	};
	
	NSPinTip.SIZE_LARGE = "large";
	NSPinTip.SIZE_MEDIUM = "medium";
	NSPinTip.SIZE_LOW = "low";
	
	NSPinTip.CLOSED = "closed";
	NSPinTip.HIDDEN = "hidden";
	
	return NSPinTip;
})();
nsModuleExport(this,"NSPinTip",NSPinTip,module,exports);
