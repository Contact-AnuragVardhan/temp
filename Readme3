import * as React from "react";
import { HashRouter } from 'react-router-dom';
import { Route } from 'react-router'
import {useGlobalContext} from '../globalContext'

import {  withRouter, Redirect} from 'react-router-dom';

import { NSNavigationReact, INSNavigationReactSettings } from 'nscomponentsreact';

import { HierarchicalGridDemo } from "../../modules/grid/hierarchicalGridDemo";
import { GroupingGridDemo } from "../../modules/grid/groupingGridDemo";
import { FlatGridDemo } from "../../modules/grid/flatGridDemo";
import { NSReactEvent } from '../../modules/helper/nsReactEvent';
import {BaseComponent} from '../../modules/base/baseComponent';

export class Authenticate extends BaseComponent
{
    static contextType = useGlobalContext();
    private nsNavigationReact: NSNavigationReact;
    private selectedMenu:any = null;
    private divContent: HTMLDivElement; 
    
    constructor(public props: any, public state: any) 
    {
        super(props,state);
        let navSetting: INSNavigationReactSettings = {header:"NAVIGATION",showCollapseIcon:true,iconCollapse:"<i class='fa fa-bars pull-right'></i>",titleField:"menuName",childField:"childMenus",iconPosition:"right",
                        iconMenuExpanded:"<i class='fa fa-angle-left'></i>",iconMenuCollapsed:"<i class='fa fa-angle-left'></i>",collapseTopOffset:-20};
        
        let dataSource: any[] = [{menuName:"Grid Demo",link:"#",iconBeforeHtml:"<i class='fa fa-file-o'></i>",iconAfterHtml:null,expanded:true,              
                     childMenus:[{menuName:"Hierarchical Grid",link:"#hierarchicalGrid",iconBeforeHtml:"<i class='fa fa-list-alt'></i>",iconAfterHtml:null, selected:true},        
                                 {menuName:"Grouping Grid",link:"#groupingGrid",iconBeforeHtml:"<i class='fa fa-users'></i>",iconAfterHtml:null,},                          
                                 {menuName:"Flat Grid",link:"#flatGrid",iconBeforeHtml:"<i class='fa fa-random'></i>",iconAfterHtml:null,}]}];
        
        let routes: any[] = [{ path: '/hierarchicalGrid',component: HierarchicalGridDemo},
                              { path: '/groupingGrid',component: GroupingGridDemo},
                              { path: '/flatGrid',component: FlatGridDemo},     
                            ];
        this.selectedMenu = dataSource[0].childMenus[0] ; 
        navSetting.dataSource = dataSource ;
        this.state = {routes: routes, navSetting:navSetting } ; 
    }
    
    componentDidMount() 
    {
        
    }
    
    componentDidUpdate()
    {
        if(this.context.isAuthorized)
        {
            this.navEventHandler(null,"navigationOpenStart");
        }
    }
    
    public toggleNavigation(): void
    {
        this.nsNavigationReact.toggleNavigation();
    }
    
    public themeChanged(event: any)
    {
        const currentTheme: string = event.details.selectedTheme;
        if(this.nsNavigationReact)
        {
            this.nsNavigationReact.setTheme(currentTheme);
        }
    }
    
    render() 
    {
  
        const routes = this.state.routes;
        const navSetting =  this.state.navSetting;
        const isLoggedIn = this.context.isLoggedIn;
        const isAuthorized = this.context.isAuthorized;
        const navEventHandler = this.navEventHandler.bind(this);
        const pageContent: any = {"margin": "5px","height": "100%"};
        const routeComponents = routes.map(({path, component}, key) => <Route exact path={path} component={component} key={key} />);
        const navigationStyle = {"marginTop": "50px","width": "250px"};
        if(isLoggedIn && !isAuthorized)
        {
            return (
                <React.Fragment>
                    <div className="box box-danger box-border screen-center-box">
                        <div className="box-header with-border">
                            <i className="fa fa-ban text-ns-red"></i>
                            <h3 className="box-title">Unauthorized</h3>
                        </div>
                        <div className="box-body">
                            You are not authorized to access this application.
                        </div>
                    </div>
                </React.Fragment>
            )
        }
        else if(isLoggedIn && isAuthorized)
        {
            return (
                <React.Fragment>
                    <NSNavigationReact containerStyle={navigationStyle} setting={navSetting} 
                               ref={(ref) => this.nsNavigationReact = ref} onNavigationOpenStart={navEventHandler} 
                               onNavigationCloseStart={navEventHandler} onNavigationMenuSelected={navEventHandler} />
                    <div id="divContent" className="nmPageContent" style={pageContent} ref={(ref)=> this.divContent = ref}>
                        <HashRouter>
                           {routeComponents}
                           {/*<Redirect to="/hierarchicalGrid" />*/}
                       </HashRouter>
                    </div>
                </React.Fragment>
            )
        }
        else
        {
            return (
                <React.Fragment>
                    <div className="loader">
                        <div className="loader-centered">
                            <div className="object square-one"></div>
                            <div className="object square-two"></div>
                            <div className="object square-three"></div>
                        </div>
                    </div>
                    <div className="container bootstrap snippets bootdeys">
                        <div className="jumbotron">
                            <h1 id="loading-text">Loading...</h1>
                        </div>
                    </div>
                </React.Fragment>
            )
        }
       
    }

    private navEventHandler(event: any,eventType: string): void
    {
        console.log(event);
        //let divContent: HTMLDivElement = this.nsNavigationReact.getElement();
        eventType = eventType || event.type;
        switch(eventType)
        {
          case "navigationOpenStart":
            this.divContent.style.marginLeft = "250px";  
          break;
          case "navigationCloseStart":
            this.divContent.style.marginLeft = "50px";
          break;
          case "navigationMenuSelected":
            const item:any = event["detail"];
            //let compMenuHeader = this.__compMenuHeader.nativeElement;
            //compMenuHeader.innerHTML = item.menuName;
          break;
        }
    }

    /*private resizeListener(event:any)
    {
        //let resizeEvent:any = new Event('resize');
        let resizeEvent:any = document.createEvent("HTMLEvents");
        resizeEvent.initEvent("resize", true, false);
        window.dispatchEvent(resizeEvent);
    }*/
    

   
   
}
export default withRouter(Authenticate);


