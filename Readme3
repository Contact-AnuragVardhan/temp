NSUtil.prototype.isChildInParent = function(parent,child)
 {
	 if(parent && child)
	 {
		 var contains = (parent === child || (parent.compareDocumentPosition(child) & Node.DOCUMENT_POSITION_CONTAINED_BY));
		 return (contains > 0);
	 }
	 return false;
 };
 
 this.__setting = setting; 
	this.__scrollableElement = null;
	
	
			if(!this.__setting)
		{
			this.__setting = {scrollableElement: null};
		}
		this.__scrollableElement = this.__setting.scrollableElement;

this.__documentKeyEventHandler = function(event)
	{
		event = this.util.getEvent(event);
		var target = this.util.getTarget(event);
		if(target)
		{
			var hasFocus = this.util.isChildInParent(this.__table,target);
			if(hasFocus && (!setting.keyNavigationValid || setting.keyNavigationValid(event,this.__selectedCell)))
			{
				this.__keyEventHandler.bind(this)(event);
				this.__refreshPosition(event);
				event.preventDefault();
			}
		}
	};
	
	
	__paginationFetchRecordCallBack     __fetchRecordCallBack
	
	NSHierarchicalGrid.prototype.__isCellEditable = function(objColumn,item,cell,cellIndex,row,rowIndex)
{
	return true;
};

var cell =  this.__nsGrid.__createBodyRowCell(row,colIndex,true);
            var cellDiv = cell.firstChild;
	    
	    
	    colArrow.enableEditable = false;
	    
	    
	    NSGroupingGrid.prototype.__isCellEditable = function(objColumn,item,cell,cellIndex,row,rowIndex)
{
	if(item && item[this.__nsGrid.__fieldHasChild] > 0)
	{
		return false;
	}
	return true;
};

var cell =  this.__nsGrid.__createBodyRowCell(row,colIndex,true);
            var cellDiv = cell.firstChild;
	    
	    
	   var NSGridEditor = function(nsGrid)
{
	this.__nsGrid = nsGrid;
	this.util = this.__nsGrid.util;
	
	this.__config = {editType:NSGrid.EDITOR_EDITTYPE_CELL,clickType:NSGrid.EDITOR_EDITING_DOUBLECLICK,stopEditingOnGridFocusOut:false};
	this.__defaultCellSetting = {type:NSGrid.EDITOR_TYPE_TEXT,params:null,customEditor:null,validator:null,isCellEditableCallback:null};
	
	this.__table = null;
	
	this.__selectedCell = null;
	this.__lastEditor = null;
	this.__tblClickRef = null;
	this.__tblEventRef = null;
	
	this.initialize = function()
	{
		if(this.__nsGrid.__enableEditable)
		{
			var editorSetting = this.__nsGrid.__editorSetting;
			if(!editorSetting)
			{
				editorSetting = {};
			}
			this.__config = {
					editType:editorSetting.editType || this.__config.editType,
					clickType:editorSetting.clickType || this.__config.clickType,
					stopEditingOnGridFocusOut: Boolean.parse(editorSetting.stopEditingOnGridFocusOut)
			};
			this.__table = this.__nsGrid.__tblCenterBody;
			//if(!this.__tblClickRef)
			//{
				this.__tblClickRef = this.__tblClickHandler.bind(this);
				this.util.addEvent(this.__table,"click", this.__tblClickRef);
			//}
			//if(!this.__tblEventRef)
			//{
				var mouseEvent = this.__getMouseEventType();
				this.__tblEventRef = this.__tblEventHandler.bind(this);
				this.util.addEvent(this.__table,mouseEvent, this.__tblEventRef);
			//}
			if(!this.__documentKeyEventRef)
			{
				this.__documentKeyEventRef = this.__documentKeyEventHandler.bind(this);
				this.util.addEvent(document,"keydown", this.__documentKeyEventRef);
			}
			if(this.__config.stopEditingOnGridFocusOut)
			{
				this.__nsGrid.__listenInternalEvent("blur",this.__tblBlurHandler.bind(this));
			}
		}
	};
	
	this.editCell = function(cell,item)
	{
		this.__handleCellEditor(cell,null,item);
	};
	
	//returning array of key and value so that when we implement row level editor this function will return all instances of Editors
	this.getEditorInstances = function()
	{
		if(this.__lastEditor)
		{
			var objColumn = this.__lastEditor[this.__getAttributeKey("config")].column;
			var dataField = objColumn.dataField;
			return [{dataField: this.__lastEditor}];
		}
		return null;
	};
	
	this.processColumnObject = function(objColumn)
	{
		if(objColumn)
		{
			if(!objColumn.hasOwnProperty("enableEditable"))
			{
				objColumn.enableEditable = this.__nsGrid.__enableEditable;
			}
			if(objColumn["editorSetting"])
			{
				if(!objColumn["editorSetting"].hasOwnProperty("type") || !objColumn["editorSetting"]["type"])
				{
					objColumn["editorSetting"]["type"] = this.__defaultCellSetting.type;
				}
				if(objColumn["editorSetting"].hasOwnProperty("customEditor"))
				{
					var customEditor = objColumn["editorSetting"]["customEditor"];
					if (typeof customEditor === "string" || customEditor instanceof String)
					{
						if(this.util.isFunction(customEditor))
						{
							objColumn["editorSetting"]["customEditor"] = this.__nsGrid.__context[customEditor];
						}
					}
				}
			}
		}
	};
	
	this.isOtherKeyNavigationValid = function(event,cell)
	{
		var hasFocus = false;
		if(this.__lastEditor)
		{
			var element = this.__lastEditor.getElement();
			var hasFocusFunction = this.__lastEditor.hasFocus;
			if(hasFocusFunction && this.util.isFunction(hasFocusFunction))
			{
				hasFocus = hasFocusFunction(); 
			}
			else
			{
				hasFocus = (element === document.activeElement);
			}
		}
		return !hasFocus;
	};
	
	this.__documentKeyEventHandler = function(event)
	{
		if(this.__lastEditor)
		{
			event = this.util.getEvent(event);
	    	var keyCode = this.util.KEYCODE;
	    	if (event.keyCode == keyCode.ENTER) 
	      	{
	    		this.__callSaveForEditor(this.__lastEditor);
	      	}
	      	else if (event.keyCode == keyCode.TAB) 
	      	{
	      		this.__callSaveForEditor(this.__lastEditor);
	      		event.preventDefault();
	      	}
	      	else if (event.keyCode == keyCode.ESC) 
	      	{
	      		this.__callCancelForEditor(this.__lastEditor);
	      		this.__lastEditor = null;
	        	event.preventDefault();
	      	}
	    	this.__callEditorFunction(this.__lastEditor,"handleKeyDown",[event,event.keyCode]);
		}
	};
	
	this.__tblClickHandler = function(event)
	{
		event = this.util.getEvent(event);
		var target = this.util.getTarget(event);
		var cell = this.util.findParent(target,"TD");
		var editorCell = this.__lastEditor ? this.__lastEditor[this.__getAttributeKey("config")].cell : null;
		if (!cell || (this.__lastEditor && editorCell == cell)) 
		{
			if(this.__lastEditor)
			{
				this.__lastEditor.setFocus();	
			}
	        return;
	    }
		if (this.__lastEditor && editorCell != cell) 
		{
			this.__commitEditorChanges(this.__lastEditor);
	    }
	};
	
	this.__tblEventHandler = function(event)
	{
		event = this.util.getEvent(event);
		var target = this.util.getTarget(event);
		var cell = this.util.findParent(target,"TD");
		this.__handleCellEditor(cell,event);
	};
	
	this.__tblBlurHandler = function(event,detail)
	{
		if(this.__lastEditor)
		{
			var config = this.__lastEditor[this.__getAttributeKey("config")];
			this.__callSaveForEditor(this.__lastEditor);
		}
	};
	
	this.__popUpWrapperMouseDownHandler = function(event)
	{
		event = this.util.getEvent(event);
		event.stopPropagation();
	};
	
	this.__handleCellEditor = function(cell,event,item)
	{
		if(cell)
		{
			var editorCell = this.__lastEditor ? this.__lastEditor[this.__getAttributeKey("config")].cell : null;
			if(!this.__lastEditor || (this.__lastEditor && editorCell != cell))
			{
				var colIndex = cell.cellIndex;
				var objColumn = this.__nsGrid.__getColumnObject(colIndex);
				if(objColumn && objColumn.enableEditable)
				{
					var row = cell.parentNode;
					var rowIndex = this.__nsGrid.__getIndexFromRow(row);
					if(!item)
					{
						item = this.__nsGrid.__getItemByIndex(rowIndex);
					}
				    if(this.__isCellEditable(objColumn,item,cell,colIndex,row,rowIndex))
				    {
				    	var editor = this.__createEditor(cell,objColumn,row,rowIndex,item);
						this.__lastEditor = editor;
						if(event)
						{
							event.preventDefault();
						}
				    }
				}
			}
		}
	};
	
	this.__createEditor = function(cell,objColumn,row,rowIndex,item)
	{
		var self = this;
		var createPopUpWrapper = function()
		{
			var container = document.body;
	      	var wrapper = self.util.createDiv(null,"nsGridEditorPopUp");
	      	container.appendChild(wrapper);
	      	return wrapper;
		};
		var addChildInPopUp = function(element,parent)
		{
			parent.appendChild(element);
		};
		var addChild = function(element)
		{
			divChild.innerHTML = "";
			divChild.appendChild(element);
		};
		var commitChanges = function()
		{
			self.__callSaveForEditor.call(self,editor);
		};
		var cancelChanges = function()
		{
			self.__callCancelForEditor.call(self,editor);
			self.__lastEditor = null;
		};
		var position = this.__getPosition(cell);
		var editorSetting = this.__getEditorSetting(objColumn);
		var divChild = cell.querySelector("." + this.__nsGrid.__CLASS_CELL_CHILD);
	    var currentValue = item[objColumn.dataField];
		var editorFunction = this.__getEditorFunction(editorSetting);
		var setting = {cell:cell,row:row,item:item,rowIndex:rowIndex,cellIndex:cell.cellIndex,position:position,defaultValue:currentValue,
				commitChanges:commitChanges,cancelChanges:cancelChanges,validator:editorSetting.validator,setting:editorSetting,column:objColumn};
		var editor = new editorFunction();
		editor.init(setting);
		var element = editor.getElement();
		var isPopUp = editor.isPopUp();
		var popUpWrapper = null;
		if(isPopUp)
		{
			popUpWrapper = createPopUpWrapper();
			popUpWrapper.style.top = (position.top - 5) + "px";
			popUpWrapper.style.left = (position.left - 5) + "px";
			this.__callEditorFunction(editor,"setPopUpWrapper",popUpWrapper);
			addChildInPopUp(element,popUpWrapper);
			if(this.__config.stopEditingOnGridFocusOut)
			{
				//stop propagation of event on document level so that pop up is not closed
				this.util.addEvent(popUpWrapper,"mousedown", this.__popUpWrapperMouseDownHandler.bind(this));
			}
		}
		else
		{
			addChild(element);
		}
		this.__callEditorFunction(editor,"elementAdded");
		var config = {cell:cell,row:row,divChild:divChild,setting:editorSetting,column:objColumn,item:item,isPopUp:isPopUp,element:element,popUpWrapper:popUpWrapper};
		editor[this.__getAttributeKey("config")] = config;
		
		return editor;
	};
	
	this.__isCellEditable = function(objColumn,item,cell,cellIndex,row,rowIndex)
	{
		if(this.__nsGrid.__isCellEditable(objColumn,item,cell,cellIndex,row,rowIndex))
		{
			var editorSetting = this.__getEditorSetting(objColumn);
			if(editorSetting && editorSetting.isCellEditableCallback)
			{
				return editorSetting.isCellEditableCallback(objColumn,item,cell,cellIndex,row,rowIndex,item[this.__nsGrid.__fieldRowLevel]);
			}
			return true;
		}
		return false;
	};
	
	this.__callSaveForEditor = function(editor)
	{
		this.__callEditorFunction(editor,"save",null);
		this.__commitEditorChanges(editor);
	};
	
	this.__callCancelForEditor = function(editor)
	{
		this.__callEditorFunction(editor,"cancel",null);
		var config = editor[this.__getAttributeKey("config")];
		var cell = config.cell;
		var row = config.row;
		var objColumn = config.column;
		var item = config.item;
		var editorSetting = config.setting;
		var setValue = item[objColumn.dataField];
		var hasValueChanged = editor.hasValueChanged(setValue);
		this.__setCellValue(cell,setValue,item,row,objColumn,editorSetting);
		this.__callDestroyForEditor(editor);
	};
	
	this.__callDestroyForEditor = function(editor)
	{
		this.__callEditorFunction(editor,"destroy",null);
		var config = editor[this.__getAttributeKey("config")];
		var element = null;
		if(config.isPopUp)
		{
			element = config.popUpWrapper;
		}
		else
		{
			element = editor.getElement();
			
		}
		if(element && element.parentNode)
    	{
			element.parentNode.removeChild(element);
    	}
		editor = null;
	};
	
	this.__commitEditorChanges = function(editor)
	{
		var self = this;
		var destroyEditor = function()
		{
			self.__callDestroyForEditor(self.__lastEditor);
			self.__lastEditor = null;
		};
		var config = editor[this.__getAttributeKey("config")];
		var cell = config.cell;
		var row = config.row;
		var objColumn = config.column;
		var item = config.item;
		var editorSetting = config.setting;
		var value = editor.getValue();
		var isValid = this.__callEditorFunction(editor,"validate",null,true);
		if(isValid)
		{
			var setValue = item[objColumn.dataField];
			
			var hasValueChanged = this.__callEditorFunction(editor,"hasValueChanged",setValue,null);
			if(hasValueChanged == null)
			{
				hasValueChanged = !(setValue === value);
			}
			destroyEditor();
			if(hasValueChanged)
			{
				setValue = value;
			}
			this.__setCellValue(cell,setValue,item,row,objColumn,editorSetting);
		}
	};
	
	this.__setCellValue = function(cell,newValue,item,row,objColumn,editorSetting)
	{
		if(cell)
		{
			var colIndex = cell.cellIndex;
			var rowIndex = this.__nsGrid.__getIndexFromRow(row);
			var currentValue = item[objColumn.dataField];
			item[objColumn.dataField] = newValue;
			this.__nsGrid.updateItemInDataSource(item);
			this.__nsGrid.updateRowByIndex(rowIndex);
			this.__nsGrid.__dispatchEvent(NSGrid.EDITOR_CELL_VALUE_CHANGED,cell,{cellIndex:colIndex,rowIndex:rowIndex,cell:cell,row:row,newValue:newValue,oldValue:currentValue,item:item});
		}
	};
	
	this.__getAttributeKey = function(key)
	{
		return "__" + this.__nsGrid.__fieldPrefix + "_" + key;
	};
	
	this.__getPosition = function(element) 
	{
	      var position = {
	        top: element.offsetTop,
	        left: element.offsetLeft,
	        bottom: 0,
	        right: 0,
	        width: this.util.getOuterWidth(element),
	        height: this.util.getOuterHeight(element),
	        visible: true};
	      position.bottom = position.top + position.height;
	      position.right = position.left + position.width;

	      // walk up the tree
	      var offsetParent = element.offsetParent;
	      while ((element = element.parentNode) != document.body) 
	      {
	        if (position.visible && element.scrollHeight != element.offsetHeight && this.util.getStyleValue(element,"overflowY",false) != "visible") 
	        {
	          	position.visible = position.bottom > element.scrollTop && position.top < element.scrollTop + element.clientHeight;
	        }
	        if (position.visible && element.scrollWidth != element.offsetWidth && this.util.getStyleValue(element,"overflowX",false) != "visible") 
	        {
	          	position.visible = position.right > element.scrollLeft && position.left < element.scrollLeft + element.clientWidth;
	        }
	        position.left -= element.scrollLeft;
	        position.top -= element.scrollTop;
	        if (element === offsetParent) 
	        {
	          	position.left += element.offsetLeft;
	          	position.top += element.offsetTop;
	          	offsetParent = element.offsetParent;
	        }
	        position.bottom = position.top + position.height;
	        position.right = position.left + position.width;
	      }

	      return position;
	};
	
	this.__getMouseEventType = function()
	{
		var retValue = "dblclick";
		switch(this.__config.clickType)
		{
			case NSGrid.EDITOR_EDITING_SINGLECLICK:
				retValue = "click";
			break;
			case NSGrid.EDITOR_EDITING_DOUBLECLICK:
				retValue = "dblclick";
			break;
			case NSGrid.EDITOR_EDITING_NOCLICK:
				retValue = "";
			break;
		}
		return retValue;
	};
	
	this.__getEditorSetting = function(objColumn)
	{
		var editorSetting = objColumn.editorSetting;
		if(!editorSetting)
		{
			editorSetting = this.__defaultCellSetting;
		}
		return editorSetting;
	};
	
	this.__getEditorFunction = function(editorSetting)
	{
		var retFunction = null;
		if(editorSetting)
		{
			switch(editorSetting.type)
			{
				case NSGrid.EDITOR_TYPE_TEXT:
					retFunction = this.__nsTextEditor;
				break;
				case NSGrid.EDITOR_TYPE_TEXTAREA:
					retFunction = this.__nsTextAreaEditor;
				break;
				case NSGrid.EDITOR_TYPE_CUSTOM:
					retFunction = editorSetting.customEditor;
				break;
			}
		}
		return retFunction;
	};
	
	this.__destroy = function()
	{
		if(this.__tblClickRef)
		{
			this.util.removeEvent(this.__table,"click", this.__tblClickRef);
			this.__tblClickRef = null;
		}
		if(this.__tblEventRef)
		{
			var mouseEvent = this.__getMouseEventType();
			this.util.removeEvent(this.__table,mouseEvent, this.__tblEventRef);
			this.__tblEventRef = null;
		}
		
		if(this.__documentKeyEventRef)
		{
			this.util.removeEvent(document,"keydown", this.__documentKeyEventRef);
			this.__documentKeyEventRef = null;
		}
	};
	
	this.__callEditorFunction = function(editor,functionRef,param,defaultValue)
	{
		if(editor && editor[functionRef] && this.util.isFunction(editor[functionRef]))
		{
			var retValue = null;
			if(param && this.util.isArray(param) && param.length > 0)
			{
				retValue = editor[functionRef].apply(null,param);
			}
			else
			{
				retValue = editor[functionRef](param);
			}
			if(!this.util.isUndefinedOrNull(retValue))
			{
				return retValue;
			}
		}
		return defaultValue;
	};
	
	this.__nsTextEditor = function() 
	{
	    var input;
	    var defaultValue;
	    var setting = null;
	    var self = this;
	    var util = new NSUtil();
	    
	    this.init = function(config) 
	    {
	    	setting = config;
	    	var editorSetting = setting.setting;
	    	var params = this.__getParams(editorSetting.params);
	    	input = util.createElement("input",null,"nsTextEditor"); 
	    	defaultValue = setting.defaultValue;
	      	input.value = defaultValue;
	      	input.style.width = "98%";
	      	if(params.cssClass)
	      	{
	      		util.addStyleClass(input,params.cssClass);
	      	}
	    };
	    
	    this.getElement = function()
	    {
	    	return input;
	    };
	    
	    this.elementAdded = function()
	    {
	    	util.addEvent(input,"click",function(event){
	    		event = util.getEvent(event);
	    		self.setFocus();
	    		event.stopPropagation();
	    		event.stopImmediatePropagation();
	    		event.preventDefault();
	    	});
	    	input.focus();
	      	input.select();
	    };
	    
	    this.handleKeyDown = function(event,keyCode) 
	    {
	    	var objKeyCode = util.KEYCODE;
	    	if (keyCode == objKeyCode.LEFT && keyCode == objKeyCode.RIGHT) 
	      	{
	    		event.stopImmediatePropagation();
	      	} 
	    };
	    
	    this.getValue = function() 
	    {
	      	return input.value;
	    };
	    
	    this.destroy = function() 
	    {
	    	
	    };
	    
	    this.setFocus = function()
	    {
	    	input.focus();
	    	//setTimeout(function(){input.selectionStart = input.selectionEnd = 10000; }, 0);
	    	input.selectionEnd = input.selectionStart = input.value.length;
	    };
	    
	    this.hasValueChanged = function(currentValue) 
	    {
	      	return (!(input.value == "" && currentValue == null)) && (input.value != currentValue);
	    };
		
	    this.validate = function() 
	    {
	    	if(setting.validator)
	    	{
	    		return setting.validator(input,input.value);
	    	}
	      	return true;
	    };
	    
	    this.isPopUp = function()
	    {
	    	return false;
	    };
	    
	    this.save = function() 
	    {
	    	
	    };

	    this.cancel = function() 
	    {
	      	input.value = defaultValue;
	    };
	    
	    this.setPopUpWrapper = function(popUpWrapper) 
	    {
	    	
	    };
	    
	    this.__getParams = function(params)
	    {
	    	if(!params)
	    	{
	    		params = {};
	    	}
	    	params = {
	    		cssClass: params.cssClass || null,
	    	};
	    	
	    	return params;
	    };

	};

	this.__nsTextAreaEditor = function() 
	{
	    var input, wrapper, parentWrapper;
	    var defaultValue;
	    var util = new NSUtil();
	    var setting = null;
	    var self = this;
		
	    this.init = function (config) 
	    {
	    	setting = config;
	    	var editorSetting = setting.setting;
	    	var params = this.__getParams(editorSetting.params);
	      	wrapper = util.createDiv(null,"nsGridTextAreaEditor");
	      	input = util.createElement("textarea",null,"nsGridTextArea"); 
	      	if(params.cssClass.textArea)
	      	{
	      		util.addStyleClass(input,params.cssClass.textArea);
	      	}
	      	input.setAttribute("hidefocus",true);
	      	input.setAttribute("rows",params.rows);
	      	wrapper.appendChild(input);
	      	wrapper.appendChild(document.createElement("br"));
	      	var buttonWrapper = util.createDiv(null);
	      	buttonWrapper.style.textAlign = "right";
	      	wrapper.appendChild(buttonWrapper);
	      	var btnSave = util.createElement("button",null,params.cssClass.saveButton);
	      	btnSave.appendChild(document.createTextNode(params.saveButtonText));
	      	util.addEvent(btnSave,"click",this.__saveHandler);
	      	buttonWrapper.appendChild(btnSave);
	      	buttonWrapper.appendChild(document.createTextNode(" "));
	      	var btnCancel = util.createElement("button",null,params.cssClass.cancelButton);
	      	btnCancel.appendChild(document.createTextNode(params.cancelButtonText));
	      	buttonWrapper.appendChild(btnCancel);
	      	util.addEvent(btnCancel,"click",this.__cancelHandler);
	      	defaultValue = setting.defaultValue;
	      	input.value = defaultValue;
	    };
	    
	    this.getElement = function()
	    {
	    	return wrapper;
	    };
	    
	    this.elementAdded = function()
	    {
	    	input.focus();
	      	input.select();
	    };

	    this.handleKeyDown = function(event,keyCode) 
	    {
	    	event = util.getEvent(event);
	    	var objKeyCode = util.KEYCODE;
	      	if (keyCode == objKeyCode.ENTER && event.ctrlKey) 
	      	{
	        	self.save();
	      	} 
	    };
	    
	    this.getValue = function() 
	    {
	      	return input.value;
	    };
	    
	    this.destroy = function() 
	    {
	    	
	    };
	    
	    this.setFocus = function()
	    {
	    	input.focus();
	    };
	    
	    this.hasFocus = function()
	    {
	    	return input === document.activeElement;
	    };

	    this.hasValueChanged = function(currentValue) 
	    {
	      	return (!(input.value == "" && currentValue == null)) && (input.value != currentValue);
	    };

	    this.validate = function() 
	    {
	    	if(setting.validator)
	    	{
	    		return setting.validator(input,input.value);
	    	}
	      	return true;
	    };
	    
	    this.isPopUp = function()
	    {
	    	return true;
	    };
	    
	    this.save = function () 
	    {
	    	
	    };

	    this.cancel = function () 
	    {
	      	input.value = defaultValue;
	      	
	    };
	    
	    this.setPopUpWrapper = function(popUpWrapper) 
	    {
	    	parentWrapper = popUpWrapper;
	    };
	    
	    //non framework function
	    this.__saveHandler = function(event)
	    {
	    	setting.commitChanges();
	    };
	    
	    this.__cancelHandler = function(event)
	    {
	    	setting.cancelChanges();
	    };
	    
	    this.__getParams = function(params)
	    {
	    	if(!params)
	    	{
	    		params = {};
	    	}
	    	if(!params.cssClass)
	    	{
	    		 params.cssClass = {};
	    	}
	    	var cssClass = {
	    			textArea: params.cssClass["textArea"] || null,
	    			saveButton: params.cssClass["saveButton"] || null,
	    			cancelButton: params.cssClass["cancelButton"] || null
	    	};
	    	params = {
	    		rows: params.rows || 5,
	    		cssClass: cssClass,
	    		saveButtonText: params.saveButtonText || "Save",
	    		cancelButtonText: params.cancelButtonText || "Cancel",
	    	};
	    	
	    	return params;
	    };
	    
	};
	
};

NSFlatGrid.prototype.__isCellEditable = function(objColumn,item,cell,cellIndex,row,rowIndex)
{
	return true;
};

var cell =  this.__nsGrid.__createBodyRowCell(row,colIndex,false);
