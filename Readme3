else 
		    {
				var text = this.util.getValueByKeys(item,dataField);
				if(text)
				{
					div.appendChild(document.createTextNode(text));
				}
		    }
		    
		    //from https://stackoverflow.com/questions/201183/how-to-determine-equality-for-two-javascript-objects/16788517#16788517
// used in frameworks wrapper
NSUtil.prototype.isObjectEqual = function(origValue, newValue) 
{
	if (origValue === null || origValue === undefined || newValue === null || newValue === undefined) 
	{ 
		return origValue === newValue; 
	}
	// after this just checking type of one would be enough
	if (origValue.constructor !== newValue.constructor) 
	{ 
		return false; 
	}
	// if they are functions, they should exactly refer to same one (because of closures)
	if (origValue instanceof Function) 
	{ 
		return origValue === newValue; 
	}
	// if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)
	if (origValue instanceof RegExp) 
	{ 
		return origValue === newValue; 
	}
	if (origValue === newValue || origValue.valueOf() === newValue.valueOf()) 
	{ 
		return true; 
	}
	if (Array.isArray(origValue) && origValue.length !== newValue.length) 
	{ 
		return false; 
	}
	// if they are dates, they must had equal valueOf
	if (origValue instanceof Date) 
	{ 
		return false; 
	}
	// if they are strictly equal, they both need to be object at least
	if (!(origValue instanceof Object)) 
	{ 
		return false; 
	}
	if (!(newValue instanceof Object)) 
	{ 
		return false; 
	}
	// recursive object equality check
	var arrKeys = Object.keys(origValue);
	var arrNewKeys = Object.keys(newValue);
	for(count = 0,len = arrNewKeys,length;count < len;count++)
	{
		if(arrKeys.indexOf(count) !== -1)
		{
			return false;
		}
		for(innerCount = 0,len = arrKeys,length;innerCount < len;innerCount++)
		{
			return this.isObjectEqual(origValue[innerCount], newValue[innerCount]);
		}
	}
	return true;
};

NSUtil.prototype.getValueByKeys = function(item,key)
{
	var objReturn = {};
	if(item)
	{
		(function flatObject(item, index)
		 {
		   var suffix = toString.call(item) == "[object Array]" ? "]" : "";
		   for(var key in item)
		   {
				if(!item.hasOwnProperty(key))continue;
				objReturn[index+key+suffix] = item[key];
				if( toString.call(item[key]) == "[object Array]" )flatObject(item[key],index+key+suffix+"[");
				if( toString.call(item[key]) == "[object Object]" )flatObject(item[key],index+key+suffix+".");   
		   }
		 })(item,"");
	}
	return objReturn[key];
};

<style>
    	body {
			overflow-x: auto;
			overflow-y: hidden;
		}
		html {
		  height: 100%;
		}
		body {
		  min-height: 100%;
		}
		
		.columnClass
		{
		    padding: 3px 5px 3px 5px !important;
		    font-size: 13.5px;
		    font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;
		    vertical-align: top;
		    border-top: 1px solid #ddd;
		}
    </style>
    
    <style type="text/css">

		.loading {
		  -webkit-animation: sk-scaleout 1.0s infinite ease-in-out;
		  animation: sk-scaleout 1.0s infinite ease-in-out;
		  background-color: black;
		  border-radius: 100%;
		  height: 6em;
		  width: 6em;
		}
		
		.container {
		  align-items: center;
		  background-color: white;
		  display: flex;
		  height: 100vh;
		  justify-content: center;
		  width: 100vw;
		}
		
		@keyframes sk-scaleout {
		  0% {
		    -webkit-transform: scale(0);
		    transform: scale(0);
		  }
		  100% {
		    -webkit-transform: scale(1.0);
		    opacity: 0;
		    transform: scale(1.0);
		  }
		}
		
	</style>
	
	<div id="spinner" class="container">
	  <div class="loading"></div>
	</div>
	
	"ordered-imports": [false, {
		  "import-sources-order": "any",
		  "named-imports-order": "any"
		}]
		
		"@types/prop-types": "^15.5.3",
