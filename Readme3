this.__showFooter = false;
		this.__footerContent = null;
		
		NSCalendar.prototype.reset = function() 
	{
		this.__selectedDate = null;
		this.__updateDays(new Date());
	};
	
	NSCalendar.prototype.setTodayDate = function() 
	{
		this.__selectedDate = new Date();
		this.__updateDays(this.__selectedDate);
	};
	if(setting.hasOwnProperty("showFooter"))
			{
				this.__showFooter = Boolean.parse(setting["showFooter"]);
			}
			if(setting.hasOwnProperty("footerContent"))
			{
				this.__footerContent = setting["footerContent"];
			}
			if(this.__showFooter)
		{
			this.__createFooter();
			this.__baseComponent.appendChild(this.__divFooterContainer);
		}
		
		NSCalendar.prototype.__createFooter = function()
	{
		if(!this.__divFooterContainer)
		{
			this.__divFooterContainer = this.util.createDiv(this.getID() + "footer","nsCalendarFooterContainer");
			this.__applyCustomClass(this.__divFooterContainer,"footerContainer");
			if(this.__footerContent)
			{
				if(this.util.isString(this.__footerContent))
				{
					var compSpan = document.createElement("span");
					compSpan.innerHTML = this.__footerContent;
					this.__divFooterContainer.appendChild(compSpan);
				}
				else
				{
					this.__divFooterContainer.appendChild(this.__footerContent);
				}
			}
			
		}
	};
	NSCalendar.prototype.__clearCellSelectionExceptSelected = function() 
	{
		if(this.__arrDayCells && this.__arrDayCells.length > 0)
		{
			for(var count = 0;count < this.__arrDayCells.length;count++)
			{
				item = this.__arrDayCells[count];
				if(this.__lastSelectedCell != item.cell)
				{
					this.util.removeStyleClass(item.cell,"nsCalendarSelected");
				}
			}
		}
	};
