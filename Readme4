import * as React from 'react';

import 'nscontainerbase/nsComponent.min.css';
import 'nsmessagebox/nsMessageBox.min.css'

import {NSMessageBox, NSPanel} from 'nsmessagebox';

import { NSUtil } from 'nscomputil';

import {INSMessageBoxCallbackFunction, INSMessageBoxSetting, INSMessageBoxAlertSetting, INSMessageBoxConfirmSetting,
        INSMessageBoxCustomSetting
       } from "./interfaces";
       
import DynamicComponentService from "../dynamicComponentService/dynamicComponentService"


export interface INSMessageBoxReactSettings extends INSMessageBoxSetting {
    setting?: INSMessageBoxSetting;
}

export class NSMessageBoxReact extends React.Component<INSMessageBoxReactSettings, any> {
    
    private __objNSMessageBox: any;
    private __objNSPanel: any;
    private __container: any;
    private __objBodyContent: any;
    private __setting : any;
    private __nsUtil : any;
    private __arrEvents: string[] = [];
    private __objCustomComponent: any;
    private __bodyComponentInstance: any;

    private __hasInitialized: boolean = false;
    private __hasDestroyed: boolean = false;

    constructor(public props: INSMessageBoxReactSettings, public state: any) 
    {
        super(props, state);
    }
    
    public componentDidMount() 
    {
        if(!this.__objNSPanel)
        {
            this.__nsUtil = new NSUtil();
            this.__arrEvents = [ NSPanel.DRAG_STARTING,
                                NSPanel.DRAGGING,
                                NSPanel.DRAG_END,
                                NSPanel.RESIZE_STARTING,
                                NSPanel.RESIZING,
                                NSPanel.RESIZE_END,
                                NSPanel.COLLAPSE_STARTING,
                                NSPanel.COLLAPSE_END,
                                NSPanel.EXPANSION_STARTING,
                                NSPanel.EXPANSION_END,
                                NSPanel.MINIMIZE_STARTING,
                                NSPanel.MINIMIZE_END,
                                NSPanel.MAXIMIZE_STARTING,
                                NSPanel.MAXIMIZE_END,
                                NSPanel.FULLSCREEN_STARTING,
                                NSPanel.FULLSCREEN_END,
                                NSPanel.RESTORE_STARTING,
                                NSPanel.RESTORE_END,
                                NSPanel.CLOSED];
            if(!this.props)
            {
                this.props = {};
            }
            const setting:INSMessageBoxReactSettings =  this.__nsUtil.cloneObject(this.props.setting,true);
            this.__setting = setting;
            /*if(this.__container)
            {
               this.__objBodyContent = this.__container;
            }
            this.__createComponent();*/
        }
        this.__hasInitialized = true;
    }
    
    public shouldComponentUpdate(nextProps: any, nextState: any) 
    {
        return false;
    }
    
    public componentWillReceiveProps(nextProps: any) 
    {
        
        
    }
    
    public componentWillUnmount() 
    {
        if(this.__hasInitialized)
        {
            if(this.__objNSPanel)
            {
                this.__objNSPanel.removeComponent();
                this.__objNSPanel = null;
            }
            this.__hasDestroyed = true;
        }
    }

    public render() 
    {
        return React.createElement<any>("div",{
            style: this.__getStyleForContainer(),
            ref: (e: HTMLElement) => {
                this.__container = e;
            }
        });
    }
    
    getElement(): HTMLElement
    {
        return this.__container;
    };
  
    minimize(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.minimize();
        }
    };
    
    maximize(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.maximize();
        }
    };
    
    collapse(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.collapse();
        }
    };
    
    expand(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.expand();
        }
    };
    
    fullScreen(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.fullScreen();
        }
    };
    
    restore(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.restore();
        }
    };
    
    disableResize(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.disableResize();
        }
    };
    
    disableDrag(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.disableDrag();
        }
    };
    
    disableCollapse(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.disableCollapse();
        }
    };
    
    disableMinMax(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.disableCollapse();
        }
    };
    
    disableFullScreen(): void
    {
        if(this.__objNSPanel)
        {
            this.__objNSPanel.disableCollapse();
        }
    };
    
    isCollapsed(): boolean
    {
        if(this.__objNSPanel)
        {
            return this.__objNSPanel.isCollapsed();
        }
        return false;
    };
    
    isMinimized(): boolean
    {
        if(this.__objNSPanel)
        {
            return this.__objNSPanel.isMinimized();
        }
        return false;
    };
    
    isFullScreen(): boolean
    {
        if(this.__objNSPanel)
        {
            return this.__objNSPanel.isFullScreen();
        }
        return false;
    };
    
    alert(message: string | INSMessageBoxAlertSetting, title?: string, callback?: INSMessageBoxCallbackFunction): void
    {
        this.__createComponent();
        this.__objNSMessageBox.alert(message,title,callback);
        this.__creationHandler();
    };
    
    confirm(message: string | INSMessageBoxConfirmSetting, title?: string, confirmCallback?: INSMessageBoxCallbackFunction, cancelCallback?: INSMessageBoxCallbackFunction): void
    {
        this.__createComponent();
        this.__objNSMessageBox.confirm(message,title,confirmCallback,cancelCallback);
        this.__creationHandler();
    };
    
    custom(setting: INSMessageBoxCustomSetting):void
    {
        this.__createComponent();
        if(!setting)
        {
            setting = {};
        }
        if(setting.bodyComponent)
        {
            let self: any = this;
            setting.bodyComponent = this.__customEditor(setting.bodyComponent,function(instance: any){
                setting.bodyComponentInstance = instance;
                self.__bodyComponentInstance = instance;
            });
        }
        else if(!setting.bodyContent && !setting.bodyTemplate && !setting.bodyContent)
        {
            if(this.__container)
            {
                setting.bodyContent = this.__container;
            }
        }
        this.__objNSMessageBox.custom(setting);
        this.__creationHandler();
    };
    
    close(): void
    {
        if(this.__objNSMessageBox)
        {
            this.__objNSMessageBox.close();
        }
    };
    
    changeButtonStyle(btnIdentifier: any,objStyle: any): void
    {
        if(this.__objNSMessageBox)
        {
            this.__objNSMessageBox.changeButtonStyle(btnIdentifier,objStyle);
        }
    }
    
    getPanel(): any
    {
        return this.__objNSPanel;
    };
    
    getBodyComponentInstance(): any
    {
        return this.__bodyComponentInstance;
    };
    
    private __createComponent(): void
    {
        if(this.__objNSMessageBox)
        {
            this.__objNSMessageBox = null;
        }
        this.__objNSMessageBox = new NSMessageBox(this.__setting); 
        this.__addEvents();
    };
    
    private __creationHandler(): void
    {
        this.__objNSPanel =  this.__objNSMessageBox.getPanel();
        if(!this.__container)
        {
            this.__container = this.__objNSPanel.getBaseElement();
        }
    };
    
    private __customEditor(customEditorComponent: any,mainCallback: any): any
    {
        const self: any = this;
        const __editor: any = function(this: any)
        {
            let objComponent: any = null;
            let componentRef: any = null;
            
            this.init = function(data: any): void
            {
                 const callback = function(dynamicCompRef: DynamicComponentService,localComponentRef: any,container: HTMLElement)
                 {
                   objComponent = localComponentRef["component"] ? localComponentRef["component"] : localComponentRef;
                   componentRef = dynamicCompRef;
                   if(objComponent && objComponent.init)
                   {
                       mainCallback && mainCallback(objComponent);
                       objComponent.init(data);
                   }
                   this.__objCustomComponent = {instance: objComponent,componentRef: componentRef,component: customEditorComponent,data: data};
                   self.__emitRendererComponentCreated(this.__objCustomComponent);
                 };
                 self.__getComponent(customEditorComponent,callback.bind(self),data);
            };
            this.getElement = function(): HTMLElement
            {
                return componentRef.getElement();
            };
            this.elementAdded = function(): void
            {
                if(objComponent && objComponent.elementAdded)
                {
                    objComponent.elementAdded();
                }
            };
            this.destroy = function(): void
            {
                if(objComponent && objComponent.destroy)
                {
                    objComponent.destroy();
                }
            };
        };
        
        return __editor;
    };
    
    private __getComponent(rendererComponent: any,callback?: null,prop?: null): any
    {
        const dynamicComponentService: DynamicComponentService = new DynamicComponentService(rendererComponent,this);
        dynamicComponentService.createComponent(callback,prop);
        const objComponent: any = dynamicComponentService.getComponentInstance();
        const container: any = dynamicComponentService.getElement();
        return {ref: dynamicComponentService,instance: objComponent,container: container};
    };
    
    private __getStyleForContainer() 
    {
        const style: any = { height: "100%",display:"none" };
        /*const containerStyle = this.props.containerStyle;
        if (containerStyle) {
            Object.keys(containerStyle).forEach(key => {
                style[key] = containerStyle[key];
            });
        }*/
        return style;
    }
    
    private __addEvents()
    {
        const self = this;
        for (const eventName of this.__arrEvents)
        {
            this.__nsUtil.addEvent(this.__container,eventName,(function(eventNameParam: string){
              return function(event: any) {
                self.__eventListener.bind(self)(event,eventNameParam);
              }
            })(eventName));
        }
    }
    
    private __eventListener(event: any,eventName: string)
    {
        const eventListenerName: string = 'on' + eventName[0].toUpperCase() + eventName.substring(1);
        if(this.props[eventListenerName])
        {
            this.props[eventListenerName](event);
        }
    }
    
    private __emitRendererComponentCreated(objItem:any)
    {
        this.__eventListener(objItem,"rendererComponentCreated");
    };
    
}


