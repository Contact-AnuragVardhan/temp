//nsXlsxExport.js
var NSXlsxExport = (function()
{
	var NSXlsxExport = function(config)
	{
		var self = this;
		var util = null;
		var xlsxUtil = null;
		var workbook = null;
		var setting = {};
		
		var initialize = function()
		{
			util = new NSUtil();
			if(!config)
			{
				config = {};
			}
			setting = {
				fileName: config["fileName"] || "download",
				sheets: config["sheets"]
			};
			if(!setting.sheets || setting.sheets.length == 0)
			{
				util.throwNS("sheets is not defined in config");
			}
			xlsxUtil = new XlsxUtil();
			workbook = new XlsxWorkbook(xlsxUtil,setting.sheets);
		};
		
		var process = function()
		{
			const zip = new JSZip();
			const xl = zip.folder('xl');
			save(zip,xl);
			return zip.generateAsync({
			    type: 'blob',
			    mimeType:
			      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
			  }).then(function(blob){
				saveAs(blob, setting.fileName + '.xlsx');
			});
			
		};
		
		var save = function(zip,xl)
		{
			var strWorkbook = workbook.process();
			saveSheets(zip,xl);
			xl.file('styles.xml', getStyles());
			zip.file('[Content_Types].xml', getContentTypesXml());
			zip.file('_rels/.rels', getRels());
			xl.file('workbook.xml', strWorkbook);
			xl.file('_rels/workbook.xml.rels', getWorkbookXMLRels());
		};
		
		var saveSheets = function(zip,xl)
		{
			for(var count = 0;count < setting.sheets.length;count++)
			{
				var sheet = workbook.getSheet(count);
				xl.file(sheet.getPath(),sheet.getSheetData());
				xlsxUtil.setSheetProp("relationship",sheet.getRelationship());
				xlsxUtil.setSheetProp("override",sheet.getOverride());
			}
		};
		
		var getWorkbookXMLRels = function()
		{
			var relationShip = {style:{type:xlsxUtil.schemas.stylesheet,target:'styles.xml'},
								sharedStrings:{type:xlsxUtil.schemas.sharedStrings,target:'sharedStrings.xml'}
							   };
			var arrChild = [];
			var index = setting.sheets.length;
			for(var key in relationShip)
			{
				var item = relationShip[key];
				arrChild.push(xlsxUtil.getXML({
						name: 'Relationship',
						attributes: {'Id':'rId' + (++index),'Type': item.type,'Target': item.target}
				}));
			}
			arrChild.push(xlsxUtil.getSheetProp("relationship"));
			
			return xlsxUtil.getXML({
				name: 'Relationships',
				ns: 'relationshipPackage',
				children: arrChild
			});
		};
		
		var getStyles = function()
		{
			const style = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?> '+
						   '<styleSheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac"><numFmts count="1"><numFmt numFmtId="164" formatCode="&quot;$&quot;#,##0.00"/></numFmts><fonts count="1" x14ac:knownFonts="1"><font><sz val="11"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts><fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills><borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs><cellXfs count="2"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0"/><xf numFmtId="164" fontId="0" fillId="0" borderId="0" xfId="0" applyNumberFormat="1"/></cellXfs><cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles><dxfs count="0"/><tableStyles count="0" defaultTableStyle="TableStyleMedium2" defaultPivotStyle="PivotStyleLight16"/><extLst><ext uri="{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main"><x14:slicerStyles defaultSlicerStyle="SlicerStyleLight1"/></ext></extLst></styleSheet>';
			return style;
		};
		
		var getRels = function()
		{
			const rels = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n ' +
			'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n ' +
			'<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>\n ' +
			'</Relationships>';
			
			return rels;
		};
		
		var getContentTypesXml = function()
		{
			var override = {workbook:{partName:'/xl/workbook.xml',contentType:'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'},
								styles:{partName:'/xl/styles.xml',contentType:'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'}
				   			   };
			var arrChild = [];
			arrChild.push('<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>');
			arrChild.push('<Default Extension="xml" ContentType="application/xml"/>');
			for(var key in override)
			{
				var item = override[key];
				arrChild.push(xlsxUtil.getXML({
						name: 'Override',
						attributes: {'PartName': item.partName,'ContentType': item.contentType}
				}));
			}
			arrChild.push(xlsxUtil.getSheetProp("override"));
			
			return xlsxUtil.getXML({
				name: 'Types',
				ns: 'contentTypes',
				children: arrChild
			});
		};
		
		var XlsxWorkbook = function(util,arrSheets)
		{
			var self = this;
			var arrSheet = [];
			
			var process = function() 
			{
				arrSheet = [];
				var sheetValue = "";
				if(arrSheets && arrSheets.length > 0)
				{
					for(var count = 0;count < arrSheets.length;count++)
					{
						var sheetID = count + 1;
						var sheet = new XlsxSheet(util,arrSheets[count],sheetID);
						sheetValue += sheet.process();
						arrSheet.push(sheet);
					}
				}
				sheetValue = '<sheets>' + sheetValue + '</sheets>';
				return util.getXML({
					name: 'workbook',
					ns: 'spreadsheetml',
					attributes: {'xmlns:r': util.schemas.r,'xmlns:mx': util.schemas.mx,'xmlns:mc': util.schemas.mc,'xmlns:mv': util.schemas.mv,'xmlns:x14': util.schemas.x14,'xmlns:x14ac': util.schemas.x14ac,'xmlns:xm': util.schemas.xm},
					children: ['<workbookPr/>','<bookViews><workbookView activeTab="0"/></bookViews>', sheetValue, '<definedNames/>', '<calcPr/>']
				});
			};
			
			var getSheet = function(index)
			{
				if(arrSheet && arrSheet.length > index)
				{
					return arrSheet[index];
				}
				return null;
			};
			
			self.process = process;
			self.getSheet = getSheet;
		};
		
		var XlsxSheet = function(util,objSheet,sheetIndex)
		{
			var self = this;
			var arrRow = [];
			var sheetData = null;
			var path = null;
			var relationsPath = null;
			var relationship = null;
			var override = null;
			
			var process = function() 
			{
				sheetData = processSheetData();
				setProp();
				return processSheet();
			};
			
			var processSheetData = function() 
			{
				arrRow = [];
				var rowValue = "";
				if(objSheet)
				{
					var dataSource = objSheet.dataSource;
					var arrCol = objSheet.columns;
					var rowProperties = objSheet.rowProperties || {};
					if(arrCol && arrCol.length > 0 && dataSource && dataSource.length > 0)
					{
						for(var count = 0;count < dataSource.length;count++)
						{
							var rowIndex = count + 1;
							var row = new XlsxRow(util,dataSource[count],arrCol,rowIndex,rowProperties[rowIndex] || {});
							rowValue += row.process();
							arrRow.push(row);
						}
					}
				}
				var colValue = processColumns(arrCol);
				rowValue = '<sheetData>' + rowValue + '</sheetData>';
				
				return util.getXML({
					name: 'worksheet',
					ns: 'spreadsheetml',
					attributes: {'xmlns:mc': util.schemas.mc,'xmlns:mv': util.schemas.mv,'xmlns:mx': util.schemas.mx,'xmlns:r': util.schemas.r,'xmlns:x14': util.schemas.x14,'xmlns:x14ac': util.schemas.x14ac,'xmlns:xm': util.schemas.xm},
					children: [colValue,rowValue]
				});
			};
			
			var processSheet = function() 
			{
				var templateSheet = '<sheet state="visible" name="###sheetName###" sheetId="###sheetIndex###" r:id="rId###sheetIndex###"/>';
				var sheet = templateSheet.replaceAll("###sheetName###",objSheet.name || ("Sheet" + sheetIndex));
				sheet = sheet.replaceAll("###sheetIndex###",sheetIndex);
				return sheet;
			};
			
			var processColumns = function(arrCol)
			{
				if(arrCol && arrCol.length > 0)
				{
					var arrChildren = [];
					for(var count = 0;count < arrCol.length;count++)
					{
						var item = arrCol[count];
						var arrAttr = {'min': item.min || count + 1, 'max': item.max || count + 1};
						if (item.hidden) 
						{
							arrAttr['hidden'] = 1;
						}
						if (item.autoFit) 
						{
							arrAttr['bestFit'] = 1;
						}
						if (item.width) 
						{
							arrAttr['customWidth'] = 1;
							arrAttr['width'] = item.width;
						} 
						else 
						{
							arrAttr['width'] = 9.140625;
						}
						if (item.styleID) 
						{
							arrAttr['style'] = item.styleID;
						}
						arrChildren.push(util.getXML({
							name: 'col',
							attributes: arrAttr
						}));
					}
					return util.getXML({
						name: 'cols',
						children: arrChildren
					});
				}
				return '';
			};
			
			var getRow = function(index)
			{
				if(arrRow && arrRow.length > index)
				{
					return arrRow[index];
				}
				return null;
			};
			
			var setProp = function()
			{
				path = 'worksheets/sheet' + sheetIndex + '.xml';
				relationsPath = 'worksheets/_rels/sheet' + sheetIndex + '.xml.rels';
				relationship = util.getXML({
					name: 'Relationship',
					attributes: {'Id': 'rId' + sheetIndex,'Type': util.schemas.worksheet,'Target': path}
				});
				override = util.getXML({
					name: 'Override',
					attributes: {'PartName': '/xl/' + path,'ContentType': 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'}
				});
			};
			
			var getPath = function()
			{
				return path;
			};
			
			var getRelationsPath = function()
			{
				return relationsPath;
			};
			
			var getSheetData = function()
			{
				return sheetData;
			};
			
			var getRelationship = function()
			{
				return relationship;
			};
			
			var getOverride = function()
			{
				return override;
			};
			
			self.process = process;
			self.getRow = getRow;
			self.setProp = setProp;
			self.getPath = getPath;
			self.getRelationsPath = getRelationsPath;
			self.getSheetData = getSheetData;
			self.getRelationship = getRelationship;
			self.getOverride = getOverride;
		};
		
		var XlsxRow = function(util,rowData,arrCol,rowIndex,objRow)
		{
			var self = this;
			var arrCell = [];
			
			var process = function() 
			{
				arrCell = [];
				var cellValue = "";
				if(arrCol && arrCol.length > 0)
				{
					for(var count = 0;count < arrCol.length;count++)
					{
						var cell = new XlsxCell(util,arrCol[count],count + 1,rowData,rowIndex);
						cellValue += cell.process();
						arrCell.push(cell);
					}
				}
				return util.getXML({
					name: 'row',
					attributes: getAttr(),
					children: [cellValue]
				});
			};
			
			var getAttr = function()
			{
				var attr = {'r': rowIndex};
				if (objRow.height !== undefined) 
				{
					attr["customHeight"] = 1;
					attr["ht"] = objRow.height;
				}
				if (objRow.styleID) 
				{
					attr["customFormat"] = 1;
					attr["s"] = objRow.styleID;
				}
				if (objRow.outlineLevel) 
				{
					attr["outlineLevel"] = objRow.outlineLevel;
				}
				return attr;
			};
			
			var getCell = function(index)
			{
				if(arrCell && arrCell.length > index)
				{
					return arrCell[index];
				}
				return null;
			};
			
			self.process = process;
			self.getCell = getCell;
			
		};
		
		var XlsxCell = function(util,objCol,cellIndex,rowData,rowIndex)
		{
			var self = this;
			var dataType = null;
			
			initialize = function()
			{
				setDataType();
			};
			
			var setDataType = function()
			{
				dataType = {"string":{type: "string",generateCell: generateStringCell},
							"number":{type: "number",generateCell: generateNumberCell},
							"boolean":{type: "boolean",generateCell: generateBooleanCell}, 
							"currency":{type: "currency",generateCell:generateCurrencyCell}};
			};
			
			var process = function() 
			{
				var objType = null;
				if (!objCol.type || !dataType[objCol.type]) 
				{
					objType = dataType["string"];
				}
				else
				{
					objType = dataType[objCol.type];
				}
				var retValue = objType.generateCell(cellIndex - 1,rowData[objCol.dataField],rowIndex);
				return retValue;
			};
			
			var generateStringCell = function(index, value, rowIndex)
			{
				return '<c r="' + generatorCellNumber(index, rowIndex) + '" t="inlineStr"><is><t>' + value + '</t></is></c>';
			};
			
			var generateNumberCell = function(index, value, rowIndex)
			{
				return '<c r="' + generatorCellNumber(index, rowIndex) + '" t="n"> <v>' + value + '</v></c>';
			};
			
			var generateBooleanCell = function(index, value, rowIndex)
			{
				return '<c r="' + generatorCellNumber(index, rowIndex) + '" t="b"> <v>' + value + '</v></c>';
			};
			
			var generateCurrencyCell = function(index, value, rowIndex)
			{
				return '<c r="' + generatorCellNumber(index, rowIndex) + '" s="1"> <v>' + value + '</v></c>';
			};
			
			var generatorCellNumber = function(index, rowNumber)
			{
				return generateColumnLetter(index) + rowNumber;
			};
			
			var generateColumnLetter = function(colIndex) 
			{
				if (typeof colIndex !== 'number') 
				{
					return '';
				}
				const prefix = Math.floor(colIndex / 26);
				const letter = String.fromCharCode(97 + (colIndex % 26)).toUpperCase();
				if (prefix === 0) 
				{
					return letter;
				}
				return generateColumnLetter(prefix - 1) + letter;
			};
			
			initialize();
			
			self.process = process;
		};
		
		var XlsxUtil = function()
		{
			var self = this;
			var objSheetsProp = {};
			
			var xmlPrefix = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n';
			var schemas = {
					'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
					'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
					'mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',
					'mv': 'urn:schemas-microsoft-com:mac:vml',
					'x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main',
					'x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',
					'xm': 'http://schemas.microsoft.com/office/excel/2006/main',
					'spreadsheetml': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
					'relationshipPackage': 'http://schemas.openxmlformats.org/package/2006/relationships',
					'worksheet': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',
					'stylesheet': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',
					'sharedStrings': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',
					'contentTypes': 'http://schemas.openxmlformats.org/package/2006/content-types',
					
					'officeDocument': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',
					'package': 'http://schemas.openxmlformats.org/package/2006/relationships',
					'table': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',
					'spreadsheetDrawing': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',
					'drawing': 'http://schemas.openxmlformats.org/drawingml/2006/main',
					'drawingRelationship': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
					'image': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
					'chart': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart',
					'hyperlink': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink'
			};
			
			var getXML = function(config) 
			{
				var retValue = '<' + config.name;
				var content = '';

				if (config.ns) 
				{
					retValue = xmlPrefix + retValue + ' xmlns="' + schemas[config.ns] + '"';
				}
				if (config.attributes) 
				{
					for(var key in config.attributes)
					{
						retValue += ' ' + key + '="' + escapeString(config.attributes[key]) + '"';
					}
				}
				if (config.value !== undefined) 
				{
					content += escapeString(config.value);
				}
				if (config.children) 
				{
					content += config.children.join('');
				}
				if (content) 
				{
					retValue += '>' + content + '</' + config.name + '>';
				} 
				else 
				{
					retValue += '/>';
				}
				return retValue;
			};
			
			var escapeString = function(str)
			{
				return str;
			};
			
			var setSheetProp = function(prop,value)
			{
				objSheetsProp[prop] = value;
			};
			
			var getSheetProp = function(prop)
			{
				return objSheetsProp[prop];
			};
			
			self.getXML = getXML;
			self.escapeString = escapeString;
			self.setSheetProp = setSheetProp;
			self.getSheetProp = getSheetProp;
			self.schemas = schemas;
		};
		
		self.process = process;
		
		initialize();
	};
	
	return NSXlsxExport;
})();
nsModuleExport(this,"NSXlsxExport",NSXlsxExport);

//xlsxExportDemo.jsp

<!DOCTYPE html>
<html lang="en">
<head>
  <title>Xlsx Demo</title>
  <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />

 <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.js"></script>
 <script src="https://fastcdn.org/FileSaver.js/1.1.20151003/FileSaver.min.js"></script>
 <script src="/JSLib/lib/com/org/util/nsUtil.js"></script>
 <script src="/JSLib/lib/com/org/util/nsXlsxExport.js"></script>

</head>
<body>
<button onclick="download()">Click me!</button>
<script>

function download() 
{
	var arrColumns = [{headerText:"Id",dataField:"id",width:5,type:"number"},
	                  {headerText:"Country",dataField:"country",width:10},
	                  {headerText:"Date",dataField:"date",width:55}];
	var arrItems = [];
	for(var count = 0;count < 10;count++)
	{
		item = {id: count,country: 'UK'};
		if((count % 2) === 0)
		{
			item["country"] = "US";
		}
		var date = new Date();
	    date.setFullYear(2015, Math.floor(Math.random() * 12), Math.floor(Math.random() * 27));
	    date.setHours(Math.floor(Math.random()*23), Math.floor(Math.random()*59), Math.floor(Math.random()*59), 0);
	    item["date"] = date;
		arrItems.push(item);
	}
	var objRow = {2:{height:20,outline: 2}};
	var arrSheet=[{name:"Sheet 1",dataSource:arrItems,columns: arrColumns,rowProperties: objRow}];
	var setting = {fileName:"temp",sheets:arrSheet};
	var xlsxExport = new NSXlsxExport(setting);
	xlsxExport.process();


};

</script>

</body>
</html>
