this.__processIconsInColumn(objColumn);

NSGrid.prototype.__processIconsInColumn = function(objColumn)
	{
		if(objColumn)
		{
			var itemIcons = objColumn["icons"];
			var icons = null;
			if(itemIcons)
			{
				icons = {};
				icons.menu = itemIcons["menu"] || this.__icons["menu"];
				icons.filter = itemIcons["filter"] || this.__icons["filter"];
				icons.sortAscending = itemIcons["sortAscending"] || this.__icons["sortAscending"];
				icons.sortDescending = itemIcons["sortDescending"] || this.__icons["sortDescending"];
				icons.columnMove = itemIcons["columnMove"] || this.__icons["columnMove"];
			}
			else if(this.__icons)
			{
				icons = this.util.cloneObject(this.__icons,true);
				delete icons.exportButton;
				delete icons.rowExpanded;
				delete icons.rowCollapsed;
			}
			if(icons)
			{
				objColumn.icons = icons;
			}
		}
	};
	
	if(this.__getColumnCustomIcon(colItem,"columnMove"))
				{
					divMove.innerHTML = this.__getColumnCustomIcon(colItem,"columnMove");
				}
				
				if(colItem.hasOwnProperty("sortable") && colItem["sortable"])
			{
				var divSorting = this.util.createDiv(colID + "SortContainer","nsGridSortContainer");
				divCell.appendChild(divSorting);
				if(!this.__isSortingIconCustom(colItem))
				{
					var divSortAsc = this.util.createDiv(colID + "SortAsc","nsSortAsc"); 
					divSorting.appendChild(divSortAsc);
					var divSortSpacer = this.util.createDiv(colID + "SortSpacer","nsSortSpacer"); 
					divSorting.appendChild(divSortSpacer);
					var divSortDesc = this.util.createDiv(colID + "SortDesc","nsSortDesc"); 
					divSorting.appendChild(divSortDesc);
				}
			}
			
			if(this.__getColumnCustomIcon(colItem,"menu"))
					{
						divMenuContainer.innerHTML = this.__getColumnCustomIcon(colItem,"menu");
					}
					
					NSGrid.prototype.__setArrowDirection = function(compArrow,isCollapsed)
	{
		if(compArrow)
		{
			var parent = this.util.findParent(compArrow,"TD");
			var colIndex = parseInt(parent.getAttribute("currentColumnIndex"));
			var colItem = this.__getColumnObject(colIndex);
			this.__objGrid.__setArrowDirection(compArrow,isCollapsed,colItem);
		}
	};
	
	NSGrid.prototype.__getCustomIcon = function(iconField)
	{
		if(this.__icons && this.__icons[iconField])
		{
			return this.__icons[iconField];
		}
		return null;
	};
	
	NSGrid.prototype.__getColumnCustomIcon = function(colItem,iconField)
	{
		if(colItem && colItem.icons && colItem.icons[iconField])
		{
			return colItem.icons[iconField];
		}
		return null;
	};
	
	NSGrid.prototype.__isSortingIconCustom = function(colItem)
	{
		if(this.__getColumnCustomIcon(colItem,"sortAscending") && this.__getColumnCustomIcon(colItem,"sortDescending"))
		{
			return true;
		}
		return false;
	};
	
	NSGrid.prototype.__isRowExpansionIconCustom = function()
	{
		if(this.__getCustomIcon("rowExpanded") && this.__getCustomIcon("rowCollapsed"))
		{
			return true;
		}
		return false;
	};
	
	
	this.__setSortIcons= function(target,isAscVisible,isDescVisible,columnDetail)
		{
			if(target)
			{
				if(!columnDetail)
				{
					var columnIndex = parseInt(target.getAttribute("currentColumnIndex"));
					columnDetail = this.__nsGrid.__getColumnObject(columnIndex);
				}
				if(columnDetail && this.__nsGrid.__isSortingIconCustom(columnDetail))
				{
					var divSorting = target.querySelector(".nsGridSortContainer");
					if(divSorting)
					{
						divSorting.innerHTML = "";
						if(isAscVisible)
						{
							divSorting.innerHTML += this.__nsGrid.__getColumnCustomIcon(columnDetail,"sortAscending");
						}
						if(isDescVisible)
						{
							divSorting.innerHTML += this.__nsGrid.__getColumnCustomIcon(columnDetail,"sortDescending");
						}
					}
				}
				else
				{
					if(isAscVisible != null)
					{
						 var divSortAsc = document.getElementById(target.getAttribute("id") + "SortAsc");
						 if(divSortAsc)
						 {
							 divSortAsc.style.display = isAscVisible ? "" : "none";
						 }
					}
					if(isDescVisible != null)
					{
						 var divSortDesc = document.getElementById(target.getAttribute("id") + "SortDesc");
						 if(divSortDesc)
						 {
							 divSortDesc.style.display = isDescVisible ? "" : "none";
						 }
					}
				}
			}
		};
		
		if(this.__nsGrid.__getColumnCustomIcon(colItem,"filter"))
					{
						divFilterIconContainer.innerHTML = this.__nsGrid.__getColumnCustomIcon(colItem,"filter");
					}
					
					NSHierarchicalGrid.prototype.__createArrow = function(compArrow,objSVG,arrowID,isCollapsed,item,colItem)
	{
		 if(this.__nsGrid.__isRowExpansionIconCustom())
		 {
			 this.__setArrowDirection(compArrow,isCollapsed,colItem);
		 }
		 else
		 {
			 var svg = objSVG.addSVG(compArrow,arrowID + "svg",this.__CLASS_ARROW,null,null,null,null,null,null,true);
			 this.util.addStyleClass(svg,this.__CLASS_ARROW + "Theme");
			 if(isCollapsed)
			 {
				 objSVG.addUse(svg,arrowID + "use",null,"#svgArrowRight");
			 }
			 else
			 {
				 objSVG.addUse(svg,arrowID + "use",null,"#svgArrowDown");
			 }
		 }
	};
	
	NSHierarchicalGrid.prototype.__setArrowDirection = function(compArrow,isCollapsed,colItem)
	{
		if(this.__nsGrid.__isRowExpansionIconCustom())
		{
			if(isCollapsed)
			{
				compArrow.innerHTML = this.__nsGrid.__getCustomIcon("rowCollapsed");
			}
			else
			{
				compArrow.innerHTML = this.__nsGrid.__getCustomIcon("rowExpanded");
			}
		}
		else
		{
			var objSVG = new NSSvg();
			var useID = compArrow.getAttribute("id") + "use";
			if(isCollapsed)
			{
				objSVG.changeUseHref(useID,"#svgArrowRight");
			}
			else
			{
				objSVG.changeUseHref(useID,"#svgArrowDown");
			}
		}
	};
	
	NSGroupingGrid.prototype.__createArrow = function(compArrow,objSVG,arrowID,isCollapsed,item,colItem)
	{
		 compArrow.style.paddingTop = "0px";
		 if(this.__nsGrid.__isRowExpansionIconCustom())
		 {
			 this.__setArrowDirection(compArrow,isCollapsed,colItem);
		 }
		 else
		 {
			 var classArrow = "nsGridGroupIcon"; 
			 var svg = objSVG.addSVG(compArrow,arrowID + "svg","nsGridGroupSVG",null,null,null,null,null,null,true);
			 this.util.addStyleClass(svg,classArrow);
			 this.util.addStyleClass(svg,classArrow + "Theme");
			 if(isCollapsed)
			 {
				 objSVG.addUse(svg,arrowID + "use",null,"#svgPlus");
			 }
			 else
			 {
				 objSVG.addUse(svg,arrowID + "use",null,"#svgMinus");
			 }
		 }
	};
	
	NSGroupingGrid.prototype.__setArrowDirection = function(compArrow,isCollapsed,colItem)
	{
		if(this.__nsGrid.__isRowExpansionIconCustom())
		{
			if(isCollapsed)
			{
				compArrow.innerHTML = this.__nsGrid.__getCustomIcon("rowCollapsed");
			}
			else
			{
				compArrow.innerHTML = this.__nsGrid.__getCustomIcon("rowExpanded");
			}
		}
		else
		{
			var objSVG = new NSSvg();
			var useID = compArrow.getAttribute("id") + "use";
			if(isCollapsed)
			{
				objSVG.changeUseHref(useID,"#svgPlus");
			}
			else
			{
				objSVG.changeUseHref(useID,"#svgMinus");
			}
		}
	};
