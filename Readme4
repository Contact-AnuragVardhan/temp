var model = this.__model;
		try
		{
			this.__model = JSON.parse(JSON.stringify(model));
		}
		catch(error)
		{
			this.__model = JSON.parse(this.util.stringifyOnce(model));
		}
    
    var dispatch = function(event, details)
		{
			if (objEvents[event]) 
			{
				for(var index = 0;index < objEvents[event].listeners.length;index++)
				{
					var listener = objEvents[event].listeners[index];
					listener(details);
				}
		        return true;
		    }
			console.log("The event: " + event + " does not exist");
			return false;
		}; 
    
    this.__dispatchEvent(NSRouter.NavigationStart, {route: route}, {route: route});
    
    NSRouter.prototype.__dispatchEvent = function(eventType,data,param,bubbles,cancelable)
	{
		this.util.dispatchEvent(window,eventType,data,param,bubbles,cancelable);
	};
	
	NSRouter.NavigationStart = "navigationStart";
	NSRouter.NavigationEnd = "navigationEnd";
	NSRouter.NavigationCancel = "navigationCancel";
	NSRouter.NavigationError = "navigationError";
  
  
  	NSUtil.prototype.slideUp = function(element,duration,callback,heightSubstracter)
	{
		if(element)
		{
			duration = duration || 20;
			heightSubstracter = heightSubstracter || 10;
			var rect = element.getBoundingClientRect();
			var height = rect.height;
			var counter = height;
			var subtractor = height / heightSubstracter;
			//element.style.overflow = "hidden";
			var interval = setInterval(function () {
				 counter -= subtractor;
				 if(counter > 0) 
				 {
					 element.style.height = counter + "px";
				 }
				 else
				 {
					 element.style.height = null;
			    	 clearInterval(interval);
			    	 if(callback)
			    	 {
			    		  callback(element);
			    	 }
				 }
			},duration);
		}
	};
	
	NSUtil.prototype.slideDown = function(element,duration,callback,heightAdder)
	{
		if(element)
		{
			duration = duration || 20;
			heightAdder = heightAdder || 10;
			var counter = 0;
			var height = this.getHiddenElementHeight(element);
			var adder = height / heightAdder;
			element.style.height = "0px";    
			element.style.display = "";
			var interval = setInterval(function () {            
		      counter += adder;
		      if(counter < height) 
		      {
		    	  element.style.height = counter + "px";
		      } 
		      else 
		      {
		    	  element.style.height = null;
		    	  clearInterval(interval);
		    	  if(callback)
		    	  {
		    		  callback(element);
		    	  }
		      }
		    }, duration); 
		}
	};
	
	//will work only if element parent is not hidden
	NSUtil.prototype.getHiddenElementHeight = function(element)
	{
		if(element)
		{
			var style = window.getComputedStyle(element);
			var maxHeight = style.maxHeight.replace('px', '').replace('%', '');
			if(style.display !== 'none' && maxHeight !== '0') 
			{
				var rect = element.getBoundingClientRect();
				return rect.height;
			}
			var id = "nsTemp-"+ Math.floor(Math.random() * 99999);
			var clonedElement = element.cloneNode(true);
			clonedElement.setAttribute("id",id);
			clonedElement.style.position = "absolute";
			clonedElement.style.height = "auto";
			clonedElement.style.width = "1000px";
			clonedElement.style.left = "-10000em";
			clonedElement.style.display = "";
			element.parentElement.appendChild(clonedElement);
			var rect = clonedElement.getBoundingClientRect();
			var height = rect.height;
			clonedElement.parentElement.removeChild(clonedElement);
		}
		return 0;
	};
	
NSUtil.prototype.stringifyOnce = function(obj, replacer, indent)
	{
		var printedObjects = [];
	    var printedObjectKeys = [];
	    function printOnceReplacer(key, value)
	    {
	        var printedObjIndex = false;
	        printedObjects.forEach(function(obj, index)
	        {
	            if(obj===value)
	            {
	                printedObjIndex = index;
	            }
	        });
	        if(value && printedObjIndex && typeof(value)=="object")
	        {
	            return "(see " + value.constructor.name.toLowerCase() + " with key " + printedObjectKeys[printedObjIndex] + ")";
	        }
	        else
	        {
	            var qualifiedKey = key || "(empty key)";
	            printedObjects.push(value);
	            printedObjectKeys.push(qualifiedKey);
	            if(replacer)
	            {
	                return replacer(key, value);
	            }
	            else
	            {
	                return value;
	            }
	        }
	    }
	    return JSON.stringify(obj, printOnceReplacer, indent);
	};
  
  text-shadow: rgb(255, 255, 255) 0px 0px 5px;
