var NSGridFilter = function(nsGrid)
	{
		this.SEARCH_INTERVAL = 500;
		this.__nsGrid = nsGrid;
		this.__enableApply = true;
		this.__isOrFilter = false;
		
		this.util = nsGrid.util;
		this.isFiltered = false;
		this.__interval = null;
		this.__objControl = {};
		this.__filteredColumn = [];
		this.__objAdvancedFilterSetting = {};
		this.__nsPopUp = null;
		this.__maxZIndex = -1;
		this.__documentClickRef = null;
		this.__documentKeyUpRef = null;
		
		this.processColumnObject = function(objColumn)
		{
			if(this.__nsGrid.__enableFilter)
			{
				if(objColumn.hasOwnProperty("enableFilter"))
				{
					objColumn.enableFilter = Boolean.parse(objColumn["enableFilter"]);
				}
				else
				{
					objColumn.enableFilter = true;
				}
				if(objColumn.enableFilter)
				{
					var objFilter = objColumn["filter"];
					if(objFilter)
					{
						if(objFilter.hasOwnProperty("filterRenderer"))
						{
							var filterRenderer = objFilter["filterRenderer"];
							if (typeof filterRenderer === "string" || filterRenderer instanceof String)
							{
								if(this.util.isFunction(filterRenderer))
								{
									objFilter.filterRenderer = this.__nsGrid.__context[filterRenderer];
								}
							}
						}
						else if(objFilter.hasOwnProperty("filterTemplate") && objFilter["filterTemplate"])
						{
							objFilter.filterTemplate = this.util.getTemplate(objFilter["filterTemplate"]);
						}
						else if(objFilter.hasOwnProperty("type") && objFilter["type"] == NSGrid.FILTER_TYPE_DATE)
						{
							this.__setDefaultDatePicker();
							objFilter.filterDateComponent = new this.__nsGrid.__components["datePicker"]();
						}
						else 
						{
							objFilter.filterRenderer = this.__defaultRenderer.bind(this);
						}
						if(this.__nsGrid.__enableAdvancedFilter)
						{
							if(objFilter.hasOwnProperty("enableAdvancedFilter"))
							{
								objFilter.enableAdvancedFilter = Boolean.parse(objFilter["enableAdvancedFilter"]);
							}
							else
							{
								objFilter.enableAdvancedFilter = true;
							}
							objFilter["advancedFilterType"] = objFilter["advancedFilterType"] ? objFilter["advancedFilterType"] : NSGrid.ADVANCED_FILTER_TEXT;
							if(objFilter.hasOwnProperty("advancedFilterHandler"))
							{
								var advancedFilterHandler = objFilter["advancedFilterHandler"];
								if (typeof advancedFilterHandler === "string" || advancedFilterHandler instanceof String)
								{
									if(this.util.isFunction(advancedFilterHandler))
									{
										objFilter.advancedFilterHandler = this.__nsGrid.__context[advancedFilterHandler];
									}
								}
							}
						}
						else
						{
							objFilter.enableAdvancedFilter = false;
						}
					}
					else
					{
						objColumn["filter"] = {filterRenderer:this.__defaultRenderer.bind(this),enableAdvancedFilter:this.__nsGrid.__enableAdvancedFilter,advancedFilterType:NSGrid.ADVANCED_FILTER_TEXT};
					}
				}
			}
		};
		
		this.addFilterRenderer = function(rendererRow,rendererCell,colItem,colIndex,colID)
		{
			if(this.__nsGrid.__enableFilter && colItem && colItem["enableFilter"])
			{
				var objFilter = colItem["filter"];
				if(objFilter)
				{
					var divHeaderRendererContainer = this.util.createDiv(colID + "rendererContainer"); 
					rendererCell.appendChild(divHeaderRendererContainer);
					var dataField = colItem["dataField"];
					var type = objFilter["type"];
					var templateRenderer = objFilter["filterTemplate"];
					var itemRenderer = objFilter["filterRenderer"];
					var dateComponent = objFilter["filterDateComponent"];
					if(dateComponent && type == NSGrid.FILTER_TYPE_DATE)
					{
						var config = objFilter["config"] || {};
						this.dateRenderer(dateComponent,dataField,divHeaderRendererContainer,config,objFilter,this.dateSelectedHandler.bind(this,objFilter));
						this.__objControl[dataField] = {control:dateComponent,config:config,type:"date"};
					}
					else if(itemRenderer)
					{
						var objRenderer = itemRenderer(colItem,colIndex,rendererCell,rendererRow);
						if(objRenderer)
						{
							if(this.util.isString(objRenderer))
							{
								var compSpan = document.createElement("span");
								compSpan.innerHTML = objRenderer;
								divHeaderRendererContainer.appendChild(compSpan);
							}
							else
							{
								divHeaderRendererContainer.appendChild(objRenderer);
							}
						}
					}
					else if(templateRenderer)
					{
						divHeaderRendererContainer.appendChild(templateRenderer.cloneNode(true));
					}
					if(objFilter && objFilter["enableAdvancedFilter"])
					{
						var rendererID = this.__getRendererID(dataField);
						var divFilterIconContainer = this.util.createDiv(rendererID + "FilterIconContainer","nsFilterIconContainer");
						divFilterIconContainer.setAttribute("field",dataField);
						this.util.addEvent(divFilterIconContainer,"click",this.__filterIconClickHandler.bind(this));
						if(this.__nsGrid.__getColumnCustomIcon(colItem,"filter"))
						{
							divFilterIconContainer.innerHTML = this.__nsGrid.__getColumnCustomIcon(colItem,"filter");
						}
						else
						{
							var objSVG = new NSSvg();
							var filterID = new NSSvgShapes().__FILTER_ICON_ID;
							var svg = objSVG.addSVG(divFilterIconContainer,rendererID + "filtersvg","nsFilterIconSVG",null,null,null,null,null,null,true);
							objSVG.addUse(svg,rendererID + "use",null,"#" + filterID);
						}
						divHeaderRendererContainer.appendChild(divFilterIconContainer);
					}
				}
			}
		};
		
		this.dateRenderer = function(dateComponent,dataField,parent,config,objFilter,dateSelectedHandler)
		{
			config.dateSelectedHandler = this.dateSelectedHandler.bind(this,objFilter,config);//dateSelectedHandler;
			dateComponent.init(config);
			var element = dateComponent.getElement();
			if(element)
			{
				element.setAttribute("field",dataField);
				parent.appendChild(element);
				dateComponent.elementAdded();
			}
			else
			{
				this.util.warning("nsGrid","Date Component UI is null.");
			}
		};
		
		this.dateSelectedHandler = function(objFilter,config,isTyping)
		{
			var dateComponent = objFilter["filterDateComponent"];
			if(dateComponent)
			{
				var date = dateComponent.getDate();
				var target = this.util.getTarget(event);
				//clear advanced Filter object if coming from normal filter
				if(!this.__nsPopUp)
				{
					var dataField = target.getAttribute("field");
					if(dataField)
					{
						this.__objAdvancedFilterSetting[dataField] = null;
					}
				}
				if(isTyping)
				{
					clearTimeout(this.__interval);
					var base = this;
					this.__interval = setTimeout(function(){
							base.__filterGrid.bind(base)();
					}, this.SEARCH_INTERVAL);
				}
				else
				{
					this.__filterGrid.bind(this)();
				}
			}
		};
		
		this.setFiltersInControls = function(filter)
		{
			if(this.__nsGrid.__enableFilter && this.__objControl && filter)
			{
				 for(var field in this.__objControl)
				 {
					 if(filter[field])
				     {
						 var control = this.__objControl[field];
						 if(control && control.control)
						 {
							 if(control.type == "date")
							 {
								 control.control.setDate(filter[field]);
							 }
							 else if(control.type == "text")
							 {
								 control.control.value = filter[field];
							 }
						 }
				     }
				 }
			}
		};
		
		this.resetFilters = function()
		{
			if(this.__nsGrid.__enableFilter && this.__objControl)
			{
				 for(var field in this.__objControl)
				 {
					 var control = this.__objControl[field];
					 if(control && control.control)
					 {
						 if(control.type == "date" && control.control.getDate())
						 {
							 control.control.setDate(null);
						 }
						 else if(control.type == "text" && control.control.value)
						 {
							 control.control.value = "";
						 }
					 }
				 }
				 this.__resetFiltering();
			}
		};
		
		this.remove = function()
		{
			if(this.__documentClickRef)
			{
				this.util.removeEvent(document,"click", this.__documentClickRef, false);
				this.__documentClickRef = null;
			}
			if(this.__documentKeyUpRef)
			{
				this.util.removeEvent(document,"keyup", this.__documentKeyUpRef, false);
				this.__documentKeyUpRef = null;
			}
		};
		
		this.clearFilters = function() 
		{
			 for(var field in this.__objControl)
			 {
				 var control = this.__objControl[field];
				 if(control && control.control)
				 {
					 if(control.type == "date" && control.control.getDate())
					 {
						 control.control.setDate(null);
					 }
					 else if(control.type == "text" && control.control.value)
					 {
						 control.control.value = "";
					 }
				 }
			 }
			 this.__objAdvancedFilterSetting = {};
		};
		
		this.resetVariables = function() 
		{
			this.__filteredColumn = [];
			this.__objAdvancedFilterSetting = [];
		};
		
		this.__initialize = function()
		{
			if(!this.__documentClickRef)
			{
				this.__documentClickRef = this.__documentClickHandler.bind(this);
				this.util.addEvent(document,"click", this.__documentClickRef);
			}
			if(!this.__documentKeyUpRef)
			{
				this.__documentKeyUpRef = this.__documentKeyUpHandler.bind(this);
				this.util.addEvent(document,"keyup", this.__documentKeyUpRef);
			}
			this.__maxZIndex = this.util.getMaxZIndex();
			this.__injectInNSGrid();
		};
		
		this.__defaultRenderer = function(colItem,colIndex,cell,row)
		{
			if(colItem)
			{
				var objFilter = colItem["filter"];
				var dataField = colItem["dataField"];
				var headerText = colItem["headerText"];
				var rendererID = this.__getRendererID(dataField);
				var divRenderer = this.util.createDiv(rendererID,"nsFilterContainer");
				var txtFilter = this.util.createElement("input","txt" + rendererID,"nsFilter");
				//this.util.addStyleClass(txtFilter,"nsSearchInlineTextBox");
				txtFilter.setAttribute("type","search");
				txtFilter.setAttribute("field",dataField);
				//txtFilter.setAttribute("placeholder","Search " + headerText);
				this.util.addEvent(txtFilter,"input",this.__txtInputChangeHandler.bind(this));
				//this.util.addEvent(txtFilter,"search",this.__txtInputChangeHandler.bind(this));
				//var divSearch = this.util.getSearchTextBox(txtFilter);
				//txtFilter.style.width = (cell.offsetWidth / 2) + "px";
				divRenderer.appendChild(txtFilter);
				this.__objControl[dataField] = {control:txtFilter,type:"text"};
				return divRenderer;
			}
			return null;
		};
		
		this.__txtInputChangeHandler = function(event)
		{
			var target = this.util.getTarget(event);
			var dataField = target.getAttribute("field");
			if(dataField)
			{
				this.__objAdvancedFilterSetting[dataField] = null;
			}
			clearTimeout(this.__interval);
			var base = this;
			this.__interval = setTimeout(function(){
					base.__filterGrid.bind(base)();
				}, this.SEARCH_INTERVAL);
		};
		
		this.__filterIconClickHandler = function(event)
		{
			var target = this.util.getTarget(event);
			target = this.util.getWebComponentElement(target);
			if(target && !this.util.hasStyleClass(target,"nsFilterIconContainer"))
			{
				target = this.util.findParentBySelector(target,".nsFilterIconContainer");
			}
			var dataField = target.getAttribute("field");
			var objColumn = this.__nsGrid.__getColumnObjectByDataField(dataField);
			var objFilter = objColumn["filter"];
			if(this.__nsPopUp)
			{
				this.__removePopUp();
			}
			var control = this.__objControl[dataField];
			if(control && control.control)
			{
				(control.type == "date") ? control.control.setDate(null) : control.control.value = "";
			}
			var colID = this.__getRendererID(dataField);
			var popUpPos = objFilter["advancedFilterPopUpPos"];
			if(!popUpPos)
			{
				popUpPos = this.util.POS_BOTTOMLEFT;
				if(objColumn[this.__nsGrid.__fieldColIndex] === 0 || (this.__nsGrid.__enableGrouping && objColumn[this.__nsGrid.__fieldColIndex] === 1))
				{
					popUpPos = this.util.POS_BOTTOMRIGHT; 
				}
			}
			var popUpSetting = {id:colID + "detailFilterContainer",type:"div",width:275,position:popUpPos,closeOnOutsideClick:true};
			this.__nsPopUp = new this.util.nsPopUp(popUpSetting);
			this.__nsPopUp.create();
			var popUp = this.__nsPopUp.getPopUp();
			if(this.__maxZIndex > 0)
			{
				popUp.style.zIndex = this.__maxZIndex;
			}
			this.util.addEvent(popUp,"click",this.__detailFilterClickHandler.bind(this));
			var advancedFilterType = objFilter["advancedFilterType"];
			if(objFilter.advancedFilterHandler)
			{
				objFilter.advancedFilterHandler(dataField,this.__nsPopUp,this.__objAdvancedFilterSetting,this.__getRendererID(dataField),this.__enableApply,
						this.__createApplySection.bind(this),this.__advanceFilterGrid.bind(this),this.__removePopUp.bind(this));
			}
			else if(advancedFilterType === NSGrid.ADVANCED_FILTER_TEXT)
			{
				this.__getTextDetailFilter(dataField,objFilter);
			}
			else if(advancedFilterType === NSGrid.ADVANCED_FILTER_NUMBER)
			{
				this.__getNumberDetailFilter(dataField,objFilter);
			}
			else if(advancedFilterType === NSGrid.ADVANCED_FILTER_LIST)
			{
				this.__getListDetailFilter(dataField,objFilter);
			}
			else if(advancedFilterType === NSGrid.ADVANCED_FILTER_DATE)
			{
				this.__getDateDetailFilter(dataField,objFilter);
			}
			this.__nsPopUp.show();
			this.__nsPopUp.placePopUp(event);
			//event.stopImmediatePropagation();
			event.stopPropagation();
		};
		
		this.__filterGrid = function()
		{
			 var conditionFilter = null;
			 if(this.__isOrFilter)
			 {
				 var filter = [];
				 var setting = {};
				 for(var field in this.__objControl)
				 {
					 var control = this.__objControl[field];
					 if(control && control.control)
					 {
						 if(control.type == "date" && control.control.getDate())
						 {
							 var item = {};
							 item[field] = control.control.getDate();
							 var config = control.config || {};
							 setting[field] = {matchType:"equals",type:"date"};
							 for(var key in config)
							 {
								 if(this.util.isUndefined(setting[field][key]))
								 {
									 setting[field][key] = config[key];
								 }
							 }
							 filter.push(item);
						 }
						 else if(control.type == "text" && control.control.value)
						 {
							 var item = {};
							 item[field] = control.control.value;
							 setting[field] = {caseSensitive:false,multiline:false,matchType:new NSFilter().CONTAINS};
							 filter.push(item);
						 }
					 }
				 }
				 conditionFilter = filter;
			 }
			 else
			 {
				 var filter = {};
				 var setting = {};
				 for(var field in this.__objControl)
				 {
					 var control = this.__objControl[field];
					 if(control && control.control)
					 {
						 if(control.type == "date" && control.control.getDate())
						 {
							 filter[field] = control.control.getDate();
							 var config = control.config || {};
							 setting[field] = {matchType:"equals",type:"date"};
							 for(var key in config)
							 {
								 if(this.util.isUndefined(setting[field][key]))
								 {
									 setting[field][key] = config[key];
								 }
							 }
						 }
						 else if(control.type == "text" && control.control.value)
						 {
							 filter[field] = control.control.value;
							 setting[field] = {caseSensitive:false,multiline:false,matchType:new NSFilter().CONTAINS};
						 }
					 }
				 }
				 conditionFilter = Object.keys(filter);
			 }
			 if(filter && conditionFilter && conditionFilter.length > 0)
			 {
				 this.__handleFiltering(filter,setting);
			 }
			 else
			 {
				 this.__resetFiltering();
			 }
		};
		
		this.__advanceFilterGrid = function()
		{
			 var fieldSetting = null;
			 var field = null;
			 var conditionFilter = null;
			 if(this.__isOrFilter)
			 {
				 var filter = [];
				 var setting = {};
				 var item = null;
				 for(field in this.__objAdvancedFilterSetting)
				 {
					 fieldSetting = this.__objAdvancedFilterSetting[field];
					 if(fieldSetting)
					 {
						 if(fieldSetting.type == NSGrid.ADVANCED_FILTER_DATE)
						 {
							 item = {};
							 item[field] = new Date();
							 filter.push(item);
							 var config = fieldSetting.config || {};
							 setting[field] = {matchType1:fieldSetting.firstSelectValue,firstDate:fieldSetting.firstDate,operation:fieldSetting.operationSelectValue,
									 matchType2:fieldSetting.secondSelectValue,secondDate:fieldSetting.secondDate,
									 type:NSGrid.ADVANCED_FILTER_DATE};
							 for(var key in config)
							 {
								 if(this.util.isUndefined(setting[field][key]))
								 {
									 setting[field][key] = config[key];
								 }
							 }
							
						 }
						 else if(fieldSetting["arrText"] && fieldSetting["arrTextField"])
						 {
							 var arrTextField = fieldSetting["arrTextField"];
							 var arrText = fieldSetting["arrText"];
							 var length = arrText.length;
							 filter[field] = [];
							 for(var count = 0;count < length;count++)
							 {
								 item = {};
								 item[field] = arrText[count][arrTextField];
								 filter.push(item);
							 }
							 setting[field] = {caseSensitive:fieldSetting.caseSensitive,multiline:false,matchType:fieldSetting.matchType};
						 }
						 else
						 {
							 item = {};
							 item[field] = fieldSetting.text;
							 filter.push(item);
							 setting[field] = {caseSensitive:fieldSetting.caseSensitive,multiline:false,matchType:fieldSetting.matchType};
						 }
					 }
				 }
				 conditionFilter = filter;
			 }
			 else
			 {
				 var filter = {};
				 var setting = {};
				 for(field in this.__objAdvancedFilterSetting)
				 {
					 fieldSetting = this.__objAdvancedFilterSetting[field];
					 if(fieldSetting)
					 {
						 if(fieldSetting.type == NSGrid.ADVANCED_FILTER_DATE)
						 {
							 filter[field] = new Date();
							 var config = fieldSetting.config || {};
							 setting[field] = {matchType1:fieldSetting.firstSelectValue,firstDate:fieldSetting.firstDate,operation:fieldSetting.operationSelectValue,
									 matchType2:fieldSetting.secondSelectValue,secondDate:fieldSetting.secondDate,
									 type:NSGrid.ADVANCED_FILTER_DATE};
							 for(var key in config)
							 {
								 if(this.util.isUndefined(setting[field][key]))
								 {
									 setting[field][key] = config[key];
								 }
							 }
						 }
						 else if(fieldSetting["arrText"] && fieldSetting["arrTextField"])
						 {
							 var arrTextField = fieldSetting["arrTextField"];
							 var arrText = fieldSetting["arrText"];
							 var length = arrText.length;
							 filter[field] = [];
							 for(var count = 0;count < length;count++)
							 {
								 filter[field].push(arrText[count][arrTextField]);
							 }
							 setting[field] = {caseSensitive:fieldSetting.caseSensitive,multiline:false,matchType:fieldSetting.matchType};
						 }
						 else
						 {
							 filter[field] = fieldSetting.text;
							 setting[field] = {caseSensitive:fieldSetting.caseSensitive,multiline:false,matchType:fieldSetting.matchType};
						 }
					 }
				 }
				 conditionFilter = Object.keys(filter);
			 }
			 if(filter && conditionFilter && conditionFilter.length > 0)
			 {
				 this.__handleFiltering(filter,setting);
			 }
			 else
			 {
				 this.__resetFiltering();
			 }
		};
		
		this.__handleFiltering = function(filter,setting,enableHighlighting,recordLimit)
		{
			if(this.__nsGrid.__enableFilter)
			{
				var eventParam = {filter:filter,setting:setting,recordLimit:recordLimit};
				this.__nsGrid.__dispatchEvent(NSGrid.FILTER_CHANGING,eventParam,eventParam);
				this.__filteredColumn = [];
				if(filter)
			    {
					 if(this.util.isUndefinedOrNull(enableHighlighting))
					 {
						enableHighlighting = true;
					 }
					 var isHierarchical = false;
					 var source = this.__nsGrid.__arrWrapper;
					 if(this.__nsGrid.__enableHierarchical || this.__nsGrid.__enableGrouping)
					 {
						 isHierarchical = true;
					 }
				   	 var nsFilter = new NSFilter(source,filter,setting,recordLimit,isHierarchical,this.__nsGrid.__childField,this.__nsGrid.__filterFunction,this.__nsGrid.__hierarchyFilterChildrenFunction);
				   	 this.__nsGrid.__arrInternalSource = nsFilter.execute();
				   	 this.__nsGrid.__arrFilteredGroupedSource =  this.__nsGrid.__arrInternalSource.slice(0);
				   	 if(enableHighlighting)
				   	 {
					   	 if(filter instanceof Array) 
				  	     {
					   		 for (var count = 0; count < filter.length; count++) 
					         {
					 	   		var item = filter[count];
					 	   		var key = Object.keys(item)[0];
					 	   		var colItem = this.__nsGrid.__getColumnObjectByDataField(key);
					 	   		this.__filteredColumn.push({field:key,text:item[key],item:colItem});
					         }
				  	     }
				  		 else if(typeof(filter) === "object") 
				  	     {
				  	        for(var key in filter) 
				  	        {
				  	        	var colItem = this.__nsGrid.__getColumnObjectByDataField(key);
				  	        	this.__filteredColumn.push({field:key,text:filter[key],item:colItem});
				  	        }
				  	     }
				   	 }
				   	 if(isHierarchical)
				   	 {
				   		this.__nsGrid.__objGrid.__setWrapperSource(this.__nsGrid.__arrInternalSource,0,-1,0,false);
				   		this.__nsGrid.__arrInternalSource = this.__nsGrid.__arrFlatHierarchicalSource.slice(0); 
				   	 }
				   	 this.__nsGrid.__updateTotalRecords();
				   	 this.__nsGrid.__renderBody(false);
				   	 this.__nsGrid.__updateVisibleIndexByRow(this.__nsGrid.__arrInternalSource);
				   	 this.isFiltered = true;
				   	 this.__nsGrid.__dispatchEvent(NSGrid.FILTER_CHANGED,eventParam,eventParam);
			    }
			}
		};
	
		this.__resetFiltering = function()
		{
			if(this.__nsGrid.__enableFilter)
			{
				if(this.__nsGrid.__dataSource)
				{
					this.__nsGrid.__dispatchEvent(NSGrid.FILTER_CHANGING,null,null);
					this.__nsGrid.__arrInternalSource = this.__nsGrid.__arrWrapper.slice(0);
					this.__nsGrid.__arrFilteredGroupedSource =  this.__nsGrid.__arrInternalSource.slice(0);
					this.__filteredColumn = [];
					if(this.__nsGrid.__enableHierarchical || this.__nsGrid.__enableGrouping)
					{
						this.__nsGrid.__objGrid.__setWrapperSource(this.__nsGrid.__arrInternalSource,0,-1,0,false);
						this.__nsGrid.__arrInternalSource = this.__nsGrid.__arrFlatHierarchicalSource.slice(0); 
					}
					this.__nsGrid.__updateTotalRecords();
					this.__nsGrid.__renderBody(false);
					this.__nsGrid.__updateVisibleIndexByRow(this.__nsGrid.__arrInternalSource);
					this.isFiltered = false;
					this.__nsGrid.__dispatchEvent(NSGrid.FILTER_CHANGED,null,null);
					this.__nsGrid.__dispatchEvent(NSGrid.FILTER_RESETTED,null,null);
					//this.unHighlightText();
				}
			}
		};
	
		this.__highlightDiv = function(divText,colIndex)
		{
			var length = this.__filteredColumn.length;
			for (var count = 0; count < length; count++) 
		    {
				var item = this.__filteredColumn[count].item;
				if(item)
				{
					var type = (item.filter && item.filter.type) ? item.filter.type : "text";
					if(type == "text" && item[this.__nsGrid.__fieldColIndex] === colIndex)
					{
						var text = this.__filteredColumn[count].text;
						this.util.highlightText(divText,text,"nsTextHighlight");
					}
				}
		    }
		};
		
		this.__documentClickHandler = function(event) 
		{
			event = this.util.getEvent(event);
			this.__removePopUp();
			this.__nsGrid.__dispatchEvent(NSGrid.ADVANCED_FILTER_CLOSING);
			/*var target = this.util.getTarget(event);
			if(!(target && target.getAttribute("id") && target.getAttribute("id").endsWith("FilterIconContainer")))
			{
				this.__removePopUp();
				this.util.preventDefault(event);
			}*/
		};
	
	
		this.__documentKeyUpHandler = function(event) 
		{
			event = this.util.getEvent(event);
			if(event.keyCode === this.util.KEYCODE.ESC) 
			{
				this.__removePopUp();
				this.__nsGrid.__dispatchEvent(NSGrid.ADVANCED_FILTER_CLOSING);
			}
		};
		
		this.__detailFilterClickHandler = function(event)
		{
			event = this.util.getEvent(event);
			event.stopImmediatePropagation();
		};
		
		this.__removePopUp = function()
		{
			if(this.__nsPopUp)
			{
				this.__nsPopUp.remove();
				this.__nsPopUp = null;
			}
		};
		
		this.__getTextDetailFilter = function(dataField,objFilter)
		{
			var self = this;
			var txtInputChangeHandler = function()
			{
				clearTimeout(self.__interval);
				self.__interval = setTimeout(function(){
						handleTextFilter();
					}, self.SEARCH_INTERVAL);
			};
			var handleTextFilter = function()
			{
				var item = null;
				var text = null;
				if(txtFilter.value && txtFilter.value !== "")
				{
					text = txtFilter.value;
					item = {text:text,caseSensitive:chkSensitive.checked,matchType:arrOptions[cmbFilter.selectedIndex].value,sensitiveChecked:chkSensitive.checked,
							optionIndex:cmbFilter.selectedIndex,textInputText:txtFilter.value,type:NSGrid.ADVANCED_FILTER_TEXT};
				}
				self.__objAdvancedFilterSetting[dataField] = item;
				self.__advanceFilterGrid.bind(self)();
				if(self.__enableApply)
				{
					self.__removePopUp();
				}
			};
			var resetTextFilter = function()
			{
				self.__objAdvancedFilterSetting[dataField] = null;
				self.__advanceFilterGrid.bind(self)();
				self.__removePopUp();
			};
			var createSelect = function(arrSource,strID,prevField)
			{
				var divSelect = self.util.createElement("span",colID + strID + "detailFilterSelectContainer");
				var cmbFilter = self.util.createElement("select",colID + strID + "detailFilterSelect","nsFilterSelect");
				cmbFilter.style.height = "25px";
				var option = null;
				var item = null;
				var label = null;
				for(var count = 0;count < arrSource.length;count++)
				{
					item = arrSource[count];
					option = document.createElement("option");
					label = document.createTextNode(item["label"]);
					option.appendChild(label);
					option.setAttribute("value", item["id"]);
					cmbFilter.appendChild(option);
				}
				if(objPrev && objPrev[prevField])
				{
					cmbFilter.selectedIndex = objPrev[prevField];
				}
				divSelect.style.display = "inline-block";
				divSelect.style.width = "40%";
				divSelect.appendChild(cmbFilter);
				divUpperContainer.appendChild(divSelect);
				return cmbFilter;
			};
			var createCheckbox = function(text,strID,prevField)
			{
				var divCheckbox = self.util.createElement("span",colID + strID + "detailFilterCheckboxContainer");
				var label = self.util.createElement("label",colID + strID + "detailFilterLabel",null);
				var checkbox = self.util.createElement("input",colID + strID + "detailFilterCheckbox",null);
				checkbox.setAttribute("type","checkbox");
				label.appendChild(checkbox);
				if(text)
				{
					label.appendChild(document.createTextNode(text));
				}
				if(objPrev && objPrev[prevField])
				{
					checkbox.setAttribute("checked",true);
				}
				label.style.fontWeight = "400";
				label.style.cursor = "pointer";
				checkbox.style.marginRight = "5px";
				divCheckbox.style.paddingTop = "5px";
				divCheckbox.style.display = "inline-block";
				divCheckbox.appendChild(label);
				divLowerContainer.appendChild(divCheckbox);
				return checkbox;
			};
			var nsFilter = new NSFilter();
			var arrOptions = [{id:1,label:"Contains",value:nsFilter.CONTAINS},
			                  {id:2,label:"Exact",value:nsFilter.EXACT},
			                  {id:3,label:"Starts With",value:nsFilter.STARTS_WITH},
			                  {id:4,label:"Ends With",value:nsFilter.ENDS_WITH}];
			var objPrev = this.__objAdvancedFilterSetting[dataField];
			var colID = this.__getRendererID(dataField);
			var divDetailFilterContainer = this.__nsPopUp.getPopUp();
			//divDetailFilterContainer.style.width = "275px";
			divDetailFilterContainer.style.padding = "10px";
			var divUpperContainer = this.util.createDiv(colID + "detailFilterUpperContainer");
			divUpperContainer.style.paddingBottom = "8px";
			var divLowerContainer = this.util.createDiv(colID + "detailFilterLowerContainer");
			var cmbFilter = createSelect(arrOptions,"options","optionIndex");
			var divTextInput = this.util.createElement("span",colID + "detailFilterTextInputContainer");
			divTextInput.style.float = "right";
			divTextInput.style.width = "60%";
			var txtFilter = this.util.createElement("input",colID + "detailFilterTextInput","nsFilterTextInput");
			txtFilter.setAttribute("placeholder", "Enter Value here");
			txtFilter.style.width = "100%";
			if(objPrev && objPrev["textInputText"])
			{
				txtFilter.value = objPrev["textInputText"];
			}
			//var divSearch = this.util.getSearchTextBox(txtFilter);
			//this.util.addStyleClass(divSearch,"nsFilterSearchTextBox");
			divTextInput.appendChild(txtFilter);
			divUpperContainer.appendChild(divTextInput);
			var chkSensitive = createCheckbox("Case Sensitive","sensitive","sensitiveChecked");
			if(this.__enableApply)
			{
				this.__createApplySection.bind(this)(colID,divLowerContainer,handleTextFilter,resetTextFilter);
			}
			else
			{
				this.util.addEvent(chkSensitive,"click",handleTextFilter);
				this.util.addEvent(cmbFilter,"change",handleTextFilter);
				this.util.addEvent(txtFilter,"keyup",txtInputChangeHandler);
			}
			divDetailFilterContainer.appendChild(divUpperContainer);
			divDetailFilterContainer.appendChild(divLowerContainer);
		};
		
		this.__getNumberDetailFilter = function(dataField,objFilter)
		{
			var self = this;
			var txtInputChangeHandler = function()
			{
				clearTimeout(self.__interval);
				self.__interval = setTimeout(function(){
						handleNumberFilter();
					}, self.SEARCH_INTERVAL);
			};
			var handleNumberFilter = function()
			{
				var item = null;
				var text = null;
				if(txtFilter.value && txtFilter.value !== "")
				{
					text = arrOptions[cmbFilter.selectedIndex].sign + txtFilter.value;
					item = {text:text,caseSensitive:false,matchType:new NSFilter().CONTAINS,index:cmbFilter.selectedIndex,textInputText:txtFilter.value,type:NSGrid.ADVANCED_FILTER_NUMBER};
				}
				self.__objAdvancedFilterSetting[dataField] = item;
				self.__advanceFilterGrid.bind(self)();
				if(self.__enableApply)
				{
					self.__removePopUp();
				}
			};
			var resetNumberFilter = function()
			{
				self.__objAdvancedFilterSetting[dataField] = null;
				self.__advanceFilterGrid.bind(self)();
				self.__removePopUp();
			};
			
			var arrOptions = [{id:1,label:"<=",toolTip:"Less than Equals To",sign:"<="},
			                  {id:2,label:">=",toolTip:"Greater than Equals To",sign:">="},
			                  {id:3,label:"<",toolTip:"Less than",sign:"<"},
			                  {id:4,label:">",toolTip:"Greater than",sign:">"},
			                  {id:5,label:"=",toolTip:"Equals",sign:""}];
			var objPrev = this.__objAdvancedFilterSetting[dataField];
			var colID = this.__getRendererID(dataField);
			var divDetailFilterContainer = this.__nsPopUp.getPopUp();
			//divDetailFilterContainer.style.width = "225px";
			divDetailFilterContainer.style.padding = "10px";
			var divUpperContainer = this.util.createDiv(colID + "detailFilterUpperContainer");
			divUpperContainer.style.paddingBottom = "8px";
			var divLowerContainer = this.util.createDiv(colID + "detailFilterLowerContainer");
			var divSelect = this.util.createElement("span",colID + "detailFilterSelectContainer");
			var cmbFilter = this.util.createElement("select",colID + "detailFilterSelect","nsFilterSelect");
			cmbFilter.style.height = "25px";
			divSelect.style.display = "inline-block";
			divSelect.style.width = "20%";
			var option = null;
			var item = null;
			var label = null;
			for(var count = 0;count < arrOptions.length;count++)
			{
				item = arrOptions[count];
				option = document.createElement("option");
				label = document.createTextNode(item["label"]);
				option.appendChild(label);
				//option.setAttribute("text", item["label"]);
				option.setAttribute("value", item["id"]);
				cmbFilter.appendChild(option);
			}
			if(objPrev && objPrev["index"])
			{
				cmbFilter.selectedIndex = objPrev["index"];
			}
			divSelect.appendChild(cmbFilter);
			divUpperContainer.appendChild(divSelect);
			var divTextInput = this.util.createElement("span",colID + "detailFilterTextInputContainer");
			var txtFilter = this.util.createElement("input",colID + "detailFilterTextInput","nsFilterTextInput");
			txtFilter.setAttribute("placeholder", "Enter Value here");
			if(objPrev && objPrev["textInputText"])
			{
				txtFilter.value = objPrev["textInputText"];
			}
			divTextInput.style.float = "right";
			divTextInput.style.width = "80%";
			txtFilter.style.width = "100%";
			divTextInput.appendChild(txtFilter);
			divUpperContainer.appendChild(divTextInput);
			if(this.__enableApply)
			{
				this.__createApplySection.bind(this)(colID,divLowerContainer,handleNumberFilter,resetNumberFilter);
			}
			else
			{
				this.util.addEvent(cmbFilter,"change",handleNumberFilter);
				this.util.addEvent(txtFilter,"keyup",txtInputChangeHandler);
			}
			divDetailFilterContainer.appendChild(divUpperContainer);
			divDetailFilterContainer.appendChild(divLowerContainer);
		};
		
		this.__getListDetailFilter = function(dataField,objFilter)
		{
			var self = this;
			var itemRenderer = function(item,labelField,fieldIndex,isDisabled,listItem)
			{
				if(item)
				{
					var divRenderer = self.util.createElement("span",colID + "filterListContainer" + item["id"] ,"nsFilterListRenderer");
					var label = self.util.createElement("label");
					var checkBox = self.util.createElement("input",null,"nsFilterListRendererCheckBox");
					checkBox.setAttribute("type","checkbox");
					checkBox.checked = Boolean.parse(item["selected"]);
					this.util.addEvent(checkBox,"click",checkBoxClickHandler);
					label.style.fontWeight = "400";
					label.style.cursor = "pointer";
					checkBox.style.marginRight = "5px";
					label.appendChild(checkBox);
					label.appendChild(document.createTextNode(item[labelField]));
					divRenderer.appendChild(label);
					return divRenderer;
				}
				return null;
			};
			var txtInputChangeHandler = function()
			{
				clearTimeout(self.__interval);
				self.__interval = setTimeout(function(){
						handleListFilter(true);
					}, self.SEARCH_INTERVAL);
			};
			var handleListFilter = function(isReset)
			{
				var item = null;
				var text = null;
				var text = txtFilter.value;
				if(text === "")
				{
					objNSList.resetFilter();
				}
				else
				{
					var setting = {caseSensitive:false,multiline:false,matchType:new NSFilter().CONTAINS};
					objNSList.filter(text,setting,true);
				}
				if(isReset)
				{
					arrSelected = objNSList.__arrInternalSource;
				}
			};
			var checkBoxClickHandler = function(event)
			{
				var target = self.util.getTarget(event);
				var checked = target.checked;
				target = self.util.findParent(target,"li");
				var source = objNSList.__arrInternalSource;
				var index = objNSList.__getIndexFromTarget(target);
				if(index > -1)
				{
					tempItem = objNSList.__getItemByIndex(index);
					if(tempItem)
					{
						var selectedIndex = source.findIndex(findIndexfromSelectedArray);
						if(checked && selectedIndex > -1)
						{
							arrSelected.push(tempItem);
						}
						else if(!checked && selectedIndex > -1)
						{
							arrSelected.splice(selectedIndex,1);
						}
						tempItem["selected"] = checked;
					}
					setSelectAllCheckBox();
				}
			};
			
			var chkSelectAllClickHandler = function(event)
			{
				if(arrSource)
				{
					var length = arrSource.length;
					var checked = chkSelectAll.checked;
					var source = objNSList.__arrInternalSource;
					var item = null;
					for(var count = 0;count < length;count++)
					{
						item = arrSource[count];
						item["selected"] = checked;
					}
					if(source)
					{
						for(var count = 0;count < source.length;count++)
						{
							item = source[count];
							item["selected"] = checked;
						}
					}
					if(checked)
					{
						arrSelected = self.util.cloneObject(arrSource);
					}
					else
					{
						arrSelected = [];
					}
					objNSList.__renderBody(false);
				}
			};
			
			var setSelectAllCheckBox = function()
			{
				var isAllSelected = isSelectedAll();
				var isNoneSelected = isUnselectedAll();
				if(isAllSelected)
				{
					chkSelectAll.indeterminate = false;
					chkSelectAll.checked = true;
				}
				else if(isNoneSelected)
				{
					chkSelectAll.indeterminate = false;
					chkSelectAll.checked = false;
				}
				else
				{
					chkSelectAll.indeterminate = true;
				}
			};
			
			var findIndexfromSelectedArray = function(element,index,array)
			{
				return (element["id"] === tempItem["id"]);
			};
			
			var isSelectedAll = function()
			{
				if(arrSource && arrSelected)
				{
					return (arrSource.length === arrSelected.length);
				}
				return false;
			};
			
			var isUnselectedAll = function()
			{
				if(arrSelected)
				{
					return (arrSelected.length === 0);
				}
				return true;
			};
			
			var handleMainFilter = function()
			{
				var arrTemp = [];
				if(arrSelected && arrSelected.length > 0)
				{
					for(var count = 0;count < arrSelected.length;count++)
					{
						if(arrSelected[count]["selected"])
						{
							arrTemp.push(arrSelected[count]);
						}
					}
				}
				var item = {arrText:arrTemp,arrTextField:"label",caseSensitive:true,matchType:new NSFilter().EXACT,arrSelected:arrSelected,textInputText:txtFilter.value,type:NSGrid.ADVANCED_FILTER_LIST};
				self.__objAdvancedFilterSetting[dataField] = item;
				self.__advanceFilterGrid.bind(self)();
				if(self.__enableApply)
				{
					self.__removePopUp();
				}
			};
			var resetMainFilter = function()
			{
				self.__objAdvancedFilterSetting[dataField] = null;
				self.__advanceFilterGrid.bind(self)();
				self.__removePopUp();
			};
			
			var tempItem = null;
			var objPrev = this.__objAdvancedFilterSetting[dataField];
			if(!objPrev)
			{
				objPrev = {};
			}
			var arrSelected = objPrev["arrSelected"];
			var arrSource = this.__getUniqueValues(this.__nsGrid.__objGrid.__getFlatSource(),dataField,arrSelected);
			if(!arrSelected)
			{
				arrSelected = this.util.cloneObject(arrSource);
			}
			var colID = this.__getRendererID(dataField);
			var divDetailFilterContainer = this.__nsPopUp.getPopUp();
			//divDetailFilterContainer.style.width = "240px";
			divDetailFilterContainer.style.padding = "10px";
			var divUpperContainer = this.util.createDiv(colID + "detailFilterUpperContainer");
			divUpperContainer.style.paddingBottom = "8px";
			var divLowerContainer = this.util.createDiv(colID + "detailFilterLowerContainer");
			var divTextInput = this.util.createDiv(colID + "detailFilterTextInputContainer","nsFilterLineContainer");
			this.util.addStyleClass(divTextInput,"nsFilterLineContainerTheme");
			divTextInput.setAttribute("style","height:29px;");
			var txtFilter = this.util.createElement("input",colID + "detailFilterTextInput","nsFilterTextInput");
			txtFilter.setAttribute("placeholder", "Enter Value here");
			txtFilter.style.width = "100%";
			if(objPrev["textInputText"])
			{
				txtFilter.value = objPrev["textInputText"];
			}
			this.util.addEvent(txtFilter,"keyup",txtInputChangeHandler);
			divTextInput.appendChild(txtFilter);
			divUpperContainer.appendChild(divTextInput);
			divDetailFilterContainer.appendChild(divUpperContainer);
			divDetailFilterContainer.appendChild(divLowerContainer);
			var divList = this.util.createDiv(colID + "detailFilterListContainer");
			var lstFilter = this.util.createElement("div",colID + "detailFilterList","nsFilterList");
			lstFilter.style.height = "300px";
			divList.appendChild(lstFilter);
			divUpperContainer.appendChild(divList);
			var setting = {labelField:"label",enableVirtualScroll:false,enableDragDrop:false,enableDragByHandle:false,enableMultipleSelection:true,enableKeyboardNavigation:false,
						   customScrollerRequired:false,enableMouseHover:true,enableMouseHoverAnimation:false,itemRenderer:itemRenderer.bind(this)};
			setting["dataSource"] = arrSource;
			var objNSList = new NSList(lstFilter,setting);
			
			var divSelectAll = this.util.createElement("span",colID + "detailFilterSelectAllContainer","nsFilterLineContainer");
			this.util.addStyleClass(divSelectAll,"nsFilterLineContainerTheme");
			var label = self.util.createElement("label");
			var chkSelectAll = self.util.createElement("input",null,"nsFilterListRendererCheckBox");
			chkSelectAll.setAttribute("type","checkbox");
			this.util.addEvent(chkSelectAll,"click",chkSelectAllClickHandler);
			label.appendChild(chkSelectAll);
			label.appendChild(document.createTextNode("Select All"));
			label.style.fontWeight = "400";
			label.style.cursor = "pointer";
			chkSelectAll.style.marginRight = "5px";
			divSelectAll.style.paddingTop = "5px";
			divSelectAll.style.display = "inline-block";
			divSelectAll.appendChild(label);
			divLowerContainer.appendChild(divSelectAll);
			if(this.__enableApply)
			{
				this.__createApplySection.bind(this)(colID,divLowerContainer,handleMainFilter,resetMainFilter);
			}
			handleListFilter(false);
			setSelectAllCheckBox();
		};
		
		this.__getDateDetailFilter = function(dataField,objFilter)
		{
			var self = this;
			this.__setDefaultDatePicker();
			var arrOptions = [{text:"Equals",value:"equals"},
			                  {text:"Greater than",value:"greaterThan"},
			                  {text:"Less than",value:"lessThan"},
			                  {text:"Not equal",value:"notEqual"}];
			var arrOptOption = [{text:"And",value:"and"},
			                  {text:"OR",value:"or"}];
			var createSelect = function(id,css)
			{
				var select =  self.util.createElement("select",id,css);
				for(var count = 0;count < arrOptions.length;count++)
				{
					var item = arrOptions[count];
					var option = self.util.createElement("option");
					option.setAttribute("value", item.value);
					var text = document.createTextNode(item.text);
					option.appendChild(text);
					select.appendChild(option);
				}
				return select;
			};
			var handleMainFilter = function()
			{
				var item = {type:NSGrid.ADVANCED_FILTER_DATE,selectFirst:selectFirst,firstSelectIndex:selectFirst.selectedIndex,firstSelectValue:selectFirst.options[selectFirst.selectedIndex].value,
							compFirstDate:compFirstDate,firstDate:compFirstDate.getDate(),
							operationSelect:select,operationSelectedIndex:select.selectedIndex,operationSelectValue:select.options[select.selectedIndex].value,
							selectSecond:selectSecond,secondSelectIndex:selectSecond.selectedIndex,secondSelectValue:selectSecond.options[selectSecond.selectedIndex].value,
							compSecondDate:compSecondDate,secondDate:compSecondDate.getDate(),config:dateConfig,
							divUpperContainer:divUpperContainer,divLowerContainer:divLowerContainer
						};
				self.__objAdvancedFilterSetting[dataField] = item;
				self.__advanceFilterGrid.bind(self)();
				if(self.__enableApply)
				{
					self.__removePopUp();
				}
			};
			var resetMainFilter = function()
			{
				self.__objAdvancedFilterSetting[dataField] = null;
				self.__advanceFilterGrid.bind(self)();
				self.__removePopUp();
			};
			var divDetailFilterContainer = this.__nsPopUp.getPopUp();
			divDetailFilterContainer.style.padding = "10px";
			var dateConfig = objFilter["advancedFilterConfig"] || {};
			var filterConfig = objFilter["config"] || {};
			for(var key in filterConfig)
			{
				if(this.util.isUndefined(dateConfig[key]))
				{
					dateConfig[key] = filterConfig[key];
				}
			}
			dateConfig["filterManually"] = this.__enableApply;
			var objPrev = this.__objAdvancedFilterSetting[dataField];
			if(objPrev)
			{
				var divUpperContainer = objPrev.divUpperContainer;
				var divLowerContainer = objPrev.divLowerContainer;
				var selectFirst = objPrev.selectFirst;
				selectFirst.selectedIndex = objPrev.firstSelectIndex;
				var compFirstDate = objPrev.compFirstDate;
				compFirstDate.setDate(objPrev.firstDate);
				var select = objPrev.operationSelect;
				select.selectedIndex = objPrev.operationSelectedIndex;
				var selectSecond = objPrev.selectSecond;
				selectSecond.selectedIndex = objPrev.secondSelectIndex;
				var compSecondDate = objPrev.compSecondDate;
				compSecondDate.setDate(objPrev.secondDate);
				divDetailFilterContainer.appendChild(divUpperContainer);
				divDetailFilterContainer.appendChild(divLowerContainer);
			}
			else
			{
				/*if(!objPrev)
				{
					objPrev = {};
				}*/
				var colID = this.__getRendererID(dataField);
				var divUpperContainer = this.util.createDiv(colID + "detailFilterUpperContainer");
				divUpperContainer.style.paddingBottom = "8px";
				var divLowerContainer = this.util.createDiv(colID + "detailFilterLowerContainer");
				var divFirstSelect = this.util.createDiv(colID + "detailFirstSelectContainer","nsGridFilterFirstSelectContainer");
				this.util.addStyleClass(divFirstSelect,"nsGridFilterFirstSelectContainerTheme");
				//divFirstSelect.setAttribute("style","height:29px;");
				var selectFirst =  createSelect(colID + "detailFirstSelect","nsGridFilterFirstSelect");
				divFirstSelect.appendChild(selectFirst);
				divUpperContainer.appendChild(divFirstSelect);
				//selectFirst.selectedIndex = this.util.isUndefinedOrNull(objPrev.firstSelectIndex) ? 0 : objPrev.firstSelectIndex;
				
				var divFirstDate = this.util.createDiv(colID + "detailFirstDateContainer","nsGridFilterFirstDateContainer");
				this.util.addStyleClass(divFirstDate,"nsGridFilterFirstDateContainerTheme");
				divUpperContainer.appendChild(divFirstDate);
				var compFirstDate = new this.__nsGrid.__components["datePicker"]();
				this.dateRenderer(compFirstDate,dataField,divFirstDate,dateConfig,objFilter);
				
				var divOption = this.util.createDiv(colID + "detailOptionContainer","nsGridFilterOptionContainer");
				this.util.addStyleClass(divOption,"nsGridFilterOptionContainerTheme");
				var select =  this.util.createElement("select",null,"nsGridFilterOptOption");
				for(var count = 0;count < arrOptOption.length;count++)
				{
					var item = arrOptOption[count];
					var option = this.util.createElement("option");
					option.setAttribute("value", item.value);
					var text = document.createTextNode(item.text);
					option.appendChild(text);
					select.appendChild(option);
				}
				divOption.appendChild(select);
				divUpperContainer.appendChild(divOption);
				//select.selectedIndex = this.util.isUndefinedOrNull(objPrev.operationSelectedIndex) ? 0 : objPrev.operationSelectedIndex;
				
				
				var divSecondSelect = this.util.createDiv(colID + "detailSecondSelectContainer","nsGridFilterSecondSelectContainer");
				this.util.addStyleClass(divSecondSelect,"nsGridFilterSecondSelectContainerTheme");
				//divSecondSelect.setAttribute("style","height:29px;");
				var selectSecond =  createSelect(colID + "detailSecondSelect","nsGridFilterSecondSelect");
				divSecondSelect.appendChild(selectSecond);
				divUpperContainer.appendChild(divSecondSelect);
				//selectSecond.selectedIndex = this.util.isUndefinedOrNull(objPrev.secondSelectIndex) ? 0 : objPrev.secondSelectIndex;
				
				var divSecondDate = this.util.createDiv(colID + "detailSecondDateContainer","nsGridFilterSecondDateContainer");
				this.util.addStyleClass(divSecondDate,"nsGridFilterSecondDateContainerTheme");
				divUpperContainer.appendChild(divSecondDate);
				var compSecondDate = new this.__nsGrid.__components["datePicker"]();
				this.dateRenderer(compSecondDate,dataField,divSecondDate,dateConfig,objFilter);
				divDetailFilterContainer.appendChild(divUpperContainer);
				divDetailFilterContainer.appendChild(divLowerContainer);
				if(this.__enableApply)
				{
					this.__createApplySection.bind(this)(colID,divLowerContainer,handleMainFilter,resetMainFilter);
				}
			}
		};
		
		this.__createApplySection = function(colID,parent,applyClickHandler,resetClickHandler)
		{
			var divApplyButton = this.util.createDiv(colID + "detailFilterApplyButtonContainer","nsFilterButtonDiv");
			this.util.addStyleClass(divApplyButton,"nsFilterButtonDivTheme");
			var btnFilter = this.util.createElement("button",colID + "detailFilterApply","nsFilterButton");
			this.util.addStyleClass(btnFilter,"nsButton");
			this.util.addStyleClass(btnFilter,"nsButtonGreen");
			this.util.addStyleClass(btnFilter,"nsButtonShadow");
			this.util.addStyleClass(btnFilter,"nsButtonFont12");
			btnFilter.innerHTML = "Filter";
			divApplyButton.appendChild(btnFilter);
			var btnCancel = this.util.createElement("button",colID + "detailFilterReset","nsFilterButton");
			this.util.addStyleClass(btnCancel,"nsButton");
			this.util.addStyleClass(btnCancel,"nsButtonGrey");
			this.util.addStyleClass(btnCancel,"nsButtonShadow");
			this.util.addStyleClass(btnCancel,"nsButtonFont12");
			btnCancel.innerHTML = "Cancel";
			divApplyButton.appendChild(btnCancel);
			divApplyButton.style.float = "right";
			parent.appendChild(divApplyButton);
			this.util.addEvent(btnFilter,"click",applyClickHandler);
			this.util.addEvent(btnCancel,"click",resetClickHandler);
		};
		
		this.__getRendererID = function(dataField)
		{
			return (this.__nsGrid.getID() + "col" + dataField + "renderer");
		};
		
		this.__getUniqueValues = function(arrSource,dataField,arrSelected)
		{
			var findItem = function(element, index, array) 
			{
				return (item["value"] === element["value"]);
			};
			var arrReturn = null;
			var item = {};
			if(arrSource && arrSource.length > 0 && dataField)
			{
				var objMap = {};
				var value = "";
				var length = arrSource.length;
				var count = 0;
				var arrTemp = [];
				var itemPrev = {};
				arrReturn = [];
			    for(count = 0; count < length;count++)
			    {
			    	value = arrSource[count][dataField];
			    	if(value)
			    	{
			    		objMap[value] = value;
			    	}
			    }
			    arrTemp = Object.keys(objMap);
			    length = arrTemp.length;
			    if(length > 0)
			    {
			    	for(count = 0; count < length;count++)
				    {
				    	value = arrTemp[count];
				    	item = {id:count,label:value,value:value,selected:true};
				    	//if arrSelected is present and then item is not found then it is unselected
				    	//if arrSelected is not present then all Items are selected
				    	if(arrSelected)
				    	{
				    		itemPrev = arrSelected.find(findItem);
				    		if(itemPrev)
				    		{
				    			item["selected"] = itemPrev["selected"];
				    		}
				    		else
				    		{
				    			item["selected"] = false;
				    		}
				    	}
				    	arrReturn.push(item);
				    }
			    }
			}
			return arrReturn;
		};
		
		this.__setDefaultDatePicker = function()
		{
			if(!this.__nsGrid.__components)
			{
				this.__nsGrid.__components = {};
			}
			if(!this.__nsGrid.__components["datePicker"])
			{
				var dateComp = function()
				{
					var setting = null;
					var div = null;
					var objDate = null;
				    var self = this;
				    var util = new NSUtil();
				    
				    var init = function(config) 
				    {
						setting = getParam(config);
						if(!setting)
						{
							setting = {};
						}
						setting.dateOutputFormat = setting.dateOutputFormat ? setting.dateOutputFormat : "MM/dd/yyyy";
						//setting.placeHolder = setting.placeHolder ? setting.placeHolder : setting.dateOutputFormat;
						div = util.createDiv(null,"nsGridDatePicker"); 
						div.style.width = "90%";
						div.style.display = "inline-block";
				    };
				    
				    var getElement = function()
				    {
				    	return div;
				    };
				    
				    var elementAdded = function()
				    {
				    	objDate = new NSDatePicker(div,setting);
						util.addEvent(div,NSDatePicker.DATE_SELECTED,function(event)
						{
							dateSelected(event.detail,false);
						});
						util.addEvent(div,NSDatePicker.INPUT_CHANGE,function(event)
						{
							dateSelected(event.detail,true);
						});
				    };
				    
				    var dateSelected = function(date,isType)
				    {
				    	if(util.isUndefinedOrNull(setting.filterManually) || !setting.filterManually)
				    	{
				    		setting.dateSelectedHandler(isType);
				    	}
				    };
				    
				    var getDate = function()
				    {
				    	return objDate.getSelectedDate();
				    };
				    
				    var setDate = function(date,fireEvent)
				    {
				    	objDate.setSelectedDate(date,null,false);
				    };
				    
				    var getParam = function(param)
				    {
				    	if(!param)
				    	{
				    		param = {};
				    	}
				    	/*param = {
				    		cssClass: param.cssClass || null,
				    	};*/
				    	return param;
				    };
				    
				    self.init = init;
				    self.getElement = getElement;
				    self.elementAdded = elementAdded;
				    self.getDate = getDate;
				    self.setDate = setDate;
				};
				
				this.__nsGrid.__components["datePicker"] = dateComp;
			}
		};
		
		this.__injectInNSGrid = function()
		{
			NSGrid.FILTER_TYPE_DATE = "date";
			NSGrid.ADVANCED_FILTER_TEXT = "text";
			NSGrid.ADVANCED_FILTER_NUMBER = "number";
			NSGrid.ADVANCED_FILTER_LIST = "list";
			NSGrid.ADVANCED_FILTER_DATE = "date";
		};
		this.__initialize();
	};
  
  var offset = null;
				  if(this.util.isElement(event))
				  {
					  var rects = event.getClientRects();
					  offset = {top:rects[0].top + event.offsetHeight,left:rects[0].left};
				  }
				  else
				  {
					  offset = this.util.getEventPosition(event);
				  }
          
          if(this.util.isElement(event))
			  {
				  var rects = event.getClientRects();
				  offset = {top:rects[0].top + event.offsetHeight,left:rects[0].left};
			  }
			  else
			  {
				  event = this.util.getEvent(event);
				  offset = this.util.getEventPosition(event);
			  }
        
        display: inline-block;
  width: 80%;
  padding-top: 0px;
  
  .nsDataGridContainer .nsFilterIconContainer
{
	display: inline-block;
}

.nsGridFilterFirstSelect
{
	margin: 4px;
	margin-left: 0px;
    width: calc(100% - 10%);
}
.nsGridFilterOptOption
{
	margin: 4px;
	margin-left: 0px;
    width: calc(100% - 10%);
}
.nsGridFilterSecondSelect
{
	margin: 4px;
	margin-left: 0px;
    width: calc(100% - 10%);
}

