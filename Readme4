var NSGridEditor = function(nsGrid)
	{
		this.__nsGrid = nsGrid;
		this.util = this.__nsGrid.util;
		
		this.__config = {editType:NSGrid.EDITOR_EDITTYPE_CELL,clickType:NSGrid.EDITOR_EDITING_DOUBLECLICK,stopEditingOnGridFocusOut:false,enableMultipleEdit:false};
		this.__defaultCellSetting = {type:NSGrid.EDITOR_TYPE_TEXT,params:null,customEditor:null,validator:null,isCellEditableCallback:null};
		
		this.__table = null;
		
		this.__objEditor = {};
		this.__tblClickRef = null;
		this.__tblEventRef = null;
		
		this.initialize = function()
		{
			if(this.__nsGrid.__enableEditable)
			{
				var editorSetting = this.__nsGrid.__editorSetting;
				if(!editorSetting)
				{
					editorSetting = {};
				}
				this.__config = {
						editType:editorSetting.editType || this.__config.editType,
						clickType:editorSetting.clickType || this.__config.clickType,
						stopEditingOnGridFocusOut: Boolean.parse(editorSetting.stopEditingOnGridFocusOut),
						enableMultipleEdit: Boolean.parse(editorSetting.enableMultipleEdit)
				};
				this.__table = this.__nsGrid.__tblCenterBody;
				if(this.__config.editType != NSGrid.EDITOR_EDITING_NOCLICK)
				{
					//if(!this.__tblClickRef)
					//{
						this.__tblClickRef = this.__tblClickHandler.bind(this);
						this.util.addEvent(this.__table,"click", this.__tblClickRef);
					//}
					//if(!this.__tblEventRef)
					//{
						var mouseEvent = this.__getMouseEventType();
						this.__tblEventRef = this.__tblEventHandler.bind(this);
						this.util.addEvent(this.__table,mouseEvent, this.__tblEventRef);
					//}
				}
				if(!this.__documentKeyEventRef)
				{
					this.__documentKeyEventRef = this.__documentKeyEventHandler.bind(this);
					this.util.addEvent(document,"keydown", this.__documentKeyEventRef);
				}
				if(this.__config.stopEditingOnGridFocusOut)
				{
					this.__nsGrid.__listenInternalEvent("blur",this.__tblBlurHandler.bind(this));
				}
			}
		};
		
		this.edit = function(element,rowIndex)
		{
			element = this.__getElement(element,rowIndex);
			if(element)
			{
				this.__handleEditors(element);
			}
		};
		
		this.cancelEdit = function(element,rowIndex)
		{
			element = this.__getElement(element,rowIndex);
			this.__callCancelForEditors(element);
		};
		
		this.saveEdit = function(element,rowIndex)
		{
			element = this.__getElement(element,rowIndex);
			this.__callSaveForEditors(element);
		};
		
		/*
		 * returns array of key and value
		 * if element is null then it returns all editor instances
		 */
		this.getEditorInstances = function(element,rowIndex)
		{
			element = this.__getElement(element,rowIndex);
			return this.__getAllEditors(element);
		};
		
		this.processColumnObject = function(objColumn)
		{
			if(objColumn)
			{
				if(!objColumn.hasOwnProperty("enableEditable"))
				{
					objColumn.enableEditable = this.__nsGrid.__enableEditable;
				}
				if(objColumn["editorSetting"])
				{
					if(!objColumn["editorSetting"].hasOwnProperty("type") || !objColumn["editorSetting"]["type"])
					{
						objColumn["editorSetting"]["type"] = this.__defaultCellSetting.type;
					}
					if(objColumn["editorSetting"].hasOwnProperty("customEditor"))
					{
						var customEditor = objColumn["editorSetting"]["customEditor"];
						if (typeof customEditor === "string" || customEditor instanceof String)
						{
							if(this.util.isFunction(customEditor))
							{
								objColumn["editorSetting"]["customEditor"] = this.__nsGrid.__context[customEditor];
							}
						}
					}
				}
			}
		};
		
		this.isOtherKeyNavigationValid = function(event,cell)
		{
			var hasFocus = this.__hasCellFocus(cell);
			return !hasFocus;
		};
		
		this.resetVariables = function() 
		{
			this.__objEditor = {};
		};
		
		this.__documentKeyEventHandler = function(event)
		{
			if(this.__hasEditor())
			{
				event = this.util.getEvent(event);
		    	var keyCode = this.util.KEYCODE;
		    	if (event.keyCode == keyCode.ENTER) 
		      	{
		    		this.__callSaveForEditors();
		      	}
		      	else if (event.keyCode == keyCode.TAB) 
		      	{
		      		this.__callSaveForEditors();
		      		event.preventDefault();
		      	}
		      	else if (event.keyCode == keyCode.ESC) 
		      	{
		      		this.__callCancelForEditors();
		      		this.__callDestroyForRowEditors();
		        	event.preventDefault();
		      	}
		    	this.__callRowEditorsFunction("handleKeyDown",[event,event.keyCode]);
			}
		};
		
		/*
		 * for editType = cell 
		 * combination can be this.__getElement(cellIndex,rowIndex),this.__getElement(cell),this.__getElement(dataField,rowIndex)
		 * 
		 * for editType = row 
		 * combination can be this.__getElement(rowIndex),this.__getElement(row)
		 * 
		 */
		
		this.__getElement = function(element,rowIndex)
		{
			var retValue = null;
			if(!this.util.isUndefinedOrNull(element))
			{
				if(this.__config.editType == NSGrid.EDITOR_EDITTYPE_CELL)
				{
					if(this.util.isNumber(element))
					{
						if(this.util.isUndefinedOrNull(rowIndex))
						{
							return null;
						}
						var row = this.__nsGrid.__getRowByIndex(parseInt(rowIndex));
						if(row && row.cells && row.cells.length > element)
						{
							retValue = row.cells[element];
						}
					}
					else if(this.util.isElement(element))
					{
						if(element.nodeName == "TD")
						{
							retValue = element;
						}
					}
					else if(this.util.isString(element))
					{
						if(this.util.isUndefinedOrNull(rowIndex))
						{
							return null;
						}
						var cellIndex = this.__nsGrid.__getColumnIndexByObject(this.__nsGrid.__getColumnObjectByDataField(element));
						if(!this.util.isUndefinedOrNull(cellIndex))
						{
							var row = this.__nsGrid.__getRowByIndex(parseInt(rowIndex));
							if(row && row.cells && row.cells.length > cellIndex)
							{
								retValue = row.cells[cellIndex];
							}
						}
					}
				}
				else
				{
					if(this.util.isNumber(element))
					{
						retValue = this.__nsGrid.__getRowByIndex(element);
					}
					else if(this.util.isElement(element))
					{
						if(element.nodeName == "TR")
						{
							retValue = element;
						}
						else
						{
							retValue = this.util.findParent(element,"TR");
						}
					}
					//in this case row will be blank as through dataField we cannot fetch row 
					else if(this.util.isString(element))
					{
						
					}
				}
			}
			return retValue;
		};
		
		this.__tblClickHandler = function(event)
		{
			event = this.util.getEvent(event);
			var target = this.util.getTarget(event);
			var parentType = this.__getTargetType();
			var parent = this.util.findParent(target,parentType);
			if(parent)
			{
				var arrRowIndexes = Object.keys(this.__objEditor);
				if(arrRowIndexes && arrRowIndexes.length > 0)
				{
					if(!this.__config.enableMultipleEdit)
					{
						if(parentType == "TR")
						{
							//same row clicked so just return;
							var objEditors = this.__getEditorsForRow(parent);
							if(objEditors)
							{
								var arrCellIndex = Object.keys(objEditors);
								if(arrCellIndex && arrCellIndex.length > 0)
								{
									/*var cellIndex = arrCellIndex[0];
									var cellItem = objEditors[cellIndex];
									cellItem.editor.setFocus();*/
									return;
								}
							}
							else
							{
								this.__commitRowEditorChanges();
							}
						}
						else
						{
							//same cell clicked so just return;
							var editor = this.__getEditor(null,parent);
							if(editor)
							{
								editor.setFocus();
								return;
							}
							else
							{
								this.__commitRowEditorChanges();
							}
						}
					}
				}
			}
		};
		
		this.__tblEventHandler = function(event)
		{
			event = this.util.getEvent(event);
			var target = this.util.getTarget(event);
			var parentType = this.__getTargetType();
			var parent = this.util.findParent(target,parentType);
			if(parent)
			{
				this.__handleEditors(parent);
			}
		};
		
		this.__tblBlurHandler = function(event,detail)
		{
			this.__callSaveForEditors();
		};
		
		this.__popUpWrapperMouseDownHandler = function(event)
		{
			event = this.util.getEvent(event);
			event.stopPropagation();
		};
		
		this.__hasCellFocus = function(cell,editor)
		{
			var hasFocus = false;
			editor = cell ? this.__getEditor(null,cell) : editor;
			if(editor)
			{
				var element = editor.getElement();
				var hasFocusFunction = editor.hasFocus;
				if(hasFocusFunction && this.util.isFunction(hasFocusFunction))
				{
					hasFocus = hasFocusFunction(); 
				}
				else
				{
					hasFocus = (element === document.activeElement);
				}
			}
			return hasFocus;
		};
		
		this.__handleEditors = function(element)
		{
			if(element.nodeName == "TD")
			{
				this.__handleCellEditor(element);
			}
			else
			{
				this.__handleRowEditors(element);
			}
		};
		
		this.__callSaveForEditors = function(element)
		{
			if(element && element.nodeName == "TD")
			{
				this.__callSaveForEditor(element);
			}
			else
			{
				this.__callSaveForRowEditors(element);
			}
		};
		
		this.__callCancelForEditors = function(element)
		{
			if(element && element.nodeName == "TD")
			{
				this.__callCancelForEditor(element);
			}
			else
			{
				this.__callCancelForRowEditors(element);
			}
		};
		
		this.__handleRowEditors = function(row)
		{
			if(row)
			{
				var arrCells = row.cells;
				if(arrCells && arrCells.length > 0)
				{
					for(var count = 0;count < arrCells.length;count++)
					{
						this.__handleCellEditor(arrCells[count]);
					}
				}
			}
		};
		
		this.__commitRowEditorChanges = function(row)
		{
			var arrEditor = this.__getOnlyEditors(row);
			if(arrEditor && arrEditor.length > 0)
			{
				for(var count = 0;count < arrEditor.length;count++)
				{
					this.__commitEditorChanges(null,arrEditor[count]);
				}
			}
		};
		
		this.__callSaveForRowEditors = function(row)
		{
			var arrEditor = this.__getOnlyEditors(row);
			if(arrEditor && arrEditor.length > 0)
			{
				for(var count = 0;count < arrEditor.length;count++)
				{
					this.__callSaveForEditor(null,arrEditor[count]);
				}
			}
		};
		
		this.__callCancelForRowEditors = function(row)
		{
			var arrEditor = this.__getOnlyEditors(row);
			if(arrEditor && arrEditor.length > 0)
			{
				for(var count = 0;count < arrEditor.length;count++)
				{
					this.__callCancelForEditor(null,arrEditor[count]);
				}
			}
		};
		
		this.__callDestroyForRowEditors = function(row)
		{
			var arrEditor = this.__getOnlyEditors(row);
			if(arrEditor && arrEditor.length > 0)
			{
				for(var count = 0;count < arrEditor.length;count++)
				{
					this.__callDestroyForEditor(null,arrEditor[count]);
				}
			}
		};
		
		this.__callRowEditorsFunction = function(functionRef,param,defaultValue,row,checkCellFocus)
		{
			var arrEditor = this.__getOnlyEditors(row);
			if(arrEditor && arrEditor.length > 0)
			{
				for(var count = 0;count < arrEditor.length;count++)
				{
					this.__callEditorFunction(arrEditor[count],functionRef,param,defaultValue,checkCellFocus);
				}
			}
		};
		
		this.__hasEditor = function()
		{
			var arrEditor = this.__getOnlyEditors();
			if(arrEditor && arrEditor.length > 0)
			{
				return true;
			}
			return false;
		};
		
		this.__getOnlyEditors = function(row)
		{
			var arrRet = [];
			if(this.util.isUndefinedOrNull(row))
			{
				var arrEditor = this.__getAllEditors();
				for(var count = 0;count < arrEditor.length;count++)
				{
					var cellItem = arrEditor[count];
					arrRet.push(cellItem.editor);
				}
			}
			else
			{
				if(this.util.isNumber(row))
				{
					row = this.__nsGrid.__getRowByIndex(row);
				}
				var objEditors = this.__getEditorsForRow(row);
				if(objEditors)
				{
					for(var cellIndex in objEditors)
					{
						var cellItem = objEditors[cellIndex];
						arrRet.push(cellItem.editor);
					}
				}
			}
			return arrRet;
		};
		
		this.__getAllEditors = function(element)
		{
			var arrRet = [];
			if(this.__objEditor)
			{
				if(element)
				{
					if(element.nodeName == "TD")
					{
						element = this.util.findParent(element,"TR");
					}
					if(element)
					{
						var objEditors = this.__getEditorsForRow(element);
						if(objEditors)
						{
							var rowIndex = parseInt(element.getAttribute("ns-index"));
							var itemInfo = this.__nsGrid.__getItemByIndex(rowIndex);
							for(var cellIndex in objEditors)
							{
								var cellItem = rowItem[cellIndex];
								var colInfo = this.__nsGrid.__getColumnObject(cellIndex);
								arrRet.push({rowIndex: rowIndex,item: itemInfo,cellIndex: cellIndex,colInfo: colInfo,cellItem: cellItem,editor: cellItem.editor});
							}
						}
					}
				}
				else
				{
					for(var rowIndex in this.__objEditor)
					{
						var rowItem = this.__objEditor[rowIndex];
						var itemInfo = this.__nsGrid.__getItemByIndex(rowIndex);
						for(var cellIndex in rowItem)
						{
							var cellItem = rowItem[cellIndex];
							var colInfo = this.__nsGrid.__getColumnObject(cellIndex);
							arrRet.push({rowIndex: rowIndex,item: itemInfo,cellIndex: cellIndex,colInfo: colInfo,cellItem: cellItem,editor: cellItem.editor});
						}
					}
				}
			}
			return arrRet;
		};
		
		this.__handleCellEditor = function(cell,event,item)
		{
			if(cell)
			{
				var editor = this.__getEditor(null,cell);
				if(!editor)
				{
					var colIndex = cell.cellIndex;
					var objColumn = this.__nsGrid.__getColumnObject(colIndex);
					if(objColumn && objColumn.enableEditable)
					{
						var row = cell.parentNode;
						var rowIndex = this.__nsGrid.__getIndexFromRow(row);
						if(!item)
						{
							item = this.__nsGrid.__getItemByIndex(rowIndex);
						}
						if(item)
						{
							if(this.__isCellEditable(objColumn,item,cell,colIndex,row,rowIndex))
						    {
						    	var editor = this.__createEditor(cell,objColumn,row,rowIndex,item);
								this.__insertEditorInObj(editor,row,cell);
								if(event)
								{
									event.preventDefault();
								}
						    }
						}
					}
				}
			}
		};
		
		this.__createEditor = function(cell,objColumn,row,rowIndex,item)
		{
			var self = this;
			var createPopUpWrapper = function()
			{
				var container = document.body;
		      	var wrapper = self.util.createDiv(null,"nsGridEditorPopUp");
		      	container.appendChild(wrapper);
		      	return wrapper;
			};
			var addChildInPopUp = function(element,parent)
			{
				parent.appendChild(element);
			};
			var addChild = function(element)
			{
				divChild.innerHTML = "";
				divChild.appendChild(element);
			};
			var commitChanges = function()
			{
				self.__callSaveForEditor.call(cell,editor);
			};
			var cancelChanges = function()
			{
				self.__callCancelForEditor.call(self,cell);
			};
			var position = this.__getPosition(cell);
			var editorSetting = this.__getEditorSetting(objColumn);
			var divChild = cell.querySelector("." + this.__nsGrid.__CLASS_CELL_CHILD);
		    var currentValue = item[objColumn.dataField];
			var editorFunction = this.__getEditorFunction(editorSetting);
			var setting = {cell:cell,row:row,item:item,rowIndex:rowIndex,cellIndex:cell.cellIndex,position:position,defaultValue:currentValue,
					commitChanges:commitChanges,cancelChanges:cancelChanges,validator:editorSetting.validator,setting:editorSetting,column:objColumn,api:this.__nsGrid};
			var editor = new editorFunction();
			editor.init(setting);
			var element = editor.getElement();
			var isPopUp = editor.isPopUp();
			var popUpWrapper = null;
			if(isPopUp)
			{
				popUpWrapper = createPopUpWrapper();
				popUpWrapper.style.top = (position.top - 5) + "px";
				popUpWrapper.style.left = (position.left - 5) + "px";
				this.__callEditorFunction(editor,"setPopUpWrapper",popUpWrapper,null,false);
				addChildInPopUp(element,popUpWrapper);
				if(this.__config.stopEditingOnGridFocusOut)
				{
					//stop propagation of event on document level so that pop up is not closed
					this.util.addEvent(popUpWrapper,"mousedown", this.__popUpWrapperMouseDownHandler.bind(this));
				}
			}
			else
			{
				addChild(element);
			}
			this.__callEditorFunction(editor,"elementAdded",null,null,false);
			var config = {cell:cell,row:row,divChild:divChild,setting:editorSetting,column:objColumn,item:item,isPopUp:isPopUp,element:element,popUpWrapper:popUpWrapper};
			editor[this.__getAttributeKey("config")] = config;
			
			return editor;
		};
		
		this.__isCellEditable = function(objColumn,item,cell,cellIndex,row,rowIndex)
		{
			if(this.__nsGrid.__isCellEditable(objColumn,item,cell,cellIndex,row,rowIndex))
			{
				var editorSetting = this.__getEditorSetting(objColumn);
				if(editorSetting && editorSetting.isCellEditableCallback)
				{
					return editorSetting.isCellEditableCallback(objColumn,item,cell,cellIndex,row,rowIndex,item[this.__nsGrid.__fieldRowLevel]);
				}
				return true;
			}
			return false;
		};
		
		this.__callSaveForEditor = function(cell,editor)
		{
			editor = cell ? this.__getEditor(null,cell) : editor;
			if(editor)
			{
				this.__callEditorFunction(editor,"save",null,null,false);
				this.__commitEditorChanges(cell,editor);
			}
			else
			{
				this.util.warning("NSGrid","Editor For cell could not be found");
			}
		};
		
		this.__callCancelForEditor = function(cell,editor)
		{
			editor = cell ? this.__getEditor(null,cell) : editor;
			if(editor)
			{
				this.__callEditorFunction(editor,"cancel",null,null,false);
				var config = editor[this.__getAttributeKey("config")];
				var cell = config.cell;
				var row = config.row;
				var objColumn = config.column;
				var item = config.item;
				var editorSetting = config.setting;
				var setValue = item[objColumn.dataField];
				this.__setCellValue(cell,setValue,item,row,objColumn,editorSetting);
				this.__callDestroyForEditor(cell,editor);
			}
			else
			{
				this.util.warning("NSGrid","Editor For cell could not be found");
			}
		};
		
		this.__callDestroyForEditor = function(cell,editor)
		{
			editor = cell ? this.__getEditor(null,cell) : editor;
			if(editor)
			{
				this.__callEditorFunction(editor,"destroy",null,null,false);
				var config = editor[this.__getAttributeKey("config")];
				var element = null;
				if(config.isPopUp)
				{
					element = config.popUpWrapper;
				}
				else
				{
					element = editor.getElement();
					
				}
				if(element && element.parentNode)
		    	{
					element.parentNode.removeChild(element);
		    	}
				this.__deleteEditor(null,cell,editor);
			}
			else
			{
				this.util.warning("NSGrid","Editor For cell could not be found");
			}
		};
		
		this.__commitEditorChanges = function(cell,editor)
		{
			editor = cell ? this.__getEditor(null,cell) : editor;
			if(editor)
			{
				var self = this;
				var destroyEditor = function()
				{
					self.__callDestroyForEditor.call(self,cell);
				};
				var config = editor[this.__getAttributeKey("config")];
				var cell = config.cell;
				var row = config.row;
				var objColumn = config.column;
				var item = config.item;
				var editorSetting = config.setting;
				var value = editor.getValue();
				var isValid = this.__callEditorFunction(editor,"validate",null,true,false);
				if(isValid)
				{
					var setValue = item[objColumn.dataField];
					
					var hasValueChanged = this.__callEditorFunction(editor,"hasValueChanged",setValue,null,null,false);
					if(hasValueChanged == null)
					{
						hasValueChanged = !(setValue === value);
					}
					destroyEditor();
					if(hasValueChanged)
					{
						setValue = value;
					}
					this.__setCellValue(cell,setValue,item,row,objColumn,editorSetting);
				}
			}
			else
			{
				//this.util.warning("NSGrid","Editor For cell could not be found");
			}
		};
		
		this.__callEditorFunction = function(editor,functionRef,param,defaultValue,checkCellFocus)
		{
			if(editor && editor[functionRef] && this.util.isFunction(editor[functionRef]))
			{
				//if(!checkCellFocus || this.__hasCellFocus(null,editor))
				//{
					var retValue = null;
					if(param && this.util.isArray(param) && param.length > 0)
					{
						retValue = editor[functionRef].apply(null,param);
					}
					else
					{
						retValue = editor[functionRef](param);
					}
					if(!this.util.isUndefinedOrNull(retValue))
					{
						return retValue;
					}
				//}
			}
			return defaultValue;
		};
		
		this.__setCellValue = function(cell,newValue,item,row,objColumn,editorSetting)
		{
			if(cell)
			{
				var colIndex = cell.cellIndex;
				var rowIndex = this.__nsGrid.__getIndexFromRow(row);
				var currentValue = item[objColumn.dataField];
				item[objColumn.dataField] = newValue;
				this.__nsGrid.updateItemInDataSource(item);
				this.__nsGrid.updateRowByIndex(rowIndex);
				this.__nsGrid.__dispatchEvent(NSGrid.EDITOR_CELL_VALUE_CHANGED,cell,{cellIndex:colIndex,rowIndex:rowIndex,cell:cell,row:row,newValue:newValue,oldValue:currentValue,item:item});
			}
		};
		
		this.__getAttributeKey = function(key)
		{
			return "__" + this.__nsGrid.__fieldPrefix + "_" + key;
		};
		
		this.__getPosition = function(element) 
		{
		      var position = {
		        top: element.offsetTop,
		        left: element.offsetLeft,
		        bottom: 0,
		        right: 0,
		        width: this.util.getOuterWidth(element),
		        height: this.util.getOuterHeight(element),
		        visible: true};
		      position.bottom = position.top + position.height;
		      position.right = position.left + position.width;
	
		      // walk up the tree
		      var offsetParent = element.offsetParent;
		      while ((element = element.parentNode) != document.body) 
		      {
		        if (position.visible && element.scrollHeight != element.offsetHeight && this.util.getStyleValue(element,"overflowY",false) != "visible") 
		        {
		          	position.visible = position.bottom > element.scrollTop && position.top < element.scrollTop + element.clientHeight;
		        }
		        if (position.visible && element.scrollWidth != element.offsetWidth && this.util.getStyleValue(element,"overflowX",false) != "visible") 
		        {
		          	position.visible = position.right > element.scrollLeft && position.left < element.scrollLeft + element.clientWidth;
		        }
		        position.left -= element.scrollLeft;
		        position.top -= element.scrollTop;
		        if (element === offsetParent) 
		        {
		          	position.left += element.offsetLeft;
		          	position.top += element.offsetTop;
		          	offsetParent = element.offsetParent;
		        }
		        position.bottom = position.top + position.height;
		        position.right = position.left + position.width;
		      }
	
		      return position;
		};
		
		this.__getMouseEventType = function()
		{
			var retValue = "dblclick";
			switch(this.__config.clickType)
			{
				case NSGrid.EDITOR_EDITING_SINGLECLICK:
					retValue = "click";
				break;
				case NSGrid.EDITOR_EDITING_DOUBLECLICK:
					retValue = "dblclick";
				break;
				case NSGrid.EDITOR_EDITING_NOCLICK:
					retValue = "";
				break;
			}
			return retValue;
		};
		
		this.__getEditorSetting = function(objColumn)
		{
			var editorSetting = objColumn.editorSetting;
			if(!editorSetting)
			{
				editorSetting = this.__defaultCellSetting;
			}
			return editorSetting;
		};
		
		this.__getEditorFunction = function(editorSetting)
		{
			var retFunction = null;
			if(editorSetting)
			{
				switch(editorSetting.type)
				{
					case NSGrid.EDITOR_TYPE_TEXT:
						retFunction = this.__nsTextEditor;
					break;
					case NSGrid.EDITOR_TYPE_TEXTAREA:
						retFunction = this.__nsTextAreaEditor;
					break;
					case NSGrid.EDITOR_TYPE_CUSTOM:
						retFunction = editorSetting.customEditor;
					break;
				}
			}
			return retFunction;
		};
		
		this.__getTargetType = function()
		{
			if(this.__config.editType == NSGrid.EDITOR_EDITTYPE_ROW)
			{
				return "TR";
			}
			return "TD";
		};
		
		this.__insertEditorInObj = function(editor,row,cell)
		{
			var item = this.__getRowCellInfo(row,cell);
			if(item && item.cellIndex > -1)
			{
				if(!this.__config.enableMultipleEdit)
				{
					var parentType = this.__getTargetType();
					if(parentType == "TR")
					{
						if(this.__objEditor[item.rowIndex] && this.__objEditor[item.rowIndex][item.cellIndex])
						{
							this.__objEditor[item.rowIndex][item.cellIndex] = {};
						}
					}
					else
					{
						this.__objEditor = {};
					}
				}
				if(!this.__objEditor[item.rowIndex])
				{
					this.__objEditor[item.rowIndex] = {};
				}
				if(!this.__objEditor[item.rowIndex][item.cellIndex])
				{
					this.__objEditor[item.rowIndex][item.cellIndex] = {};
				}
				if(!this.__objEditor[item.rowIndex][item.cellIndex].editor)
				{
					this.__objEditor[item.rowIndex][item.cellIndex].editor = editor;
				}
			}
		};
		
		this.__getEditor = function(row,cell)
		{
			var item = this.__getRowCellInfo(row,cell);
			if(item && item.cellIndex > -1)
			{
				if(this.__objEditor && this.__objEditor[item.rowIndex] && this.__objEditor[item.rowIndex][item.cellIndex] && this.__objEditor[item.rowIndex][item.cellIndex].editor)
				{
					return this.__objEditor[item.rowIndex][item.cellIndex].editor;
				}
			}
			return null;
		};
		
		this.__getEditorsForRow = function(row)
		{
			var item = this.__getRowCellInfo(row,null);
			if(item)
			{
				if(this.__objEditor && this.__objEditor[item.rowIndex])
				{
					return this.__objEditor[item.rowIndex];
				}
			}
			return null;
		};
		
		this.__deleteEditor = function(row,cell,editor)
		{
			if(editor)
			{
				cell = cell ? cell : this.util.findParent(editor.getElement(),"TD");
			}
			var item = this.__getRowCellInfo(row,cell);
			if(item && item.cellIndex > -1)
			{
				if(this.__objEditor && this.__objEditor[item.rowIndex] && this.__objEditor[item.rowIndex][item.cellIndex] && this.__objEditor[item.rowIndex][item.cellIndex].editor)
				{
					delete this.__objEditor[item.rowIndex][item.cellIndex];
					var objKeys = Object.keys(this.__objEditor[item.rowIndex]);
					if(!objKeys || objKeys.length == 0)
					{
						delete this.__objEditor[item.rowIndex];
					}
				}
			}
		};
		
		this.__deleteEditorsForRow = function(row)
		{
			var item = this.__getRowCellInfo(row,null);
			if(item)
			{
				if(this.__objEditor && this.__objEditor[item.rowIndex])
				{
					var rowEditors = this.__objEditor[item.rowIndex];
					for(var cellIndex in rowEditors)
					{
						if(rowEditors[cellIndex].editor)
						{
							delete rowEditors[cellIndex].editor;
						}
					}
				}
			}
		};
		
		this.__getRowCellInfo = function(row,cell)
		{
			var self = this;
			var getInfo = function(rowIndex,cellIndex,rowRet,cellRet)
			{
				var itemInfo = self.__nsGrid.__getItemByIndex(rowIndex);
				var colInfo = self.__nsGrid.__getColumnObject(cellIndex);
				return {rowIndex: rowIndex,cellIndex: cellIndex,rowInfo: itemInfo,colInfo: colInfo,row: rowRet,cell: cellRet};
			};
			
			if(!this.util.isUndefinedOrNull(row) && !this.util.isUndefinedOrNull(cell))
			{
				var rowIndex = -1;
				var cellIndex = -1;
				var rowRet = null;
				var cellRet = null;
				if(this.util.isElement(row))
				{
					rowIndex = parseInt(row.getAttribute("ns-index"));
					rowRet = row;
				}
				if(this.util.isNumber(row))
				{
					rowIndex = parseInt(row);
					rowRet = this.__nsGrid.__getRowByIndex(rowIndex);
				}
				if(this.util.isElement(cell))
				{
					cellIndex = parseInt(cell.cellIndex);
					cellRet = cell;
				}
				if(this.util.isNumber(cell))
				{
					cellIndex = parseInt(cell);
					cellRet = rowRet.cells[cellIndex];
				}
				var retItem = getInfo(rowIndex,cellIndex,rowRet,cellRet);
				return retItem;
			}
			else if(!this.util.isUndefinedOrNull(cell))
			{
				var rowIndex = -1;
				var cellIndex = -1;
				var rowRet = null;
				var cellRet = null;
				if(this.util.isElement(cell))
				{
					cellIndex = parseInt(cell.cellIndex);
					cellRet = cell;
				}
				if(this.util.isNumber(cell))
				{
					cellIndex = parseInt(cell);
					cellRet = rowRet.cells[cellIndex];
				}
				rowRet = cellRet.parentElement;
				rowIndex = parseInt(rowRet.getAttribute("ns-index"));
				var retItem = getInfo(rowIndex,cellIndex,rowRet,cellRet);
				return retItem;
			}
			
			else if(!this.util.isUndefinedOrNull(row))
			{
				var rowIndex = -1;
				var rowRet = null;
				
				if(this.util.isElement(row))
				{
					rowIndex = parseInt(row.getAttribute("ns-index"));
					rowRet = row;
				}
				if(this.util.isNumber(row))
				{
					rowIndex = parseInt(row);
					rowRet = this.__nsGrid.__getRowByIndex(rowIndex);
				}
				var itemInfo = this.__nsGrid.__getItemByIndex(rowIndex);
				return {rowIndex: rowIndex,cellIndex: -1,rowInfo: itemInfo,colInfo: null,row: rowRet,cell: null};
			}
			
			return null;
		};
    
    NSUtil.prototype.isElement = function (element)
	{
		try
		{
			return (element && "nodeType" in element && element.nodeType === 1);
		}
	    catch(err)
	    {
	    	return false;
	    }
	};
  
  .nsTextEditor 
{
    width: 100%;
    height: 100%;
    /*border: 0;
    margin: 0;
    background: transparent;
    outline: 0;
    padding: 0;*/
    line-height: normal;
    border: 1px solid #95a5a6;
}

background: #FFFFFF;
