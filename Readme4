import * as React from 'react';

import {INSGridEditorCustomComponent, INSGridEditorCustomComponentSetting} from "../../lib/nsGrid/nsGridInterfaces";

export default class EmailEditor extends React.Component<INSGridEditorCustomComponentSetting, any> implements INSGridEditorCustomComponent
{
    private __setting: INSGridEditorCustomComponentSetting;
    private input: any; 
    
    constructor(props: INSGridEditorCustomComponentSetting,state: any) 
    {
        super(props,state);
        this.__setting = props;
        this.input = React.createRef();
        const email = this.props.defaultValue;
        this.state = {
          email
        };
        this.__handleChange = this.__handleChange.bind(this);
    }

    init(setting: INSGridEditorCustomComponentSetting) : void
    { 
    };

    elementAdded(): void
    {
    };
  
    handleKeyDown(event: any,keyCode: any): void
    {
        if (keyCode === 37 && keyCode === 39) 
        {
            event.stopImmediatePropagation();
        }
    };
  
    getValue(): any
    {
        return this.state.email;
    };
  
    setFocus(): void
    {
        this.input.current.focus();
    };

    hasFocus(): boolean
    {
       return (this.input.current === document.activeElement);
    };
  
    validate(): boolean
    {
        if(this.__validateEmail(this.getValue()))
        {
            return true;
        }
        alert(this.getValue() + " is not a valid email. Please enter a valid email");
        this.setFocus();
        return false;
    };

    isPopUp(): boolean
    {
        return false;
    };

    render() {
        const style = {width: "100%"}
        return (
            <input ref= {this.input} type="text" 
                   style={style} value={this.state.email} 
                   onChange={this.__handleChange}/>
        );
    }
  
    private __handleChange(event: any) 
    {
        this.setState({email: event.target.value});
    }
  
    private __validateEmail(email: string): boolean 
    {
        const regex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return regex.test(email);
    }
            
   
};

import * as React from 'react';
import {INSGridColumn, INSGridCustomClassSetting, INSGridSetting} from "../../lib/nsGrid/nsGridInterfaces";
import NSGridReact from "../../lib/nsGrid/nsGridReact";
import ReactFetch from "../../reactUtil/reactFetch/reactFetch";
import EmailEditor from "../editors/emailEditor";


export default class GridEditorComponent extends React.Component<any, any> 
{
      private __gridRef: any;
      private grid: any; 

      constructor(props: any) 
      {
          super(props);
          this.state = {
                  gridSetting: this.__getGridSetting(),
                  dataSource: []
          };
          this.onGridRendered = this.onGridRendered.bind(this);
          this.grid = React.createRef();
      }
      
      public render() 
      {
          if(this.state)
          {
              return(
                 <NSGridReact setting={this.state.gridSetting} 
                              dataSource={this.state.dataSource}
                              onGridRendered= {this.onGridRendered}
                              ref= {this.grid}/>
              )
          }
          else
          {
              return "";
          }
      }
  
      public componentDidMount() 
      {
          ReactFetch("https://randomuser.me/api/?results=100")
          .then(data => {this.setState({dataSource: data.results})})
          .catch(error => console.log(error));
      }
      
      public onGridRendered()
      {
          console.log("gridRendered");
      }
      
      private __getGridSetting(): INSGridSetting
      {
          const gridColumn: INSGridColumn[] = this.__getGridColumns();
          const customClass: INSGridCustomClassSetting = {headerCell:"columnClass",firstBodyColumn:"columnClass",nonFirstBodyColumn:"columnClass"};
          const gridSetting: INSGridSetting = {type: "normal",columnResizable: true,columnDraggable: false,enableFilter: false,enableAdvancedFilter: false, 
                                               columns: gridColumn,customClass: customClass,heightOffset: 70,enableEditable:true,enableCellSelection:true,
                                               editorSetting:{stopEditingOnGridFocusOut: true}};
      
          return gridSetting;
      }
      
      private __getGridColumns(): INSGridColumn[]
      {
         return  [{headerText: "Cell",dataField:"cell",width:"100px",showMenu:false,headerTruncateToFit:true,enableFilter:true},
                  {headerText: "Gender",dataField:"gender",width:"100px",showMenu:false,headerTruncateToFit:true,enableFilter:true},
                  {headerText: "Email",dataField:"email",width:"150px",showMenu:false,headerTruncateToFit:true,
                    editorSetting:{type:"custom",params:null,customEditor: EmailEditor}},
                  {headerText: "NAT",dataField:"nat",width:"50px",showMenu:false,headerTruncateToFit:true},
                  {headerText: "Phone",dataField:"phone",width:"150px",showMenu:false,headerTruncateToFit:true,enableFilter:true},
                  {headerText: "Name",dataField:"name.first",width:"150px",showMenu:false,headerTruncateToFit:true,enableFilter:true}]; 
      }
      
}


import * as React from 'react';
import {INSGridColumn, INSGridCustomClassSetting, INSGridSetting} from "../../lib/nsGrid/nsGridInterfaces";
import NSGridReact from "../../lib/nsGrid/nsGridReact";
import ReactFetch from "../../reactUtil/reactFetch/reactFetch";
import CountryRenderer from "../renderers/countryRenderer";


export default class GridRendererComponent extends React.Component<any, any> 
{
      private __gridRef: any;
      private grid: any; 

      constructor(props: any) 
      {
          super(props);
          this.state = {
                  gridSetting: this.__getGridSetting(),
                  dataSource: []
          };
          this.onGridRendered = this.onGridRendered.bind(this);
          this.grid = React.createRef();
      }
      
      public render() 
      {
          if(this.state)
          {
              return(
                 <NSGridReact setting={this.state.gridSetting} 
                              dataSource={this.state.dataSource}
                              onGridRendered= {this.onGridRendered}
                              ref= {this.grid}/>
              )
          }
          else
          {
              return "";
          }
      }
  
      public componentDidMount() 
      {
          ReactFetch("https://randomuser.me/api/?results=100")
          .then(data => {this.setState({dataSource: data.results})})
          .catch(error => console.log(error));
      }
      
      public onGridRendered()
      {
          console.log("gridRendered");
      }
      
      private __getGridSetting(): INSGridSetting
      {
          const gridColumn: INSGridColumn[] = this.__getGridColumns();
          const customClass: INSGridCustomClassSetting = {headerCell:"columnClass",firstBodyColumn:"columnClass",nonFirstBodyColumn:"columnClass"};
          const gridSetting: INSGridSetting = {type: "normal",columnResizable: true,columnDraggable: false,enableFilter: false,enableAdvancedFilter: false, 
                                               columns: gridColumn,customClass: customClass,heightOffset: 70};
      
          return gridSetting;
      }
      
      private __getGridColumns(): INSGridColumn[]
      {
         return  [{headerText: "Cell",dataField:"cell",width:"100px",showMenu:false,headerTruncateToFit:true,enableFilter:true},
                  {headerText: "Gender",dataField:"gender",width:"100px",showMenu:false,headerTruncateToFit:true,enableFilter:true},
                  {headerText: "Email",dataField:"email",width:"150px",showMenu:false,headerTruncateToFit:true},
                  {headerText: "NAT",dataField:"nat",width:"50px",showMenu:false,headerTruncateToFit:true,itemRendererComponent: CountryRenderer},
                  {headerText: "Phone",dataField:"phone",width:"150px",showMenu:false,headerTruncateToFit:true,enableFilter:true},
                  {headerText: "Name",dataField:"name.first",width:"150px",showMenu:false,headerTruncateToFit:true,enableFilter:true}]; 
      }
      
}


import * as React from 'react';

import {INSGridRendererComponent} from "../../lib/nsGrid/nsGridInterfaces";

export default class CountryRenderer extends React.Component<any, any> implements INSGridRendererComponent
{
    constructor(props: any,state: any) 
    {
        super(props,state);
        this.state = {
          country: "",
          countryUrl: "#"
        };
    }

    public setData(item: any,dataField: string,index: number,colIndex: number,row: any): void
    {
        this.setState({country:item[dataField],countryUrl:"http://api.worldbank.org/v2/countries/" + item[dataField]});
    }

    render() {
        const style = {color: "blue", textDecoration: "underline"}
        return (
            <a href={this.state.countryUrl} target="_blank" style={style}>{this.state.country}</a>
        );
    }
};

import * as React from 'react';
import {Link} from 'react-router-dom';
import NSNavigationReact from "../../lib/nsNavigation/nsNavigationReact";
import {INSNavigationClickFunction, INSNavigationMenu, INSNavigationCustomClassSetting, INSNavigationSetting} from "../../lib/nsNavigation/nsNavigationInterfaces";

export default class Sidebar extends React.Component<any, any> {
    
  private nav: any; 
  constructor(props: any) 
  {
      super(props);
      this.state = {
              menuSetting: this.__getSetting(),
              dataSource: this.__getMenuSource()
      };
      this.onNavEventHandler = this.onNavEventHandler.bind(this);
      this.nav = React.createRef();
  }
  
  /*public render() {
    return (
            <nav id="sidebar">
                <div className ="sidebar-header">
                    <h4>React NS Components</h4>
                </div>
                <ul className ="list-unstyled components">
                    <li className ="active">
                      <a href="#nsGridSubmenu" data-toggle="collapse" aria-expanded="false" className ="dropdown-toggle">NSGrid</a>
                      <ul className ="collapse list-unstyled" id="nsGridSubmenu">
                          <li>
                              <Link to={'/flatGrid'}>Flat Grid</Link>
                          </li>
                          <li>
                              <Link to={'/gridRenderer'}>Grid With Renderer</Link>
                          </li>
                          <li>
                              <Link to={'/gridEditor'}>Grid With Editor</Link>
                          </li>
                          <li>
                              <Link to={'/hierarchicalGrid'}>Hierarchical Grid</Link>
                          </li>
                          
                      </ul>
                    </li>
                </ul>
            </nav>
    );
  }*/
  
  public render()
  {
      
      return (
           <NSNavigationReact setting={this.state.menuSetting} 
                              dataSource={this.state.dataSource}
                              onNavigationOpenStart= {this.onNavEventHandler}
                              onNavigationCloseStart= {this.onNavEventHandler}
                              onNavigationMenuSelected= {this.onNavEventHandler}
                              ref= {this.nav}/>   
      );
  }
  
  
  
  onNavEventHandler(event:any,eventType:string)
  {
      const divContent:any = this.nav.current.getElement();
      switch(event.type)
      {
        case "navigationOpenStart":
          divContent.style.marginLeft = "250px";  
        break;
        case "navigationCloseStart":
          divContent.style.marginLeft = "50px";
        break;
        case "navigationMenuSelected":
          if(event instanceof Event)
          { 
              //const item:any = event.detail;
              /*const compMenuHeader = this.__compMenuHeader.nativeElement;
              compMenuHeader.innerHTML = item.menuName;*/
          }
        break;
      }
  }
  
  private __getSetting(): INSNavigationSetting
  {
      const setting:INSNavigationSetting =  {header:"NAVIGATION",showCollapseIcon:false,iconCollapse:"<i class='fa fa-bars pull-right'></i>",
              titleField:"menuName",childField:"childMenus",iconPosition:"right",iconMenuExpanded:"<i class='fa fa-angle-left'></i>",
              iconMenuCollapsed:"<i class='fa fa-angle-left'></i>"};
  
      return setting;
  }
  
  private __getMenuSource(): INSNavigationMenu[]
  {
      const dataSource: INSNavigationMenu[] = [{menuName: "NSGrid",childMenus:
                                                          [{menuName: "Flat Grid",href:"flatGrid"},
                                                           {menuName: "Grid With Renderer",href:"gridRenderer"},
                                                           {menuName: "Grid With Editor",href:"gridEditor"},
                                                           {menuName: "Hierarchical Grid",href:"hierarchicalGrid"}]
                                              }];
      return dataSource;
  }
}
