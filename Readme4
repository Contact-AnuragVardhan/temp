function serverSideDemo()
				{
					var lstServerSideDemo = document.getElementById("lstServerSideDemo");
					var setting = {labelField:"firstName",enableHierarchical:true,enableVirtualScroll:false,enableDragDrop:false,
							isDraggable:true,isDroppable:false,
							enableMultipleSelection:true,enableKeyboardNavigation:true,customScrollerRequired:false,
			 		   		disableHoverField:"stopOver",enableDragAfterHold:true,holdTime:300,enableCloneMode:true,enableContextMenu:false,
			 		   		contextMenuProvider:contextMenuProvider,enableTruncateToFit:true,enableToolTipForTruncateText:true,
			 		   		toolTipRenderer:toolTipRenderer,
			 		   		enableOnDemandHierarchy:true,onDemandChildDetectionField:"hasChildren",onDemandChildFetchCallback:getNthLevelData};
					//, template:"templateDemo",setData:"setData",itemRenderer:itemRenderer
					//setting["dataSource"] = getFirstLevelData();
					nsServerHierarchical = new NSList(lstServerSideDemo,setting);
					
					var util= new NSUtil();
					var setting =  {
						method: "GET",
						url: "/JSLib/hierarchicalFirstLevelData",
						dataType: "json",
						param: {
							datalength: "10"
						},
						successHandler: function( data ) {
							console.log(data);
							getParentData(data);
						}
					};
					var ajax = new util.ajax(setting);
				}
				
				var lastItem = null;
				function getParentData(result)
				{
					nsServerHierarchical.dataSource(result);
					console.log(result);
				}
				
				function getNthLevelData(item,rowIndex,rowLevel,event)
				{
					var util= new NSUtil();
					var setting =  {
						method: "GET",
						url: "/JSLib/hierarchicalNonFirstLevelData",
						dataType: "json",
						param: {
							datalength: "10",
							parentid:item.id
						},
						successHandler: function( data ) {
							console.log(data);
							if(data && data.length > 0)
							{
								nsServerHierarchical.addItemsAsChildren(item,data);
							}
							else
							{
								item.hasChildren = false;
								nsServerHierarchical.updateListItemByIndex(rowIndex);
							}
						}
					};
					var ajax = new util.ajax(setting);
				}
				
				
NSGrid.prototype.addItemsAsChildren = function(item,arrChildren)
	{
		this.__objGrid.addItemsAsChildren(item,arrChildren);
	};
	
	if(objColumn.hasOwnProperty("groupRenderer"))
			{
				objColumn["groupRenderer"] = this.util.getFunction(objColumn["groupRenderer"]);
			}
			//itemRendrer property gets precedence over template
			if(objColumn.hasOwnProperty("itemRenderer"))
			{
				objColumn["itemRenderer"] = this.util.getFunction(objColumn["itemRenderer"]);
			}
			else if(objColumn.hasOwnProperty("template") && objColumn["template"])
			{
				//setData should be before template for checking
				if(objColumn.hasOwnProperty("setData"))
				{
					objColumn["setData"] = this.util.getFunction(objColumn["setData"]);
				}
				objColumn.templateRenderer = this.util.getTemplate(objColumn["template"]);
			}
			else if(objColumn.hasOwnProperty("labelFunction"))
			{
				objColumn["labelFunction"] = this.util.getFunction(objColumn["labelFunction"]);
			}
			if(objColumn.hasOwnProperty("headerRenderer"))
			{
				objColumn["headerRenderer"] = this.util.getFunction(objColumn["headerRenderer"]);
			}
			else if(objColumn.hasOwnProperty("headerTemplate") && objColumn["headerTemplate"])
			{
				objColumn.headerTemplate = this.util.getTemplate(objColumn["headerTemplate"]);
			}
			if(!objColumn.hasOwnProperty("toolTipField") && objColumn.hasOwnProperty("toolTipRenderer"))
			{
				objColumn["toolTipRenderer"] = this.util.getFunction(objColumn["toolTipRenderer"]);
			}
			if(objColumn.hasOwnProperty("extraRowHeaderRenderer"))
			{
				objColumn["extraRowHeaderRenderer"] = this.util.getFunction(objColumn["extraRowHeaderRenderer"]);
			}
			
			NSGrid.prototype.__createBodyRow = function(item)
	{
		this.__objGrid.__createRow(item);
	};
	
	NSGrid.prototype.__createBodyRowAt = function(item,index)
	{
		if(item && index > -1)
	    {
			this.__objGrid.__createRow(item,index);
	    }
	};
	
	rowIndex = parseInt(rowIndex);
			if(rowIndex > -1)
			{
				var item = this.__getItemByIndex(rowIndex);
				if(item[this.__childField]  && item[this.__childField].length > 0)
		        {
					this.__showHideRow(rowIndex,target,!isCollapse);
		        }
				else 
				{
					this.__objGrid.__handleOnDemandClick(item,event);
				}
			}
			
			
			var row = rowItem[this.__fieldRowHtml];
				if(!row)
				{
					this.__createBodyRowAt(rowItem,rowItem[this.__fieldIndex]);
					row = rowItem[this.__fieldRowHtml];
					this.__updateSourceIndex();
				}
				
				NSGrid.prototype.__updateSourceIndex = function(source)
	{
		if(!source)
		{
			source = this.__getAllItems();
		}
		var item = null;
		var row = null;
		var length = source.length;
		for(var count = 0;count < length;count++)
		{
			item = source[count];
			var index = (this.__enableHierarchical || this.__enableGrouping) ? (count + 1) : count;
			item[this.__fieldIndex] = index;
			row = item[this.__fieldRowHtml];
			if(row && this.util.isElementOfType(row,"tr"))
			{
				row.setAttribute("ns-index",index);
				var compArrow = row.querySelector(".nsArrow");
				if(compArrow)
				{
					compArrow.setAttribute("ns-parent-row-count",index);
					var arrowID = this.getID() + "compArrow" + index;
					compArrow.setAttribute("id",arrowID);
					var compSvg = compArrow.querySelector("svg");
					if(compSvg)
					{
						var svgID = arrowID + "svg";
						compSvg.setAttribute("id",svgID);
					}
					var compUse = compArrow.querySelector("use");
					if(compUse)
					{
						var useID = arrowID + "use";
						compUse.setAttribute("id",useID);
					}
				}
			}
		}
	};
	
	if(this.__enableVirtualScroll)
				{
					this.util.warning("NSList","As enableVirtualScroll is true so OnDemandHierarchy will have no impact.");
				}
				
				NSGroupingGrid.prototype.addItemsAsChildren = function(item,arrChildren)
	{
	};
	NSGroupingGrid.prototype.__handleOnDemandClick = function(item,event)
	{
	};
	
	var addRow = true;
			if(!this.util.isUndefinedOrNull(itemIndex) && itemIndex > 0 && this.__nsGrid.__tblCenterBodyBody.children 
					&& this.__nsGrid.__tblCenterBodyBody.children.length >= itemIndex)
			{
				var prevRow = this.__nsGrid.__tblCenterBodyBody.children[itemIndex - 1]; //this.__nsGrid.__getRowByIndex(itemIndex);
				if(prevRow)
				{
					this.__nsGrid.__tblCenterBodyBody.insertBefore(row,prevRow);
					addRow = false;
				}
			}
			if(addRow)
			{
				this.__nsGrid.__tblCenterBodyBody.appendChild(row);
			}
			
			NSFlatGrid.prototype.addItemsAsChildren = function(item,arrChildren)
	{
	};
	NSFlatGrid.prototype.__handleOnDemandClick = function(item,event)
	{
	};
	
	var addRow = true;
			if(!this.util.isUndefinedOrNull(itemIndex) && itemIndex > -1 && this.__nsGrid.__tblCenterBodyBody.children 
					&& this.__nsGrid.__tblCenterBodyBody.children.length > itemIndex)
			{
				var prevRow = this.__nsGrid.__tblCenterBodyBody.children[itemIndex]; //this.__nsGrid.__getRowByIndex(itemIndex);
				if(prevRow)
				{
					this.__nsGrid.__tblCenterBodyBody.insertBefore(row,prevRow);
					addRow = false;
				}
			}
			if(addRow)
			{
				this.__nsGrid.__tblCenterBodyBody.appendChild(row);
			}
