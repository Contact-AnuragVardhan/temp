NSUtil.prototype.fromCamelCase = function(objString) 
	{
		if(this.isString(objString))
		{
			return objString.replace(/([A-Z]+)/g, function(match,letter) 
			{
		        return '-' + letter.toLowerCase();
		    });
		}
		return objString;
	};
  
  NSUtil.prototype.getStyleValue = function(element,styleProperty,getOrignalValue,getOnlyNumber)
	{
		var propertyValue = null;
		if(element && styleProperty)
		{
			element = this.getElement(element);
			getOrignalValue = this.isUndefined(getOrignalValue) ? true : getOrignalValue;
			var getValue = function(styleProp)
			{
				var retValue = null;
				if(element.style && element.style[styleProp])
			    {
					retValue = element.style[styleProp];
			    }
				else if(window.getComputedStyle)
				{
					retValue = window.getComputedStyle(element, null).getPropertyValue(styleProp);
				}
				return retValue;
			};
			if(styleProperty === "display")
			{
				propertyValue = getValue(styleProperty);
			}
			else
			{
				var displayValue = null;
				var setStyleValue = false;
				if(getOrignalValue)
				{
					displayValue = getValue("display");
					if(element.style.display)
					{
						setStyleValue = true;
					}
					element.style.display = "none";
				}
				propertyValue = getValue(styleProperty);
				if(getOrignalValue)
				{
					element.style.display = (displayValue && setStyleValue) ? displayValue: "";
				}
			}
			if(getOnlyNumber && !this.isUndefinedOrNull(propertyValue))
			{
				var numberFieldsReg = /^left|top|bottom|right|width|min|max|height|margin|padding|font-size/i;
				if (numberFieldsReg.test(styleProperty) && /^[\-+]?[0-9.]+px$/.test(propertyValue.toString())) 
				{
					propertyValue = parseInt(propertyValue.toString(), 10);
					propertyValue = this.isNumber(propertyValue) ? +propertyValue : propertyValue;
				}
			}
		 }
		 return propertyValue;
	};
  
  
  NSUtil.prototype.getStyleValue = function(element,styleProperty,getOrignalValue,getOnlyNumber)
	{
		var propertyValue = null;
		if(element && styleProperty)
		{
			element = this.getElement(element);
			getOrignalValue = this.isUndefined(getOrignalValue) ? true : getOrignalValue;
			var getValue = function(styleProp)
			{
				var retValue = null;
				if(element.style && element.style[styleProp])
			    {
					retValue = element.style[styleProp];
			    }
				else if(window.getComputedStyle)
				{
					retValue = window.getComputedStyle(element, null).getPropertyValue(styleProp);
				}
				return retValue;
			};
			if(styleProperty === "display")
			{
				propertyValue = getValue(styleProperty);
			}
			else
			{
				var displayValue = null;
				var setStyleValue = false;
				if(getOrignalValue)
				{
					displayValue = getValue("display");
					if(element.style.display)
					{
						setStyleValue = true;
					}
					element.style.display = "none";
				}
				propertyValue = getValue(styleProperty);
				if(getOrignalValue)
				{
					element.style.display = (displayValue && setStyleValue) ? displayValue: "";
				}
			}
			if(getOnlyNumber && !this.isUndefinedOrNull(propertyValue))
			{
				var numberFieldsReg = /^left|top|bottom|right|width|min|max|height|margin|padding|font-size/i;
				if (numberFieldsReg.test(styleProperty) && /^[\-+]?[0-9.]+px$/.test(propertyValue.toString())) 
				{
					propertyValue = parseInt(propertyValue.toString(), 10);
					propertyValue = this.isNumber(propertyValue) ? +propertyValue : propertyValue;
				}
			}
		 }
		 return propertyValue;
	};
  
  
  var NSEditorFullScreen = (function()
{	
	var NSEditorFullScreen = function(nsEditor)
	{
		this.__nsEditor = nsEditor;
		this.util = nsEditor.util;
		
		this.__orignalSetting = {height:null,width: null,changed: false};
		
		this.setSettings = function()
		{
			var self = this;
			this.__nsEditor.__toolBarButton["fullScreen"] = {html:"<i class='fa fa-expand' aria-hidden='true'></i>",tooltip:"Full Screen",showAsMenu: true,
												  checkDisability: function(toolBarKey,toolBarItem,item,itemKey,isDefaultDisabled)
												  {
													  //it should enabled every time
													  return !isDefaultDisabled;
												  },
												  click:function(item,key,event)
												  {
													  self.toggle();
													  event = self.util.getEvent();
													  var iTag = event.target;
													  if(event.target.nodeName.toLowerCase() === "button")
													  {
														  iTag = event.target.children[0];
													  }
													  if(iTag)
													  {
														  if(self.util.hasStyleClass(iTag,"fa-expand"))
														  {
															  self.util.removeStyleClass(iTag,"fa-expand");
															  self.util.addStyleClass(iTag,"fa-compress");
														  }
														  else
														  {
															  self.util.addStyleClass(iTag,"fa-expand");
															  self.util.removeStyleClass(iTag,"fa-compress");
														  }
													  }
												  }};
		};
		
		this.initialize = function()
		{
			this.__nsEditor.__listenInternalEvent("toggleFullSize",this.toggle.bind(this));
		};
		
		this.componentsInitialized = function()
		{
			
		};
		
		this.resized = function(event)
		{
			
		};
		
		this.destroy = function()
		{
			
		};
		
		this.toggle = function()
		{
			this.isFullScreen() ? this.restore() : this.maximize();
		};
		
		this.isFullScreen = function()
		{
			return this.util.hasStyleClass(this.__nsEditor.__divOuterContainer,"nsEditorFullScreen");
		};
		
		this.maximize = function()
		{
			if(!this.isFullScreen())
			{
				this.util.addStyleClass(this.__nsEditor.__divOuterContainer,"nsEditorFullScreen");
				this.__setParentsPosition(false);
	            this.__resizeContainer(false);
	            this.__nsEditor.__dispatchInternalEvent(NSEditor.EVENT_MAXIMIZED);
	            this.__nsEditor.__dispatchInternalEvent("resizeFullScreen");
				this.__nsEditor.__dispatchEvent(NSEditor.EVENT_MAXIMIZED);
			}
		};
		
		this.restore = function()
		{
			if(this.isFullScreen())
			{
				this.util.removeStyleClass(this.__nsEditor.__divOuterContainer,"nsEditorFullScreen");
				this.__setParentsPosition(true);
	            this.__resizeContainer(true);
				this.__nsEditor.__dispatchInternalEvent(NSEditor.EVENT_RESTORED);
				this.__nsEditor.__dispatchInternalEvent("resizeFullScreen");
				this.__nsEditor.__dispatchEvent(NSEditor.EVENT_RESTORED);
			}
		};
		
		this.__setParentsPosition = function(isReset)
		{
			var parent = this.__nsEditor.__divOuterContainer.parentNode;
            while (parent && parent.nodeType !== Node.DOCUMENT_NODE) 
            {
            	isReset ? this.util.removeStyleClass(parent,"nsEditorFullScreenParent") : this.util.addStyleClass(parent,"nsEditorFullScreenParent");
            	parent = parent.parentNode;
            }
		};
		
		this.__resizeContainer = function(isReset)
		{
			var container = this.__nsEditor.__divOuterContainer;
			if(isReset)
			{
				if(this.__orignalSetting.changed)
				{
					var item = {height:this.__orignalSetting.height || "auto",
								width:this.__orignalSetting.width || "auto"};
					this.util.css(container,item);
					this.__orignalSetting = {height:null,width: null,changed: false};
					this.__nsEditor.__resizeCallback(false);
				}
			}
			else
			{
				this.__orignalSetting.height = this.util.getStyleValue(container,"height",false,true);
				this.__orignalSetting.width = this.util.getStyleValue(container,"width",false,true);
				var item = {height:this.__nsEditor.__context.innerHeight,width:this.__nsEditor.__context.innerWidth};
				this.util.css(container,item);
				this.__orignalSetting.changed = true;
				this.__nsEditor.__resizeCallback(true);
			}
		};
		
		NSEditor.prototype.maximize = function()
		{
			var objFullScreen = this.__pluginsInstances["fullScreen"].instance;
			objFullScreen.maximize();
		};
		
		NSEditor.prototype.restore = function()
		{
			var objFullScreen = this.__pluginsInstances["fullScreen"].instance;
			objFullScreen.restore();
		};
		
		NSEditor.prototype.isFullScreen = function()
		{
			var objFullScreen = this.__pluginsInstances["fullScreen"].instance;
			return objFullScreen.isFullScreen();
		};
		
		NSEditor.prototype.toggleFullScreen = function()
		{
			var objFullScreen = this.__pluginsInstances["fullScreen"].instance;
			return objFullScreen.toggle();
		};
		
	};
	NSEditor.TOOLBAR_BUTTONS_FULLSCREEN = "fullScreen";
	NSEditor.EVENT_MAXIMIZED = "maximized";
	NSEditor.EVENT_RESTORED = "restored";
	NSEditor.prototype.registerPlugin("fullScreen",NSEditorFullScreen);
	
	return NSEditorFullScreen;
})();
nsModuleExport(this,"NSEditorFullScreen",NSEditorFullScreen,module,exports);


var NSEditorResize = (function()
{
	var NSEditorResize = function(nsEditor)
	{
		this.__nsEditor = nsEditor;
		this.util = nsEditor.util;
		
		this.__enableResizeHorizontal = false;
		this.__enableResizeVertical = false;
		this.__objStart = {xPos:0,yPos:0,width:0,height:0,isResized: false};
		this.__docMouseMoveRef = null;
		this.__docMouseUpRef = null;
		
		this.setSettings = function()
		{
			this.__nsEditor.__config["enableResize"] = Boolean.parse(this.__nsEditor.__setting["enableResize"]);
			this.__nsEditor.__config["resizeDirection"] = this.__nsEditor.__setting["resizeDirection"] || NSEditor.RESIZE_DIRECTION_VERTICAL;
			this.__enableResizeHorizontal = (this.__nsEditor.__config["resizeDirection"] == NSEditor.RESIZE_DIRECTION_BOTH || this.__nsEditor.__config["resizeDirection"] == NSEditor.RESIZE_DIRECTION_HORIZONTAL);
			this.__enableResizeVertical = (this.__nsEditor.__config["resizeDirection"] == NSEditor.RESIZE_DIRECTION_BOTH || this.__nsEditor.__config["resizeDirection"] == NSEditor.RESIZE_DIRECTION_VERTICAL);
		};
		
		this.initialize = function()
		{
		};
		
		this.componentsInitialized = function()
		{
			if(this.__nsEditor.__config.enableResize && this.__nsEditor.__config.height != "auto")
			{
				this.__nsEditor.__handleVisibilityOfComponent(this.__nsEditor.__divFooterContainer,"enableResize");
				var spanResizer = this.util.createElement("span",this.__nsEditor.getID() + "Resizer","nsEditorResizer");
				if(this.__nsEditor.__config["resizeDirection"] !==  NSEditor.RESIZE_DIRECTION_BOTH)
				{
					this.util.addStyleClass(spanResizer,"nsEditorResizer" + this.__nsEditor.__config["resizeDirection"]);
				}
				spanResizer.innerHTML = "\u25E2";
				this.util.addEvent(spanResizer,"mousedown touchstart",this.__resizeMouseDownHandler.bind(this));
				this.__nsEditor.__divFooterContainer.appendChild(spanResizer);
				var self = this;
				this.__nsEditor.__listenInternalEvent(NSEditor.EVENT_MAXIMIZED,function(event){
					self.util.addStyleClass(spanResizer,"nsEditorComponentHidden");
				});
				this.__nsEditor.__listenInternalEvent(NSEditor.EVENT_RESTORED,function(event){
					self.util.removeStyleClass(spanResizer,"nsEditorComponentHidden");
				});
			}
		};
		
		this.resized = function(event)
		{
			
		};
		
		this.destroy = function()
		{
			
		};
		
		this.__resizeMouseDownHandler = function(event)
		{
			event = this.util.getEvent(event);
			var outerContainer = this.__nsEditor.__divOuterContainer;
			this.__objStart = {xPos:event.clientX,yPos:event.clientY,width:outerContainer.offsetWidth,height:outerContainer.offsetHeight,isResized: true};
			if(!this.__docMouseMoveRef)
			{
				this.__docMouseMoveRef = this.__docMouseMoveHandler.bind(this);
				this.util.addEvent(this.__nsEditor.__context,"mousemove touchmove",this.__docMouseMoveRef);
			}
			if(!this.__docMouseUpRef)
			{
				this.__docMouseUpRef = this.__docMouseUpHandler.bind(this);
				this.util.addEvent(this.__nsEditor.__context,"mouseup touchend",this.__docMouseUpRef);
			}
			this.__nsEditor.__dispatchInternalEvent("resizeStart");
			event.preventDefault();
		};
		
		this.__docMouseMoveHandler = function(event)
		{
			event = this.util.getEvent(event);
			if(this.__objStart.isResized)
			{
				if (this.__enableResizeHorizontal) 
				{
					var width = this.__objStart.width + event.clientX - this.__objStart.xPos;
					this.__nsEditor.__width(width);
	            }
				if (this.__enableResizeVertical) 
				{
					var height = this.__objStart.height + event.clientY - this.__objStart.yPos;
					this.__nsEditor.__height(height);
	            }
				this.__nsEditor.__resizeCallback();
				this.__nsEditor.__dispatchInternalEvent("resize");
			}
		};
		
		this.__docMouseUpHandler = function(event)
		{
			if(this.__objStart.isResized)
			{
				this.__objStart = {xPos:0,yPos:0,width:0,height:0,isResized: false};
				this.__nsEditor.__dispatchInternalEvent("resizeEnd");
			}
			if(this.__docMouseMoveRef)
			{
				this.util.removeEvent(this.__nsEditor.__context,"mousemove touchmove",this.__docMouseMoveRef);
				this.__docMouseMoveRef = null;
			}
			if(this.__docMouseUpRef)
			{
				this.util.removeEvent(this.__nsEditor.__context,"mouseup touchend",this.__docMouseUpRef);
				this.__docMouseUpRef = null;
			}
		};
	};
	NSEditor.RESIZE_DIRECTION_HORIZONTAL = "horizontal";
	NSEditor.RESIZE_DIRECTION_VERTICAL = "vertical";
	NSEditor.RESIZE_DIRECTION_BOTH = "both";
	NSEditor.prototype.registerPlugin("resize",NSEditorResize);
	
	return NSEditorResize;
})();
nsModuleExport(this,"NSEditorResize",NSEditorResize,module,exports);


.nsEditor.nsEditorSticky .nsEditorToolBarContainer
{
	position: fixed;
    position: sticky;
    z-index: 3;
    top: 0;
    left: auto;
}

.nsEditorStickyToolbar
{
	display: none
}

.nsEditor.nsEditorSticky .nsEditorStickyToolbar
{
	display: block;
}


